"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-block-tracker";
exports.ids = ["vendor-chunks/eth-block-tracker"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-block-tracker/src/base.js":
/*!****************************************************!*\
  !*** ./node_modules/eth-block-tracker/src/base.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EthQuery = __webpack_require__(/*! eth-query */ \"(ssr)/./node_modules/eth-query/index.js\");\nconst pify = __webpack_require__(/*! pify */ \"(ssr)/./node_modules/pify/index.js\");\nconst SafeEventEmitter = __webpack_require__(/*! safe-event-emitter */ \"(ssr)/./node_modules/safe-event-emitter/index.js\");\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue)=>accumulator + currentValue;\nconst blockTrackerEvents = [\n    \"sync\",\n    \"latest\"\n];\nclass BaseBlockTracker extends SafeEventEmitter {\n    //\n    // public\n    //\n    constructor(opts = {}){\n        super();\n        // config\n        this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n        // state\n        this._blockResetTimeout;\n        this._currentBlock = null;\n        this._isRunning = false;\n        // bind functions for internal use\n        this._onNewListener = this._onNewListener.bind(this);\n        this._onRemoveListener = this._onRemoveListener.bind(this);\n        this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n        // listen for handler changes\n        this._setupInternalEvents();\n    }\n    isRunning() {\n        return this._isRunning;\n    }\n    getCurrentBlock() {\n        return this._currentBlock;\n    }\n    async getLatestBlock() {\n        // return if available\n        if (this._currentBlock) return this._currentBlock;\n        // wait for a new latest block\n        const latestBlock = await new Promise((resolve)=>this.once(\"latest\", resolve));\n        // return newly set current block\n        return latestBlock;\n    }\n    // dont allow module consumer to remove our internal event listeners\n    removeAllListeners(eventName) {\n        // perform default behavior, preserve fn arity\n        if (eventName) {\n            super.removeAllListeners(eventName);\n        } else {\n            super.removeAllListeners();\n        }\n        // re-add internal events\n        this._setupInternalEvents();\n        // trigger stop check just in case\n        this._onRemoveListener();\n    }\n    //\n    // to be implemented in subclass\n    //\n    _start() {\n    // default behavior is noop\n    }\n    _end() {\n    // default behavior is noop\n    }\n    //\n    // private\n    //\n    _setupInternalEvents() {\n        // first remove listeners for idempotence\n        this.removeListener(\"newListener\", this._onNewListener);\n        this.removeListener(\"removeListener\", this._onRemoveListener);\n        // then add them\n        this.on(\"newListener\", this._onNewListener);\n        this.on(\"removeListener\", this._onRemoveListener);\n    }\n    _onNewListener(eventName, handler) {\n        // `newListener` is called *before* the listener is added\n        if (!blockTrackerEvents.includes(eventName)) return;\n        this._maybeStart();\n    }\n    _onRemoveListener(eventName, handler) {\n        // `removeListener` is called *after* the listener is removed\n        if (this._getBlockTrackerEventCount() > 0) return;\n        this._maybeEnd();\n    }\n    _maybeStart() {\n        if (this._isRunning) return;\n        this._isRunning = true;\n        // cancel setting latest block to stale\n        this._cancelBlockResetTimeout();\n        this._start();\n    }\n    _maybeEnd() {\n        if (!this._isRunning) return;\n        this._isRunning = false;\n        this._setupBlockResetTimeout();\n        this._end();\n    }\n    _getBlockTrackerEventCount() {\n        return blockTrackerEvents.map((eventName)=>this.listenerCount(eventName)).reduce(calculateSum);\n    }\n    _newPotentialLatest(newBlock) {\n        const currentBlock = this._currentBlock;\n        // only update if blok number is higher\n        if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) return;\n        this._setCurrentBlock(newBlock);\n    }\n    _setCurrentBlock(newBlock) {\n        const oldBlock = this._currentBlock;\n        this._currentBlock = newBlock;\n        this.emit(\"latest\", newBlock);\n        this.emit(\"sync\", {\n            oldBlock,\n            newBlock\n        });\n    }\n    _setupBlockResetTimeout() {\n        // clear any existing timeout\n        this._cancelBlockResetTimeout();\n        // clear latest block when stale\n        this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n        // nodejs - dont hold process open\n        if (this._blockResetTimeout.unref) {\n            this._blockResetTimeout.unref();\n        }\n    }\n    _cancelBlockResetTimeout() {\n        clearTimeout(this._blockResetTimeout);\n    }\n    _resetCurrentBlock() {\n        this._currentBlock = null;\n    }\n}\nmodule.exports = BaseBlockTracker;\nfunction hexToInt(hexInt) {\n    return Number.parseInt(hexInt, 16);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/src/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-block-tracker/src/polling.js":
/*!*******************************************************!*\
  !*** ./node_modules/eth-block-tracker/src/polling.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst pify = __webpack_require__(/*! pify */ \"(ssr)/./node_modules/pify/index.js\");\nconst BaseBlockTracker = __webpack_require__(/*! ./base */ \"(ssr)/./node_modules/eth-block-tracker/src/base.js\");\nconst sec = 1000;\nclass PollingBlockTracker extends BaseBlockTracker {\n    constructor(opts = {}){\n        // parse + validate args\n        if (!opts.provider) throw new Error(\"PollingBlockTracker - no provider specified.\");\n        const pollingInterval = opts.pollingInterval || 20 * sec;\n        const retryTimeout = opts.retryTimeout || pollingInterval / 10;\n        const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n        const setSkipCacheFlag = opts.setSkipCacheFlag || false;\n        // BaseBlockTracker constructor\n        super(Object.assign({\n            blockResetDuration: pollingInterval\n        }, opts));\n        // config\n        this._provider = opts.provider;\n        this._pollingInterval = pollingInterval;\n        this._retryTimeout = retryTimeout;\n        this._keepEventLoopActive = keepEventLoopActive;\n        this._setSkipCacheFlag = setSkipCacheFlag;\n    }\n    //\n    // public\n    //\n    // trigger block polling\n    async checkForLatestBlock() {\n        await this._updateLatestBlock();\n        return await this.getLatestBlock();\n    }\n    //\n    // private\n    //\n    _start() {\n        this._performSync().catch((err)=>this.emit(\"error\", err));\n    }\n    async _performSync() {\n        while(this._isRunning){\n            try {\n                await this._updateLatestBlock();\n                await timeout(this._pollingInterval, !this._keepEventLoopActive);\n            } catch (err) {\n                const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${err.stack}`);\n                try {\n                    this.emit(\"error\", newErr);\n                } catch (emitErr) {\n                    console.error(newErr);\n                }\n                await timeout(this._retryTimeout, !this._keepEventLoopActive);\n            }\n        }\n    }\n    async _updateLatestBlock() {\n        // fetch + set latest block\n        const latestBlock = await this._fetchLatestBlock();\n        this._newPotentialLatest(latestBlock);\n    }\n    async _fetchLatestBlock() {\n        const req = {\n            jsonrpc: \"2.0\",\n            id: 1,\n            method: \"eth_blockNumber\",\n            params: []\n        };\n        if (this._setSkipCacheFlag) req.skipCache = true;\n        const res = await pify((cb)=>this._provider.sendAsync(req, cb))();\n        if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error}`);\n        return res.result;\n    }\n}\nmodule.exports = PollingBlockTracker;\nfunction timeout(duration, unref) {\n    return new Promise((resolve)=>{\n        const timoutRef = setTimeout(resolve, duration);\n        // don't keep process open\n        if (timoutRef.unref && unref) {\n            timoutRef.unref();\n        }\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWJsb2NrLXRyYWNrZXIvc3JjL3BvbGxpbmcuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU1DLG1CQUFtQkQsbUJBQU9BLENBQUM7QUFFakMsTUFBTUUsTUFBTTtBQUVaLE1BQU1DLDRCQUE0QkY7SUFFaENHLFlBQWFDLE9BQU8sQ0FBQyxDQUFDLENBQUU7UUFDdEIsd0JBQXdCO1FBQ3hCLElBQUksQ0FBQ0EsS0FBS0MsUUFBUSxFQUFFLE1BQU0sSUFBSUMsTUFBTTtRQUNwQyxNQUFNQyxrQkFBa0JILEtBQUtHLGVBQWUsSUFBSSxLQUFLTjtRQUNyRCxNQUFNTyxlQUFlSixLQUFLSSxZQUFZLElBQUlELGtCQUFrQjtRQUM1RCxNQUFNRSxzQkFBc0JMLEtBQUtLLG1CQUFtQixLQUFLQyxZQUFZTixLQUFLSyxtQkFBbUIsR0FBRztRQUNoRyxNQUFNRSxtQkFBbUJQLEtBQUtPLGdCQUFnQixJQUFJO1FBQ2xELCtCQUErQjtRQUMvQixLQUFLLENBQUNDLE9BQU9DLE1BQU0sQ0FBQztZQUNsQkMsb0JBQW9CUDtRQUN0QixHQUFHSDtRQUNILFNBQVM7UUFDVCxJQUFJLENBQUNXLFNBQVMsR0FBR1gsS0FBS0MsUUFBUTtRQUM5QixJQUFJLENBQUNXLGdCQUFnQixHQUFHVDtRQUN4QixJQUFJLENBQUNVLGFBQWEsR0FBR1Q7UUFDckIsSUFBSSxDQUFDVSxvQkFBb0IsR0FBR1Q7UUFDNUIsSUFBSSxDQUFDVSxpQkFBaUIsR0FBR1I7SUFDM0I7SUFFQSxFQUFFO0lBQ0YsU0FBUztJQUNULEVBQUU7SUFFRix3QkFBd0I7SUFDeEIsTUFBTVMsc0JBQXVCO1FBQzNCLE1BQU0sSUFBSSxDQUFDQyxrQkFBa0I7UUFDN0IsT0FBTyxNQUFNLElBQUksQ0FBQ0MsY0FBYztJQUNsQztJQUVBLEVBQUU7SUFDRixVQUFVO0lBQ1YsRUFBRTtJQUVGQyxTQUFVO1FBQ1IsSUFBSSxDQUFDQyxZQUFZLEdBQUdDLEtBQUssQ0FBQ0MsQ0FBQUEsTUFBTyxJQUFJLENBQUNDLElBQUksQ0FBQyxTQUFTRDtJQUN0RDtJQUVBLE1BQU1GLGVBQWdCO1FBQ3BCLE1BQU8sSUFBSSxDQUFDSSxVQUFVLENBQUU7WUFDdEIsSUFBSTtnQkFDRixNQUFNLElBQUksQ0FBQ1Asa0JBQWtCO2dCQUM3QixNQUFNUSxRQUFRLElBQUksQ0FBQ2IsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUNFLG9CQUFvQjtZQUNqRSxFQUFFLE9BQU9RLEtBQUs7Z0JBQ1osTUFBTUksU0FBUyxJQUFJeEIsTUFBTSxDQUFDLHFGQUFxRixFQUFFb0IsSUFBSUssS0FBSyxDQUFDLENBQUM7Z0JBQzVILElBQUk7b0JBQ0YsSUFBSSxDQUFDSixJQUFJLENBQUMsU0FBU0c7Z0JBQ3JCLEVBQUUsT0FBT0UsU0FBUztvQkFDaEJDLFFBQVFDLEtBQUssQ0FBQ0o7Z0JBQ2hCO2dCQUNBLE1BQU1ELFFBQVEsSUFBSSxDQUFDWixhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUNDLG9CQUFvQjtZQUM5RDtRQUNGO0lBQ0Y7SUFFQSxNQUFNRyxxQkFBc0I7UUFDMUIsMkJBQTJCO1FBQzNCLE1BQU1jLGNBQWMsTUFBTSxJQUFJLENBQUNDLGlCQUFpQjtRQUNoRCxJQUFJLENBQUNDLG1CQUFtQixDQUFDRjtJQUMzQjtJQUVBLE1BQU1DLG9CQUFxQjtRQUN6QixNQUFNRSxNQUFNO1lBQUVDLFNBQVM7WUFBT0MsSUFBSTtZQUFHQyxRQUFRO1lBQW1CQyxRQUFRLEVBQUU7UUFBQztRQUMzRSxJQUFJLElBQUksQ0FBQ3ZCLGlCQUFpQixFQUFFbUIsSUFBSUssU0FBUyxHQUFHO1FBQzVDLE1BQU1DLE1BQU0sTUFBTTlDLEtBQUssQ0FBQytDLEtBQU8sSUFBSSxDQUFDOUIsU0FBUyxDQUFDK0IsU0FBUyxDQUFDUixLQUFLTztRQUM3RCxJQUFJRCxJQUFJVixLQUFLLEVBQUUsTUFBTSxJQUFJNUIsTUFBTSxDQUFDLHlEQUF5RCxFQUFFc0MsSUFBSVYsS0FBSyxDQUFDLENBQUM7UUFDdEcsT0FBT1UsSUFBSUcsTUFBTTtJQUNuQjtBQUVGO0FBRUFDLE9BQU9DLE9BQU8sR0FBRy9DO0FBRWpCLFNBQVMyQixRQUFTcUIsUUFBUSxFQUFFQyxLQUFLO0lBQy9CLE9BQU8sSUFBSUMsUUFBUUMsQ0FBQUE7UUFDakIsTUFBTUMsWUFBWUMsV0FBV0YsU0FBU0g7UUFDdEMsMEJBQTBCO1FBQzFCLElBQUlJLFVBQVVILEtBQUssSUFBSUEsT0FBTztZQUM1QkcsVUFBVUgsS0FBSztRQUNqQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9ldGgtYmxvY2stdHJhY2tlci9zcmMvcG9sbGluZy5qcz8xN2M1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBpZnkgPSByZXF1aXJlKCdwaWZ5JylcbmNvbnN0IEJhc2VCbG9ja1RyYWNrZXIgPSByZXF1aXJlKCcuL2Jhc2UnKVxuXG5jb25zdCBzZWMgPSAxMDAwXG5cbmNsYXNzIFBvbGxpbmdCbG9ja1RyYWNrZXIgZXh0ZW5kcyBCYXNlQmxvY2tUcmFja2VyIHtcblxuICBjb25zdHJ1Y3RvciAob3B0cyA9IHt9KSB7XG4gICAgLy8gcGFyc2UgKyB2YWxpZGF0ZSBhcmdzXG4gICAgaWYgKCFvcHRzLnByb3ZpZGVyKSB0aHJvdyBuZXcgRXJyb3IoJ1BvbGxpbmdCbG9ja1RyYWNrZXIgLSBubyBwcm92aWRlciBzcGVjaWZpZWQuJylcbiAgICBjb25zdCBwb2xsaW5nSW50ZXJ2YWwgPSBvcHRzLnBvbGxpbmdJbnRlcnZhbCB8fCAyMCAqIHNlY1xuICAgIGNvbnN0IHJldHJ5VGltZW91dCA9IG9wdHMucmV0cnlUaW1lb3V0IHx8IHBvbGxpbmdJbnRlcnZhbCAvIDEwXG4gICAgY29uc3Qga2VlcEV2ZW50TG9vcEFjdGl2ZSA9IG9wdHMua2VlcEV2ZW50TG9vcEFjdGl2ZSAhPT0gdW5kZWZpbmVkID8gb3B0cy5rZWVwRXZlbnRMb29wQWN0aXZlIDogdHJ1ZVxuICAgIGNvbnN0IHNldFNraXBDYWNoZUZsYWcgPSBvcHRzLnNldFNraXBDYWNoZUZsYWcgfHwgZmFsc2VcbiAgICAvLyBCYXNlQmxvY2tUcmFja2VyIGNvbnN0cnVjdG9yXG4gICAgc3VwZXIoT2JqZWN0LmFzc2lnbih7XG4gICAgICBibG9ja1Jlc2V0RHVyYXRpb246IHBvbGxpbmdJbnRlcnZhbCxcbiAgICB9LCBvcHRzKSlcbiAgICAvLyBjb25maWdcbiAgICB0aGlzLl9wcm92aWRlciA9IG9wdHMucHJvdmlkZXJcbiAgICB0aGlzLl9wb2xsaW5nSW50ZXJ2YWwgPSBwb2xsaW5nSW50ZXJ2YWxcbiAgICB0aGlzLl9yZXRyeVRpbWVvdXQgPSByZXRyeVRpbWVvdXRcbiAgICB0aGlzLl9rZWVwRXZlbnRMb29wQWN0aXZlID0ga2VlcEV2ZW50TG9vcEFjdGl2ZVxuICAgIHRoaXMuX3NldFNraXBDYWNoZUZsYWcgPSBzZXRTa2lwQ2FjaGVGbGFnXG4gIH1cblxuICAvL1xuICAvLyBwdWJsaWNcbiAgLy9cblxuICAvLyB0cmlnZ2VyIGJsb2NrIHBvbGxpbmdcbiAgYXN5bmMgY2hlY2tGb3JMYXRlc3RCbG9jayAoKSB7XG4gICAgYXdhaXQgdGhpcy5fdXBkYXRlTGF0ZXN0QmxvY2soKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldExhdGVzdEJsb2NrKClcbiAgfVxuXG4gIC8vXG4gIC8vIHByaXZhdGVcbiAgLy9cblxuICBfc3RhcnQgKCkge1xuICAgIHRoaXMuX3BlcmZvcm1TeW5jKCkuY2F0Y2goZXJyID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpKVxuICB9XG5cbiAgYXN5bmMgX3BlcmZvcm1TeW5jICgpIHtcbiAgICB3aGlsZSAodGhpcy5faXNSdW5uaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLl91cGRhdGVMYXRlc3RCbG9jaygpXG4gICAgICAgIGF3YWl0IHRpbWVvdXQodGhpcy5fcG9sbGluZ0ludGVydmFsLCAhdGhpcy5fa2VlcEV2ZW50TG9vcEFjdGl2ZSlcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zdCBuZXdFcnIgPSBuZXcgRXJyb3IoYFBvbGxpbmdCbG9ja1RyYWNrZXIgLSBlbmNvdW50ZXJlZCBhbiBlcnJvciB3aGlsZSBhdHRlbXB0aW5nIHRvIHVwZGF0ZSBsYXRlc3QgYmxvY2s6XFxuJHtlcnIuc3RhY2t9YClcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3RXJyKVxuICAgICAgICB9IGNhdGNoIChlbWl0RXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihuZXdFcnIpXG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGltZW91dCh0aGlzLl9yZXRyeVRpbWVvdXQsICF0aGlzLl9rZWVwRXZlbnRMb29wQWN0aXZlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIF91cGRhdGVMYXRlc3RCbG9jayAoKSB7XG4gICAgLy8gZmV0Y2ggKyBzZXQgbGF0ZXN0IGJsb2NrXG4gICAgY29uc3QgbGF0ZXN0QmxvY2sgPSBhd2FpdCB0aGlzLl9mZXRjaExhdGVzdEJsb2NrKClcbiAgICB0aGlzLl9uZXdQb3RlbnRpYWxMYXRlc3QobGF0ZXN0QmxvY2spXG4gIH1cblxuICBhc3luYyBfZmV0Y2hMYXRlc3RCbG9jayAoKSB7XG4gICAgY29uc3QgcmVxID0geyBqc29ucnBjOiBcIjIuMFwiLCBpZDogMSwgbWV0aG9kOiAnZXRoX2Jsb2NrTnVtYmVyJywgcGFyYW1zOiBbXSB9XG4gICAgaWYgKHRoaXMuX3NldFNraXBDYWNoZUZsYWcpIHJlcS5za2lwQ2FjaGUgPSB0cnVlXG4gICAgY29uc3QgcmVzID0gYXdhaXQgcGlmeSgoY2IpID0+IHRoaXMuX3Byb3ZpZGVyLnNlbmRBc3luYyhyZXEsIGNiKSkoKVxuICAgIGlmIChyZXMuZXJyb3IpIHRocm93IG5ldyBFcnJvcihgUG9sbGluZ0Jsb2NrVHJhY2tlciAtIGVuY291bnRlcmVkIGVycm9yIGZldGNoaW5nIGJsb2NrOlxcbiR7cmVzLmVycm9yfWApXG4gICAgcmV0dXJuIHJlcy5yZXN1bHRcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9sbGluZ0Jsb2NrVHJhY2tlclxuXG5mdW5jdGlvbiB0aW1lb3V0IChkdXJhdGlvbiwgdW5yZWYpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIGNvbnN0IHRpbW91dFJlZiA9IHNldFRpbWVvdXQocmVzb2x2ZSwgZHVyYXRpb24pXG4gICAgLy8gZG9uJ3Qga2VlcCBwcm9jZXNzIG9wZW5cbiAgICBpZiAodGltb3V0UmVmLnVucmVmICYmIHVucmVmKSB7XG4gICAgICB0aW1vdXRSZWYudW5yZWYoKVxuICAgIH1cbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJwaWZ5IiwicmVxdWlyZSIsIkJhc2VCbG9ja1RyYWNrZXIiLCJzZWMiLCJQb2xsaW5nQmxvY2tUcmFja2VyIiwiY29uc3RydWN0b3IiLCJvcHRzIiwicHJvdmlkZXIiLCJFcnJvciIsInBvbGxpbmdJbnRlcnZhbCIsInJldHJ5VGltZW91dCIsImtlZXBFdmVudExvb3BBY3RpdmUiLCJ1bmRlZmluZWQiLCJzZXRTa2lwQ2FjaGVGbGFnIiwiT2JqZWN0IiwiYXNzaWduIiwiYmxvY2tSZXNldER1cmF0aW9uIiwiX3Byb3ZpZGVyIiwiX3BvbGxpbmdJbnRlcnZhbCIsIl9yZXRyeVRpbWVvdXQiLCJfa2VlcEV2ZW50TG9vcEFjdGl2ZSIsIl9zZXRTa2lwQ2FjaGVGbGFnIiwiY2hlY2tGb3JMYXRlc3RCbG9jayIsIl91cGRhdGVMYXRlc3RCbG9jayIsImdldExhdGVzdEJsb2NrIiwiX3N0YXJ0IiwiX3BlcmZvcm1TeW5jIiwiY2F0Y2giLCJlcnIiLCJlbWl0IiwiX2lzUnVubmluZyIsInRpbWVvdXQiLCJuZXdFcnIiLCJzdGFjayIsImVtaXRFcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJsYXRlc3RCbG9jayIsIl9mZXRjaExhdGVzdEJsb2NrIiwiX25ld1BvdGVudGlhbExhdGVzdCIsInJlcSIsImpzb25ycGMiLCJpZCIsIm1ldGhvZCIsInBhcmFtcyIsInNraXBDYWNoZSIsInJlcyIsImNiIiwic2VuZEFzeW5jIiwicmVzdWx0IiwibW9kdWxlIiwiZXhwb3J0cyIsImR1cmF0aW9uIiwidW5yZWYiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRpbW91dFJlZiIsInNldFRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-block-tracker/src/polling.js\n");

/***/ })

};
;