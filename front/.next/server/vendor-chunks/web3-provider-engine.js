"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/web3-provider-engine";
exports.ids = ["vendor-chunks/web3-provider-engine"];
exports.modules = {

/***/ "(ssr)/./node_modules/web3-provider-engine/index.js":
/*!****************************************************!*\
  !*** ./node_modules/web3-provider-engine/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nconst ethUtil = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-util/dist/index.js\");\nconst EthBlockTracker = __webpack_require__(/*! eth-block-tracker */ \"(ssr)/./node_modules/eth-block-tracker/src/polling.js\");\nconst map = __webpack_require__(/*! async/map */ \"(ssr)/./node_modules/async/map.js\");\nconst eachSeries = __webpack_require__(/*! async/eachSeries */ \"(ssr)/./node_modules/async/eachSeries.js\");\nconst Stoplight = __webpack_require__(/*! ./util/stoplight.js */ \"(ssr)/./node_modules/web3-provider-engine/util/stoplight.js\");\nconst cacheUtils = __webpack_require__(/*! ./util/rpc-cache-utils.js */ \"(ssr)/./node_modules/web3-provider-engine/util/rpc-cache-utils.js\");\nconst createPayload = __webpack_require__(/*! ./util/create-payload.js */ \"(ssr)/./node_modules/web3-provider-engine/util/create-payload.js\");\nconst noop = function() {};\nmodule.exports = Web3ProviderEngine;\ninherits(Web3ProviderEngine, EventEmitter);\nfunction Web3ProviderEngine(opts) {\n    const self = this;\n    EventEmitter.call(self);\n    self.setMaxListeners(30);\n    // parse options\n    opts = opts || {};\n    // block polling\n    const directProvider = {\n        sendAsync: self._handleAsync.bind(self)\n    };\n    const blockTrackerProvider = opts.blockTrackerProvider || directProvider;\n    self._blockTracker = opts.blockTracker || new EthBlockTracker({\n        provider: blockTrackerProvider,\n        pollingInterval: opts.pollingInterval || 4000,\n        setSkipCacheFlag: true\n    });\n    // set initialization blocker\n    self._ready = new Stoplight();\n    // local state\n    self.currentBlock = null;\n    self._providers = [];\n}\n// public\nWeb3ProviderEngine.prototype.start = function(cb = noop) {\n    const self = this;\n    // trigger start\n    self._ready.go();\n    // on new block, request block body and emit as events\n    self._blockTracker.on(\"latest\", (blockNumber)=>{\n        // get block body\n        self._getBlockByNumberWithRetry(blockNumber, (err, block)=>{\n            if (err) {\n                this.emit(\"error\", err);\n                return;\n            }\n            if (!block) {\n                console.log(block);\n                this.emit(\"error\", new Error(\"Could not find block\"));\n                return;\n            }\n            const bufferBlock = toBufferBlock(block);\n            // set current + emit \"block\" event\n            self._setCurrentBlock(bufferBlock);\n            // emit other events\n            self.emit(\"rawBlock\", block);\n            self.emit(\"latest\", block);\n        });\n    });\n    // forward other events\n    self._blockTracker.on(\"sync\", self.emit.bind(self, \"sync\"));\n    self._blockTracker.on(\"error\", self.emit.bind(self, \"error\"));\n    // update state\n    self._running = true;\n    // signal that we started\n    self.emit(\"start\");\n};\nWeb3ProviderEngine.prototype.stop = function() {\n    const self = this;\n    // stop block polling by removing event listeners\n    self._blockTracker.removeAllListeners();\n    // update state\n    self._running = false;\n    // signal that we stopped\n    self.emit(\"stop\");\n};\nWeb3ProviderEngine.prototype.isRunning = function() {\n    const self = this;\n    return self._running;\n};\nWeb3ProviderEngine.prototype.addProvider = function(source, index) {\n    const self = this;\n    if (typeof index === \"number\") {\n        self._providers.splice(index, 0, source);\n    } else {\n        self._providers.push(source);\n    }\n    source.setEngine(this);\n};\nWeb3ProviderEngine.prototype.removeProvider = function(source) {\n    const self = this;\n    const index = self._providers.indexOf(source);\n    if (index < 0) throw new Error(\"Provider not found.\");\n    self._providers.splice(index, 1);\n};\nWeb3ProviderEngine.prototype.send = function(payload) {\n    throw new Error(\"Web3ProviderEngine does not support synchronous requests.\");\n};\nWeb3ProviderEngine.prototype.sendAsync = function(payload, cb) {\n    const self = this;\n    self._ready.await(function() {\n        if (Array.isArray(payload)) {\n            // handle batch\n            map(payload, self._handleAsync.bind(self), cb);\n        } else {\n            // handle single\n            self._handleAsync(payload, cb);\n        }\n    });\n};\n// private\nWeb3ProviderEngine.prototype._getBlockByNumberWithRetry = function(blockNumber, cb) {\n    const self = this;\n    let retriesRemaining = 5;\n    attemptRequest();\n    return;\n    function attemptRequest() {\n        self._getBlockByNumber(blockNumber, afterRequest);\n    }\n    function afterRequest(err, block) {\n        // anomalous error occurred\n        if (err) return cb(err);\n        // block not ready yet\n        if (!block) {\n            if (retriesRemaining > 0) {\n                // wait 1s then try again\n                retriesRemaining--;\n                setTimeout(function() {\n                    attemptRequest();\n                }, 1000);\n                return;\n            } else {\n                // give up, return a null block\n                cb(null, null);\n                return;\n            }\n        }\n        // otherwise return result\n        cb(null, block);\n        return;\n    }\n};\nWeb3ProviderEngine.prototype._getBlockByNumber = function(blockNumber, cb) {\n    const req = createPayload({\n        method: \"eth_getBlockByNumber\",\n        params: [\n            blockNumber,\n            false\n        ],\n        skipCache: true\n    });\n    this._handleAsync(req, (err, res)=>{\n        if (err) return cb(err);\n        return cb(null, res.result);\n    });\n};\nWeb3ProviderEngine.prototype._handleAsync = function(payload, finished) {\n    var self = this;\n    var currentProvider = -1;\n    var result = null;\n    var error = null;\n    var stack = [];\n    next();\n    function next(after) {\n        currentProvider += 1;\n        stack.unshift(after);\n        // Bubbled down as far as we could go, and the request wasn't\n        // handled. Return an error.\n        if (currentProvider >= self._providers.length) {\n            end(new Error('Request for method \"' + payload.method + '\" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));\n        } else {\n            try {\n                var provider = self._providers[currentProvider];\n                provider.handleRequest(payload, next, end);\n            } catch (e) {\n                end(e);\n            }\n        }\n    }\n    function end(_error, _result) {\n        error = _error;\n        result = _result;\n        eachSeries(stack, function(fn, callback) {\n            if (fn) {\n                fn(error, result, callback);\n            } else {\n                callback();\n            }\n        }, function() {\n            var resultObj = {\n                id: payload.id,\n                jsonrpc: payload.jsonrpc,\n                result: result\n            };\n            if (error != null) {\n                resultObj.error = {\n                    message: error.stack || error.message || error,\n                    code: -32000\n                };\n                // respond with both error formats\n                finished(error, resultObj);\n            } else {\n                finished(null, resultObj);\n            }\n        });\n    }\n};\n//\n// from remote-data\n//\nWeb3ProviderEngine.prototype._setCurrentBlock = function(block) {\n    const self = this;\n    self.currentBlock = block;\n    self.emit(\"block\", block);\n};\n// util\nfunction toBufferBlock(jsonBlock) {\n    return {\n        number: ethUtil.toBuffer(jsonBlock.number),\n        hash: ethUtil.toBuffer(jsonBlock.hash),\n        parentHash: ethUtil.toBuffer(jsonBlock.parentHash),\n        nonce: ethUtil.toBuffer(jsonBlock.nonce),\n        mixHash: ethUtil.toBuffer(jsonBlock.mixHash),\n        sha3Uncles: ethUtil.toBuffer(jsonBlock.sha3Uncles),\n        logsBloom: ethUtil.toBuffer(jsonBlock.logsBloom),\n        transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),\n        stateRoot: ethUtil.toBuffer(jsonBlock.stateRoot),\n        receiptsRoot: ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),\n        miner: ethUtil.toBuffer(jsonBlock.miner),\n        difficulty: ethUtil.toBuffer(jsonBlock.difficulty),\n        totalDifficulty: ethUtil.toBuffer(jsonBlock.totalDifficulty),\n        size: ethUtil.toBuffer(jsonBlock.size),\n        extraData: ethUtil.toBuffer(jsonBlock.extraData),\n        gasLimit: ethUtil.toBuffer(jsonBlock.gasLimit),\n        gasUsed: ethUtil.toBuffer(jsonBlock.gasUsed),\n        timestamp: ethUtil.toBuffer(jsonBlock.timestamp),\n        transactions: jsonBlock.transactions\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/subproviders/cache.js":
/*!*****************************************************************!*\
  !*** ./node_modules/web3-provider-engine/subproviders/cache.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ProviderSubprovider = __webpack_require__(/*! ./json-rpc-engine-middleware */ \"(ssr)/./node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js\");\nconst createBlockCacheMiddleware = __webpack_require__(/*! eth-json-rpc-middleware/block-cache */ \"(ssr)/./node_modules/eth-json-rpc-middleware/block-cache.js\");\nclass BlockCacheSubprovider extends ProviderSubprovider {\n    constructor(opts){\n        super(({ blockTracker })=>createBlockCacheMiddleware(Object.assign({\n                blockTracker\n            }, opts)));\n    }\n}\nmodule.exports = BlockCacheSubprovider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2NhY2hlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxzQkFBc0JDLG1CQUFPQSxDQUFDO0FBQ3BDLE1BQU1DLDZCQUE2QkQsbUJBQU9BLENBQUM7QUFFM0MsTUFBTUUsOEJBQThCSDtJQUNsQ0ksWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLEtBQUssQ0FBQyxDQUFDLEVBQUVDLFlBQVksRUFBRSxHQUFLSiwyQkFBMkJLLE9BQU9DLE1BQU0sQ0FBQztnQkFBRUY7WUFBYSxHQUFHRDtJQUN6RjtBQUNGO0FBRUFJLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvY2FjaGUuanM/OWU2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQcm92aWRlclN1YnByb3ZpZGVyID0gcmVxdWlyZSgnLi9qc29uLXJwYy1lbmdpbmUtbWlkZGxld2FyZScpXG5jb25zdCBjcmVhdGVCbG9ja0NhY2hlTWlkZGxld2FyZSA9IHJlcXVpcmUoJ2V0aC1qc29uLXJwYy1taWRkbGV3YXJlL2Jsb2NrLWNhY2hlJylcblxuY2xhc3MgQmxvY2tDYWNoZVN1YnByb3ZpZGVyIGV4dGVuZHMgUHJvdmlkZXJTdWJwcm92aWRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcigoeyBibG9ja1RyYWNrZXIgfSkgPT4gY3JlYXRlQmxvY2tDYWNoZU1pZGRsZXdhcmUoT2JqZWN0LmFzc2lnbih7IGJsb2NrVHJhY2tlciB9LCBvcHRzKSkpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbG9ja0NhY2hlU3VicHJvdmlkZXJcbiJdLCJuYW1lcyI6WyJQcm92aWRlclN1YnByb3ZpZGVyIiwicmVxdWlyZSIsImNyZWF0ZUJsb2NrQ2FjaGVNaWRkbGV3YXJlIiwiQmxvY2tDYWNoZVN1YnByb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiYmxvY2tUcmFja2VyIiwiT2JqZWN0IiwiYXNzaWduIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/subproviders/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/subproviders/filters.js":
/*!*******************************************************************!*\
  !*** ./node_modules/web3-provider-engine/subproviders/filters.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ProviderSubprovider = __webpack_require__(/*! ./json-rpc-engine-middleware */ \"(ssr)/./node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js\");\nconst createFilterMiddleware = __webpack_require__(/*! eth-json-rpc-filters */ \"(ssr)/./node_modules/eth-json-rpc-filters/index.js\");\nclass SubscriptionsSubprovider extends ProviderSubprovider {\n    constructor(){\n        super(({ blockTracker, provider, engine })=>{\n            return createFilterMiddleware({\n                blockTracker,\n                provider\n            });\n        });\n    }\n}\nmodule.exports = SubscriptionsSubprovider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2ZpbHRlcnMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLHNCQUFzQkMsbUJBQU9BLENBQUM7QUFDcEMsTUFBTUMseUJBQXlCRCxtQkFBT0EsQ0FBQztBQUV2QyxNQUFNRSxpQ0FBaUNIO0lBQ3JDSSxhQUFjO1FBQ1osS0FBSyxDQUFDLENBQUMsRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRTtZQUN2QyxPQUFPTCx1QkFBdUI7Z0JBQUVHO2dCQUFjQztZQUFTO1FBQ3pEO0lBQ0Y7QUFDRjtBQUVBRSxPQUFPQyxPQUFPLEdBQUdOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2ZpbHRlcnMuanM/NzMyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQcm92aWRlclN1YnByb3ZpZGVyID0gcmVxdWlyZSgnLi9qc29uLXJwYy1lbmdpbmUtbWlkZGxld2FyZScpXG5jb25zdCBjcmVhdGVGaWx0ZXJNaWRkbGV3YXJlID0gcmVxdWlyZSgnZXRoLWpzb24tcnBjLWZpbHRlcnMnKVxuXG5jbGFzcyBTdWJzY3JpcHRpb25zU3VicHJvdmlkZXIgZXh0ZW5kcyBQcm92aWRlclN1YnByb3ZpZGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKHsgYmxvY2tUcmFja2VyLCBwcm92aWRlciwgZW5naW5lIH0pID0+IHtcbiAgICAgIHJldHVybiBjcmVhdGVGaWx0ZXJNaWRkbGV3YXJlKHsgYmxvY2tUcmFja2VyLCBwcm92aWRlciB9KVxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTdWJzY3JpcHRpb25zU3VicHJvdmlkZXJcbiJdLCJuYW1lcyI6WyJQcm92aWRlclN1YnByb3ZpZGVyIiwicmVxdWlyZSIsImNyZWF0ZUZpbHRlck1pZGRsZXdhcmUiLCJTdWJzY3JpcHRpb25zU3VicHJvdmlkZXIiLCJjb25zdHJ1Y3RvciIsImJsb2NrVHJhY2tlciIsInByb3ZpZGVyIiwiZW5naW5lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/subproviders/filters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/subproviders/fixture.js":
/*!*******************************************************************!*\
  !*** ./node_modules/web3-provider-engine/subproviders/fixture.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nconst Subprovider = __webpack_require__(/*! ./subprovider.js */ \"(ssr)/./node_modules/web3-provider-engine/subproviders/subprovider.js\");\nmodule.exports = FixtureProvider;\ninherits(FixtureProvider, Subprovider);\nfunction FixtureProvider(staticResponses) {\n    const self = this;\n    staticResponses = staticResponses || {};\n    self.staticResponses = staticResponses;\n}\nFixtureProvider.prototype.handleRequest = function(payload, next, end) {\n    const self = this;\n    var staticResponse = self.staticResponses[payload.method];\n    // async function\n    if (\"function\" === typeof staticResponse) {\n        staticResponse(payload, next, end);\n    // static response - null is valid response\n    } else if (staticResponse !== undefined) {\n        // return result asynchronously\n        setTimeout(()=>end(null, staticResponse));\n    // no prepared response - skip\n    } else {\n        next();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2ZpeHR1cmUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFdBQVdDLGtEQUF3QjtBQUN6QyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUU1QkUsT0FBT0MsT0FBTyxHQUFHQztBQUVqQkwsU0FBU0ssaUJBQWlCSDtBQUUxQixTQUFTRyxnQkFBZ0JDLGVBQWU7SUFDdEMsTUFBTUMsT0FBTyxJQUFJO0lBQ2pCRCxrQkFBa0JBLG1CQUFtQixDQUFDO0lBQ3RDQyxLQUFLRCxlQUFlLEdBQUdBO0FBQ3pCO0FBRUFELGdCQUFnQkcsU0FBUyxDQUFDQyxhQUFhLEdBQUcsU0FBU0MsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLEdBQUc7SUFDbkUsTUFBTUwsT0FBTyxJQUFJO0lBQ2pCLElBQUlNLGlCQUFpQk4sS0FBS0QsZUFBZSxDQUFDSSxRQUFRSSxNQUFNLENBQUM7SUFDekQsaUJBQWlCO0lBQ2pCLElBQUksZUFBZSxPQUFPRCxnQkFBZ0I7UUFDeENBLGVBQWVILFNBQVNDLE1BQU1DO0lBQ2hDLDJDQUEyQztJQUMzQyxPQUFPLElBQUlDLG1CQUFtQkUsV0FBVztRQUN2QywrQkFBK0I7UUFDL0JDLFdBQVcsSUFBTUosSUFBSSxNQUFNQztJQUM3Qiw4QkFBOEI7SUFDOUIsT0FBTztRQUNMRjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvZml4dHVyZS5qcz9iYTczIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzXG5jb25zdCBTdWJwcm92aWRlciA9IHJlcXVpcmUoJy4vc3VicHJvdmlkZXIuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpeHR1cmVQcm92aWRlclxuXG5pbmhlcml0cyhGaXh0dXJlUHJvdmlkZXIsIFN1YnByb3ZpZGVyKVxuXG5mdW5jdGlvbiBGaXh0dXJlUHJvdmlkZXIoc3RhdGljUmVzcG9uc2VzKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgc3RhdGljUmVzcG9uc2VzID0gc3RhdGljUmVzcG9uc2VzIHx8IHt9XG4gIHNlbGYuc3RhdGljUmVzcG9uc2VzID0gc3RhdGljUmVzcG9uc2VzXG59XG5cbkZpeHR1cmVQcm92aWRlci5wcm90b3R5cGUuaGFuZGxlUmVxdWVzdCA9IGZ1bmN0aW9uKHBheWxvYWQsIG5leHQsIGVuZCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHZhciBzdGF0aWNSZXNwb25zZSA9IHNlbGYuc3RhdGljUmVzcG9uc2VzW3BheWxvYWQubWV0aG9kXVxuICAvLyBhc3luYyBmdW5jdGlvblxuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHN0YXRpY1Jlc3BvbnNlKSB7XG4gICAgc3RhdGljUmVzcG9uc2UocGF5bG9hZCwgbmV4dCwgZW5kKVxuICAvLyBzdGF0aWMgcmVzcG9uc2UgLSBudWxsIGlzIHZhbGlkIHJlc3BvbnNlXG4gIH0gZWxzZSBpZiAoc3RhdGljUmVzcG9uc2UgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIHJldHVybiByZXN1bHQgYXN5bmNocm9ub3VzbHlcbiAgICBzZXRUaW1lb3V0KCgpID0+IGVuZChudWxsLCBzdGF0aWNSZXNwb25zZSkpXG4gIC8vIG5vIHByZXBhcmVkIHJlc3BvbnNlIC0gc2tpcFxuICB9IGVsc2Uge1xuICAgIG5leHQoKVxuICB9XG59XG4iXSwibmFtZXMiOlsiaW5oZXJpdHMiLCJyZXF1aXJlIiwiU3VicHJvdmlkZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiRml4dHVyZVByb3ZpZGVyIiwic3RhdGljUmVzcG9uc2VzIiwic2VsZiIsInByb3RvdHlwZSIsImhhbmRsZVJlcXVlc3QiLCJwYXlsb2FkIiwibmV4dCIsImVuZCIsInN0YXRpY1Jlc3BvbnNlIiwibWV0aG9kIiwidW5kZWZpbmVkIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/subproviders/fixture.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/subproviders/hooked-wallet.js":
/*!*************************************************************************!*\
  !*** ./node_modules/web3-provider-engine/subproviders/hooked-wallet.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Emulate 'eth_accounts' / 'eth_sendTransaction' using 'eth_sendRawTransaction'\n *\n * The two callbacks a user needs to implement are:\n * - getAccounts() -- array of addresses supported\n * - signTransaction(tx) -- sign a raw transaction object\n */ \nconst waterfall = __webpack_require__(/*! async/waterfall */ \"(ssr)/./node_modules/async/waterfall.js\");\nconst parallel = __webpack_require__(/*! async/parallel */ \"(ssr)/./node_modules/async/parallel.js\");\nconst inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nconst ethUtil = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-util/dist/index.js\");\nconst sigUtil = __webpack_require__(/*! eth-sig-util */ \"(ssr)/./node_modules/eth-sig-util/index.js\");\nconst extend = __webpack_require__(/*! xtend */ \"(ssr)/./node_modules/xtend/immutable.js\");\nconst Semaphore = __webpack_require__(/*! semaphore */ \"(ssr)/./node_modules/semaphore/lib/semaphore.js\");\nconst Subprovider = __webpack_require__(/*! ./subprovider.js */ \"(ssr)/./node_modules/web3-provider-engine/subproviders/subprovider.js\");\nconst estimateGas = __webpack_require__(/*! ../util/estimate-gas.js */ \"(ssr)/./node_modules/web3-provider-engine/util/estimate-gas.js\");\nconst hexRegex = /^[0-9A-Fa-f]+$/g;\nmodule.exports = HookedWalletSubprovider;\n// handles the following RPC methods:\n//   eth_coinbase\n//   eth_accounts\n//   eth_sendTransaction\n//   eth_sign\n//   eth_signTypedData\n//   eth_signTypedData_v3\n//   eth_signTypedData_v4\n//   personal_sign\n//   eth_decryptMessage\n//   encryption_public_key\n//   personal_ecRecover\n//   parity_postTransaction\n//   parity_checkRequest\n//   parity_defaultAccount\n//\n// Tx Signature Flow\n//\n// handleRequest: eth_sendTransaction\n//   validateTransaction (basic validity check)\n//     validateSender (checks that sender is in accounts)\n//   processTransaction (sign tx and submit to network)\n//     approveTransaction (UI approval hook)\n//     checkApproval\n//     finalizeAndSubmitTx (tx signing)\n//       nonceLock.take (bottle neck to ensure atomic nonce)\n//         fillInTxExtras (set fallback gasPrice, nonce, etc)\n//         signTransaction (perform the signature)\n//         publishTransaction (publish signed tx to network)\n//\ninherits(HookedWalletSubprovider, Subprovider);\nfunction HookedWalletSubprovider(opts) {\n    const self = this;\n    // control flow\n    self.nonceLock = Semaphore(1);\n    // data lookup\n    if (opts.getAccounts) self.getAccounts = opts.getAccounts;\n    // high level override\n    if (opts.processTransaction) self.processTransaction = opts.processTransaction;\n    if (opts.processMessage) self.processMessage = opts.processMessage;\n    if (opts.processPersonalMessage) self.processPersonalMessage = opts.processPersonalMessage;\n    if (opts.processTypedMessage) self.processTypedMessage = opts.processTypedMessage;\n    // approval hooks\n    self.approveTransaction = opts.approveTransaction || self.autoApprove;\n    self.approveMessage = opts.approveMessage || self.autoApprove;\n    self.approvePersonalMessage = opts.approvePersonalMessage || self.autoApprove;\n    self.approveDecryptMessage = opts.approveDecryptMessage || self.autoApprove;\n    self.approveEncryptionPublicKey = opts.approveEncryptionPublicKey || self.autoApprove;\n    self.approveTypedMessage = opts.approveTypedMessage || self.autoApprove;\n    // actually perform the signature\n    if (opts.signTransaction) self.signTransaction = opts.signTransaction || mustProvideInConstructor(\"signTransaction\");\n    if (opts.signMessage) self.signMessage = opts.signMessage || mustProvideInConstructor(\"signMessage\");\n    if (opts.signPersonalMessage) self.signPersonalMessage = opts.signPersonalMessage || mustProvideInConstructor(\"signPersonalMessage\");\n    if (opts.decryptMessage) self.decryptMessage = opts.decryptMessage || mustProvideInConstructor(\"decryptMessage\");\n    if (opts.encryptionPublicKey) self.encryptionPublicKey = opts.encryptionPublicKey || mustProvideInConstructor(\"encryptionPublicKey\");\n    if (opts.signTypedMessage) self.signTypedMessage = opts.signTypedMessage || mustProvideInConstructor(\"signTypedMessage\");\n    if (opts.recoverPersonalSignature) self.recoverPersonalSignature = opts.recoverPersonalSignature;\n    // publish to network\n    if (opts.publishTransaction) self.publishTransaction = opts.publishTransaction;\n    // gas options\n    self.estimateGas = opts.estimateGas || self.estimateGas;\n    self.getGasPrice = opts.getGasPrice || self.getGasPrice;\n}\nHookedWalletSubprovider.prototype.handleRequest = function(payload, next, end) {\n    const self = this;\n    self._parityRequests = {};\n    self._parityRequestCount = 0;\n    // switch statement is not block scoped\n    // sp we cant repeat var declarations\n    let txParams, msgParams, extraParams;\n    let message, address;\n    switch(payload.method){\n        case \"eth_coinbase\":\n            // process normally\n            self.getAccounts(function(err, accounts) {\n                if (err) return end(err);\n                let result = accounts[0] || null;\n                end(null, result);\n            });\n            return;\n        case \"eth_accounts\":\n            // process normally\n            self.getAccounts(function(err, accounts) {\n                if (err) return end(err);\n                end(null, accounts);\n            });\n            return;\n        case \"eth_sendTransaction\":\n            txParams = payload.params[0];\n            waterfall([\n                (cb)=>self.validateTransaction(txParams, cb),\n                (cb)=>self.processTransaction(txParams, cb)\n            ], end);\n            return;\n        case \"eth_signTransaction\":\n            txParams = payload.params[0];\n            waterfall([\n                (cb)=>self.validateTransaction(txParams, cb),\n                (cb)=>self.processSignTransaction(txParams, cb)\n            ], end);\n            return;\n        case \"eth_sign\":\n            // process normally\n            address = payload.params[0];\n            message = payload.params[1];\n            // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n            // good place for metadata\n            extraParams = payload.params[2] || {};\n            msgParams = extend(extraParams, {\n                from: address,\n                data: message\n            });\n            waterfall([\n                (cb)=>self.validateMessage(msgParams, cb),\n                (cb)=>self.processMessage(msgParams, cb)\n            ], end);\n            return;\n        case \"personal_sign\":\n            return function() {\n                // process normally\n                const first = payload.params[0];\n                const second = payload.params[1];\n                // We initially incorrectly ordered these parameters.\n                // To gracefully respect users who adopted this API early,\n                // we are currently gracefully recovering from the wrong param order\n                // when it is clearly identifiable.\n                //\n                // That means when the first param is definitely an address,\n                // and the second param is definitely not, but is hex.\n                if (resemblesData(second) && resemblesAddress(first)) {\n                    let warning = `The eth_personalSign method requires params ordered `;\n                    warning += `[message, address]. This was previously handled incorrectly, `;\n                    warning += `and has been corrected automatically. `;\n                    warning += `Please switch this param order for smooth behavior in the future.`;\n                    console.warn(warning);\n                    address = payload.params[0];\n                    message = payload.params[1];\n                } else {\n                    message = payload.params[0];\n                    address = payload.params[1];\n                }\n                // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n                // good place for metadata\n                extraParams = payload.params[2] || {};\n                msgParams = extend(extraParams, {\n                    from: address,\n                    data: message\n                });\n                waterfall([\n                    (cb)=>self.validatePersonalMessage(msgParams, cb),\n                    (cb)=>self.processPersonalMessage(msgParams, cb)\n                ], end);\n            }();\n        case \"eth_decryptMessage\":\n            return function() {\n                // process normally\n                const first = payload.params[0];\n                const second = payload.params[1];\n                // We initially incorrectly ordered these parameters.\n                // To gracefully respect users who adopted this API early,\n                // we are currently gracefully recovering from the wrong param order\n                // when it is clearly identifiable.\n                //\n                // That means when the first param is definitely an address,\n                // and the second param is definitely not, but is hex.\n                if (resemblesData(second) && resemblesAddress(first)) {\n                    let warning = `The eth_decryptMessage method requires params ordered `;\n                    warning += `[message, address]. This was previously handled incorrectly, `;\n                    warning += `and has been corrected automatically. `;\n                    warning += `Please switch this param order for smooth behavior in the future.`;\n                    console.warn(warning);\n                    address = payload.params[0];\n                    message = payload.params[1];\n                } else {\n                    message = payload.params[0];\n                    address = payload.params[1];\n                }\n                // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n                // good place for metadata\n                extraParams = payload.params[2] || {};\n                msgParams = extend(extraParams, {\n                    from: address,\n                    data: message\n                });\n                waterfall([\n                    (cb)=>self.validateDecryptMessage(msgParams, cb),\n                    (cb)=>self.processDecryptMessage(msgParams, cb)\n                ], end);\n            }();\n        case \"encryption_public_key\":\n            return function() {\n                const address = payload.params[0];\n                waterfall([\n                    (cb)=>self.validateEncryptionPublicKey(address, cb),\n                    (cb)=>self.processEncryptionPublicKey(address, cb)\n                ], end);\n            }();\n        case \"personal_ecRecover\":\n            return function() {\n                message = payload.params[0];\n                let signature = payload.params[1];\n                // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n                // good place for metadata\n                extraParams = payload.params[2] || {};\n                msgParams = extend(extraParams, {\n                    sig: signature,\n                    data: message\n                });\n                self.recoverPersonalSignature(msgParams, end);\n            }();\n        case \"eth_signTypedData\":\n        case \"eth_signTypedData_v3\":\n        case \"eth_signTypedData_v4\":\n            return function() {\n                // process normally\n                const first = payload.params[0];\n                const second = payload.params[1];\n                if (resemblesAddress(first)) {\n                    address = first;\n                    message = second;\n                } else {\n                    message = first;\n                    address = second;\n                }\n                extraParams = payload.params[2] || {};\n                msgParams = extend(extraParams, {\n                    from: address,\n                    data: message\n                });\n                waterfall([\n                    (cb)=>self.validateTypedMessage(msgParams, cb),\n                    (cb)=>self.processTypedMessage(msgParams, cb)\n                ], end);\n            }();\n        case \"parity_postTransaction\":\n            txParams = payload.params[0];\n            self.parityPostTransaction(txParams, end);\n            return;\n        case \"parity_postSign\":\n            address = payload.params[0];\n            message = payload.params[1];\n            self.parityPostSign(address, message, end);\n            return;\n        case \"parity_checkRequest\":\n            return function() {\n                const requestId = payload.params[0];\n                self.parityCheckRequest(requestId, end);\n            }();\n        case \"parity_defaultAccount\":\n            self.getAccounts(function(err, accounts) {\n                if (err) return end(err);\n                const account = accounts[0] || null;\n                end(null, account);\n            });\n            return;\n        default:\n            next();\n            return;\n    }\n};\n//\n// data lookup\n//\nHookedWalletSubprovider.prototype.getAccounts = function(cb) {\n    cb(null, []);\n};\n//\n// \"process\" high level flow\n//\nHookedWalletSubprovider.prototype.processTransaction = function(txParams, cb) {\n    const self = this;\n    waterfall([\n        (cb)=>self.approveTransaction(txParams, cb),\n        (didApprove, cb)=>self.checkApproval(\"transaction\", didApprove, cb),\n        (cb)=>self.finalizeAndSubmitTx(txParams, cb)\n    ], cb);\n};\nHookedWalletSubprovider.prototype.processSignTransaction = function(txParams, cb) {\n    const self = this;\n    waterfall([\n        (cb)=>self.approveTransaction(txParams, cb),\n        (didApprove, cb)=>self.checkApproval(\"transaction\", didApprove, cb),\n        (cb)=>self.finalizeTx(txParams, cb)\n    ], cb);\n};\nHookedWalletSubprovider.prototype.processMessage = function(msgParams, cb) {\n    const self = this;\n    waterfall([\n        (cb)=>self.approveMessage(msgParams, cb),\n        (didApprove, cb)=>self.checkApproval(\"message\", didApprove, cb),\n        (cb)=>self.signMessage(msgParams, cb)\n    ], cb);\n};\nHookedWalletSubprovider.prototype.processPersonalMessage = function(msgParams, cb) {\n    const self = this;\n    waterfall([\n        (cb)=>self.approvePersonalMessage(msgParams, cb),\n        (didApprove, cb)=>self.checkApproval(\"message\", didApprove, cb),\n        (cb)=>self.signPersonalMessage(msgParams, cb)\n    ], cb);\n};\nHookedWalletSubprovider.prototype.processDecryptMessage = function(msgParams, cb) {\n    const self = this;\n    waterfall([\n        (cb)=>self.approveDecryptMessage(msgParams, cb),\n        (didApprove, cb)=>self.checkApproval(\"decryptMessage\", didApprove, cb),\n        (cb)=>self.decryptMessage(msgParams, cb)\n    ], cb);\n};\nHookedWalletSubprovider.prototype.processEncryptionPublicKey = function(msgParams, cb) {\n    const self = this;\n    waterfall([\n        (cb)=>self.approveEncryptionPublicKey(msgParams, cb),\n        (didApprove, cb)=>self.checkApproval(\"encryptionPublicKey\", didApprove, cb),\n        (cb)=>self.encryptionPublicKey(msgParams, cb)\n    ], cb);\n};\nHookedWalletSubprovider.prototype.processTypedMessage = function(msgParams, cb) {\n    const self = this;\n    waterfall([\n        (cb)=>self.approveTypedMessage(msgParams, cb),\n        (didApprove, cb)=>self.checkApproval(\"message\", didApprove, cb),\n        (cb)=>self.signTypedMessage(msgParams, cb)\n    ], cb);\n};\n//\n// approval\n//\nHookedWalletSubprovider.prototype.autoApprove = function(txParams, cb) {\n    cb(null, true);\n};\nHookedWalletSubprovider.prototype.checkApproval = function(type, didApprove, cb) {\n    cb(didApprove ? null : new Error(\"User denied \" + type + \" signature.\"));\n};\n//\n// parity\n//\nHookedWalletSubprovider.prototype.parityPostTransaction = function(txParams, cb) {\n    const self = this;\n    // get next id\n    const count = self._parityRequestCount;\n    const reqId = `0x${count.toString(16)}`;\n    self._parityRequestCount++;\n    self.emitPayload({\n        method: \"eth_sendTransaction\",\n        params: [\n            txParams\n        ]\n    }, function(error, res) {\n        if (error) {\n            self._parityRequests[reqId] = {\n                error\n            };\n            return;\n        }\n        const txHash = res.result;\n        self._parityRequests[reqId] = txHash;\n    });\n    cb(null, reqId);\n};\nHookedWalletSubprovider.prototype.parityPostSign = function(address, message, cb) {\n    const self = this;\n    // get next id\n    const count = self._parityRequestCount;\n    const reqId = `0x${count.toString(16)}`;\n    self._parityRequestCount++;\n    self.emitPayload({\n        method: \"eth_sign\",\n        params: [\n            address,\n            message\n        ]\n    }, function(error, res) {\n        if (error) {\n            self._parityRequests[reqId] = {\n                error\n            };\n            return;\n        }\n        const result = res.result;\n        self._parityRequests[reqId] = result;\n    });\n    cb(null, reqId);\n};\nHookedWalletSubprovider.prototype.parityCheckRequest = function(reqId, cb) {\n    const self = this;\n    const result = self._parityRequests[reqId] || null;\n    // tx not handled yet\n    if (!result) return cb(null, null);\n    // tx was rejected (or other error)\n    if (result.error) return cb(result.error);\n    // tx sent\n    cb(null, result);\n};\n//\n// signature and recovery\n//\nHookedWalletSubprovider.prototype.recoverPersonalSignature = function(msgParams, cb) {\n    let senderHex;\n    try {\n        senderHex = sigUtil.recoverPersonalSignature(msgParams);\n    } catch (err) {\n        return cb(err);\n    }\n    cb(null, senderHex);\n};\n//\n// validation\n//\nHookedWalletSubprovider.prototype.validateTransaction = function(txParams, cb) {\n    const self = this;\n    // shortcut: undefined sender is invalid\n    if (txParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign transaction.`));\n    self.validateSender(txParams.from, function(err, senderIsValid) {\n        if (err) return cb(err);\n        if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign transaction for this address: \"${txParams.from}\"`));\n        cb();\n    });\n};\nHookedWalletSubprovider.prototype.validateMessage = function(msgParams, cb) {\n    const self = this;\n    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign message.`));\n    self.validateSender(msgParams.from, function(err, senderIsValid) {\n        if (err) return cb(err);\n        if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: \"${msgParams.from}\"`));\n        cb();\n    });\n};\nHookedWalletSubprovider.prototype.validatePersonalMessage = function(msgParams, cb) {\n    const self = this;\n    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign personal message.`));\n    if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to sign personal message.`));\n    if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`));\n    self.validateSender(msgParams.from, function(err, senderIsValid) {\n        if (err) return cb(err);\n        if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: \"${msgParams.from}\"`));\n        cb();\n    });\n};\nHookedWalletSubprovider.prototype.validateDecryptMessage = function(msgParams, cb) {\n    const self = this;\n    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to decrypt message.`));\n    if (msgParams.data === undefined) return cb(new Error(`Undefined message - message required to decrypt message.`));\n    if (!isValidHex(msgParams.data)) return cb(new Error(`HookedWalletSubprovider - validateDecryptMessage - message was not encoded as hex.`));\n    self.validateSender(msgParams.from, function(err, senderIsValid) {\n        if (err) return cb(err);\n        if (!senderIsValid) return cb(new Error(`Unknown address - unable to decrypt message for this address: \"${msgParams.from}\"`));\n        cb();\n    });\n};\nHookedWalletSubprovider.prototype.validateEncryptionPublicKey = function(address, cb) {\n    const self = this;\n    self.validateSender(address, function(err, senderIsValid) {\n        if (err) return cb(err);\n        if (!senderIsValid) return cb(new Error(`Unknown address - unable to obtain encryption public key for this address: \"${address}\"`));\n        cb();\n    });\n};\nHookedWalletSubprovider.prototype.validateTypedMessage = function(msgParams, cb) {\n    if (msgParams.from === undefined) return cb(new Error(`Undefined address - from address required to sign typed data.`));\n    if (msgParams.data === undefined) return cb(new Error(`Undefined data - message required to sign typed data.`));\n    this.validateSender(msgParams.from, function(err, senderIsValid) {\n        if (err) return cb(err);\n        if (!senderIsValid) return cb(new Error(`Unknown address - unable to sign message for this address: \"${msgParams.from}\"`));\n        cb();\n    });\n};\nHookedWalletSubprovider.prototype.validateSender = function(senderAddress, cb) {\n    const self = this;\n    // shortcut: undefined sender is invalid\n    if (!senderAddress) return cb(null, false);\n    self.getAccounts(function(err, accounts) {\n        if (err) return cb(err);\n        const senderIsValid = accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1;\n        cb(null, senderIsValid);\n    });\n};\n//\n// tx helpers\n//\nHookedWalletSubprovider.prototype.finalizeAndSubmitTx = function(txParams, cb) {\n    const self = this;\n    // can only allow one tx to pass through this flow at a time\n    // so we can atomically consume a nonce\n    self.nonceLock.take(function() {\n        waterfall([\n            self.fillInTxExtras.bind(self, txParams),\n            self.signTransaction.bind(self),\n            self.publishTransaction.bind(self)\n        ], function(err, txHash) {\n            self.nonceLock.leave();\n            if (err) return cb(err);\n            cb(null, txHash);\n        });\n    });\n};\nHookedWalletSubprovider.prototype.finalizeTx = function(txParams, cb) {\n    const self = this;\n    // can only allow one tx to pass through this flow at a time\n    // so we can atomically consume a nonce\n    self.nonceLock.take(function() {\n        waterfall([\n            self.fillInTxExtras.bind(self, txParams),\n            self.signTransaction.bind(self)\n        ], function(err, signedTx) {\n            self.nonceLock.leave();\n            if (err) return cb(err);\n            cb(null, {\n                raw: signedTx,\n                tx: txParams\n            });\n        });\n    });\n};\nHookedWalletSubprovider.prototype.publishTransaction = function(rawTx, cb) {\n    const self = this;\n    self.emitPayload({\n        method: \"eth_sendRawTransaction\",\n        params: [\n            rawTx\n        ]\n    }, function(err, res) {\n        if (err) return cb(err);\n        cb(null, res.result);\n    });\n};\nHookedWalletSubprovider.prototype.estimateGas = function(txParams, cb) {\n    const self = this;\n    estimateGas(self.engine, txParams, cb);\n};\nHookedWalletSubprovider.prototype.getGasPrice = function(cb) {\n    const self = this;\n    self.emitPayload({\n        method: \"eth_gasPrice\",\n        params: []\n    }, function(err, res) {\n        if (err) return cb(err);\n        cb(null, res.result);\n    });\n};\nHookedWalletSubprovider.prototype.fillInTxExtras = function(txParams, cb) {\n    const self = this;\n    const address = txParams.from;\n    // console.log('fillInTxExtras - address:', address)\n    const tasks = {};\n    if (txParams.gasPrice === undefined) {\n        // console.log(\"need to get gasprice\")\n        tasks.gasPrice = self.getGasPrice.bind(self);\n    }\n    if (txParams.nonce === undefined) {\n        // console.log(\"need to get nonce\")\n        tasks.nonce = self.emitPayload.bind(self, {\n            method: \"eth_getTransactionCount\",\n            params: [\n                address,\n                \"pending\"\n            ]\n        });\n    }\n    if (txParams.gas === undefined) {\n        // console.log(\"need to get gas\")\n        tasks.gas = self.estimateGas.bind(self, cloneTxParams(txParams));\n    }\n    parallel(tasks, function(err, taskResults) {\n        if (err) return cb(err);\n        const result = {};\n        if (taskResults.gasPrice) result.gasPrice = taskResults.gasPrice;\n        if (taskResults.nonce) result.nonce = taskResults.nonce.result;\n        if (taskResults.gas) result.gas = taskResults.gas;\n        cb(null, extend(txParams, result));\n    });\n};\n// util\n// we use this to clean any custom params from the txParams\nfunction cloneTxParams(txParams) {\n    return {\n        from: txParams.from,\n        to: txParams.to,\n        value: txParams.value,\n        data: txParams.data,\n        gas: txParams.gas,\n        gasPrice: txParams.gasPrice,\n        nonce: txParams.nonce\n    };\n}\nfunction toLowerCase(string) {\n    return string.toLowerCase();\n}\nfunction resemblesAddress(string) {\n    const fixed = ethUtil.addHexPrefix(string);\n    const isValid = ethUtil.isValidAddress(fixed);\n    return isValid;\n}\n// Returns true if resembles hex data\n// but definitely not a valid address.\nfunction resemblesData(string) {\n    const fixed = ethUtil.addHexPrefix(string);\n    const isValidAddress = ethUtil.isValidAddress(fixed);\n    return !isValidAddress && isValidHex(string);\n}\nfunction isValidHex(data) {\n    const isString = typeof data === \"string\";\n    if (!isString) return false;\n    const isHexPrefixed = data.slice(0, 2) === \"0x\";\n    if (!isHexPrefixed) return false;\n    const nonPrefixed = data.slice(2);\n    const isValid = nonPrefixed.match(hexRegex);\n    return isValid;\n}\nfunction mustProvideInConstructor(methodName) {\n    return function(params, cb) {\n        cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide \"' + methodName + '\" fn in constructor options'));\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/subproviders/hooked-wallet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst Subprovider = __webpack_require__(/*! ./subprovider.js */ \"(ssr)/./node_modules/web3-provider-engine/subproviders/subprovider.js\");\n// wraps a json-rpc-engine middleware in a subprovider interface\nclass JsonRpcEngineMiddlewareSubprovider extends Subprovider {\n    // take a constructorFn to call once we have a reference to the engine\n    constructor(constructorFn){\n        super();\n        if (!constructorFn) throw new Error(\"JsonRpcEngineMiddlewareSubprovider - no constructorFn specified\");\n        this._constructorFn = constructorFn;\n    }\n    // this is called once the subprovider has been added to the provider engine\n    setEngine(engine) {\n        if (this.middleware) throw new Error(\"JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice\");\n        const blockTracker = engine._blockTracker;\n        const middleware = this._constructorFn({\n            engine,\n            provider: engine,\n            blockTracker\n        });\n        if (!middleware) throw new Error(\"JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware\");\n        if (typeof middleware !== \"function\") throw new Error(\"JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function\");\n        this.middleware = middleware;\n    }\n    handleRequest(req, provEngNext, provEngEnd) {\n        const res = {\n            id: req.id\n        };\n        this.middleware(req, res, middlewareNext, middlewareEnd);\n        function middlewareNext(handler) {\n            provEngNext((err, result, cb)=>{\n                // update response object with result or error\n                if (err) {\n                    delete res.result;\n                    res.error = {\n                        message: err.message || err\n                    };\n                } else {\n                    res.result = result;\n                }\n                // call middleware's next handler (even if error)\n                if (handler) {\n                    handler(cb);\n                } else {\n                    cb();\n                }\n            });\n        }\n        function middlewareEnd(err) {\n            if (err) return provEngEnd(err);\n            provEngEnd(null, res.result);\n        }\n    }\n}\nmodule.exports = JsonRpcEngineMiddlewareSubprovider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL2pzb24tcnBjLWVuZ2luZS1taWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxjQUFjQyxtQkFBT0EsQ0FBQztBQUU1QixnRUFBZ0U7QUFFaEUsTUFBTUMsMkNBQTJDRjtJQUUvQyxzRUFBc0U7SUFDdEVHLFlBQWFDLGFBQWEsQ0FBRTtRQUMxQixLQUFLO1FBQ0wsSUFBSSxDQUFDQSxlQUFlLE1BQU0sSUFBSUMsTUFBTTtRQUNwQyxJQUFJLENBQUNDLGNBQWMsR0FBR0Y7SUFDeEI7SUFFQSw0RUFBNEU7SUFDNUVHLFVBQVdDLE1BQU0sRUFBRTtRQUNqQixJQUFJLElBQUksQ0FBQ0MsVUFBVSxFQUFFLE1BQU0sSUFBSUosTUFBTTtRQUNyQyxNQUFNSyxlQUFlRixPQUFPRyxhQUFhO1FBQ3pDLE1BQU1GLGFBQWEsSUFBSSxDQUFDSCxjQUFjLENBQUM7WUFBRUU7WUFBUUksVUFBVUo7WUFBUUU7UUFBYTtRQUNoRixJQUFJLENBQUNELFlBQVksTUFBTSxJQUFJSixNQUFNO1FBQ2pDLElBQUksT0FBT0ksZUFBZSxZQUFZLE1BQU0sSUFBSUosTUFBTTtRQUN0RCxJQUFJLENBQUNJLFVBQVUsR0FBR0E7SUFDcEI7SUFFQUksY0FBZUMsR0FBRyxFQUFFQyxXQUFXLEVBQUVDLFVBQVUsRUFBRTtRQUMzQyxNQUFNQyxNQUFNO1lBQUVDLElBQUlKLElBQUlJLEVBQUU7UUFBQztRQUN6QixJQUFJLENBQUNULFVBQVUsQ0FBQ0ssS0FBS0csS0FBS0UsZ0JBQWdCQztRQUUxQyxTQUFTRCxlQUFnQkUsT0FBTztZQUM5Qk4sWUFBWSxDQUFDTyxLQUFLQyxRQUFRQztnQkFDeEIsOENBQThDO2dCQUM5QyxJQUFJRixLQUFLO29CQUNQLE9BQU9MLElBQUlNLE1BQU07b0JBQ2pCTixJQUFJUSxLQUFLLEdBQUc7d0JBQUVDLFNBQVNKLElBQUlJLE9BQU8sSUFBSUo7b0JBQUk7Z0JBQzVDLE9BQU87b0JBQ0xMLElBQUlNLE1BQU0sR0FBR0E7Z0JBQ2Y7Z0JBQ0EsaURBQWlEO2dCQUNqRCxJQUFJRixTQUFTO29CQUNYQSxRQUFRRztnQkFDVixPQUFPO29CQUNMQTtnQkFDRjtZQUNGO1FBQ0Y7UUFFQSxTQUFTSixjQUFlRSxHQUFHO1lBQ3pCLElBQUlBLEtBQUssT0FBT04sV0FBV007WUFDM0JOLFdBQVcsTUFBTUMsSUFBSU0sTUFBTTtRQUM3QjtJQUNGO0FBRUY7QUFFQUksT0FBT0MsT0FBTyxHQUFHMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS9zdWJwcm92aWRlcnMvanNvbi1ycGMtZW5naW5lLW1pZGRsZXdhcmUuanM/MTBjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTdWJwcm92aWRlciA9IHJlcXVpcmUoJy4vc3VicHJvdmlkZXIuanMnKVxuXG4vLyB3cmFwcyBhIGpzb24tcnBjLWVuZ2luZSBtaWRkbGV3YXJlIGluIGEgc3VicHJvdmlkZXIgaW50ZXJmYWNlXG5cbmNsYXNzIEpzb25ScGNFbmdpbmVNaWRkbGV3YXJlU3VicHJvdmlkZXIgZXh0ZW5kcyBTdWJwcm92aWRlciB7XG5cbiAgLy8gdGFrZSBhIGNvbnN0cnVjdG9yRm4gdG8gY2FsbCBvbmNlIHdlIGhhdmUgYSByZWZlcmVuY2UgdG8gdGhlIGVuZ2luZVxuICBjb25zdHJ1Y3RvciAoY29uc3RydWN0b3JGbikge1xuICAgIHN1cGVyKClcbiAgICBpZiAoIWNvbnN0cnVjdG9yRm4pIHRocm93IG5ldyBFcnJvcignSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlciAtIG5vIGNvbnN0cnVjdG9yRm4gc3BlY2lmaWVkJylcbiAgICB0aGlzLl9jb25zdHJ1Y3RvckZuID0gY29uc3RydWN0b3JGblxuICB9XG5cbiAgLy8gdGhpcyBpcyBjYWxsZWQgb25jZSB0aGUgc3VicHJvdmlkZXIgaGFzIGJlZW4gYWRkZWQgdG8gdGhlIHByb3ZpZGVyIGVuZ2luZVxuICBzZXRFbmdpbmUgKGVuZ2luZSkge1xuICAgIGlmICh0aGlzLm1pZGRsZXdhcmUpIHRocm93IG5ldyBFcnJvcignSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlciAtIHN1YnByb3ZpZGVyIGFkZGVkIHRvIGVuZ2luZSB0d2ljZScpXG4gICAgY29uc3QgYmxvY2tUcmFja2VyID0gZW5naW5lLl9ibG9ja1RyYWNrZXJcbiAgICBjb25zdCBtaWRkbGV3YXJlID0gdGhpcy5fY29uc3RydWN0b3JGbih7IGVuZ2luZSwgcHJvdmlkZXI6IGVuZ2luZSwgYmxvY2tUcmFja2VyIH0pXG4gICAgaWYgKCFtaWRkbGV3YXJlKSB0aHJvdyBuZXcgRXJyb3IoJ0pzb25ScGNFbmdpbmVNaWRkbGV3YXJlU3VicHJvdmlkZXIgLSBfY29uc3RydWN0b3JGbiBkaWQgbm90IHJldHVybiBtaWRkbGV3YXJlJylcbiAgICBpZiAodHlwZW9mIG1pZGRsZXdhcmUgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBFcnJvcignSnNvblJwY0VuZ2luZU1pZGRsZXdhcmVTdWJwcm92aWRlciAtIHNwZWNpZmllZCBtaWRkbGV3YXJlIGlzIG5vdCBhIGZ1bmN0aW9uJylcbiAgICB0aGlzLm1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlXG4gIH1cblxuICBoYW5kbGVSZXF1ZXN0IChyZXEsIHByb3ZFbmdOZXh0LCBwcm92RW5nRW5kKSB7XG4gICAgY29uc3QgcmVzID0geyBpZDogcmVxLmlkIH1cbiAgICB0aGlzLm1pZGRsZXdhcmUocmVxLCByZXMsIG1pZGRsZXdhcmVOZXh0LCBtaWRkbGV3YXJlRW5kKVxuXG4gICAgZnVuY3Rpb24gbWlkZGxld2FyZU5leHQgKGhhbmRsZXIpIHtcbiAgICAgIHByb3ZFbmdOZXh0KChlcnIsIHJlc3VsdCwgY2IpID0+IHtcbiAgICAgICAgLy8gdXBkYXRlIHJlc3BvbnNlIG9iamVjdCB3aXRoIHJlc3VsdCBvciBlcnJvclxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVsZXRlIHJlcy5yZXN1bHRcbiAgICAgICAgICByZXMuZXJyb3IgPSB7IG1lc3NhZ2U6IGVyci5tZXNzYWdlIHx8IGVyciB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzLnJlc3VsdCA9IHJlc3VsdFxuICAgICAgICB9XG4gICAgICAgIC8vIGNhbGwgbWlkZGxld2FyZSdzIG5leHQgaGFuZGxlciAoZXZlbiBpZiBlcnJvcilcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBoYW5kbGVyKGNiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtaWRkbGV3YXJlRW5kIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBwcm92RW5nRW5kKGVycilcbiAgICAgIHByb3ZFbmdFbmQobnVsbCwgcmVzLnJlc3VsdClcbiAgICB9XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25ScGNFbmdpbmVNaWRkbGV3YXJlU3VicHJvdmlkZXJcbiJdLCJuYW1lcyI6WyJTdWJwcm92aWRlciIsInJlcXVpcmUiLCJKc29uUnBjRW5naW5lTWlkZGxld2FyZVN1YnByb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJjb25zdHJ1Y3RvckZuIiwiRXJyb3IiLCJfY29uc3RydWN0b3JGbiIsInNldEVuZ2luZSIsImVuZ2luZSIsIm1pZGRsZXdhcmUiLCJibG9ja1RyYWNrZXIiLCJfYmxvY2tUcmFja2VyIiwicHJvdmlkZXIiLCJoYW5kbGVSZXF1ZXN0IiwicmVxIiwicHJvdkVuZ05leHQiLCJwcm92RW5nRW5kIiwicmVzIiwiaWQiLCJtaWRkbGV3YXJlTmV4dCIsIm1pZGRsZXdhcmVFbmQiLCJoYW5kbGVyIiwiZXJyIiwicmVzdWx0IiwiY2IiLCJlcnJvciIsIm1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/subproviders/nonce-tracker.js":
/*!*************************************************************************!*\
  !*** ./node_modules/web3-provider-engine/subproviders/nonce-tracker.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nconst Transaction = __webpack_require__(/*! ethereumjs-tx */ \"(ssr)/./node_modules/ethereumjs-tx/es5/index.js\");\nconst ethUtil = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-util/dist/index.js\");\nconst Subprovider = __webpack_require__(/*! ./subprovider.js */ \"(ssr)/./node_modules/web3-provider-engine/subproviders/subprovider.js\");\nconst blockTagForPayload = (__webpack_require__(/*! ../util/rpc-cache-utils */ \"(ssr)/./node_modules/web3-provider-engine/util/rpc-cache-utils.js\").blockTagForPayload);\nmodule.exports = NonceTrackerSubprovider;\n// handles the following RPC methods:\n//   eth_getTransactionCount (pending only)\n//\n// observes the following RPC methods:\n//   eth_sendRawTransaction\n//   evm_revert (to clear the nonce cache)\ninherits(NonceTrackerSubprovider, Subprovider);\nfunction NonceTrackerSubprovider(opts) {\n    const self = this;\n    self.nonceCache = {};\n}\nNonceTrackerSubprovider.prototype.handleRequest = function(payload, next, end) {\n    const self = this;\n    switch(payload.method){\n        case \"eth_getTransactionCount\":\n            var blockTag = blockTagForPayload(payload);\n            var address = payload.params[0].toLowerCase();\n            var cachedResult = self.nonceCache[address];\n            // only handle requests against the 'pending' blockTag\n            if (blockTag === \"pending\") {\n                // has a result\n                if (cachedResult) {\n                    end(null, cachedResult);\n                // fallthrough then populate cache\n                } else {\n                    next(function(err, result, cb) {\n                        if (err) return cb();\n                        if (self.nonceCache[address] === undefined) {\n                            self.nonceCache[address] = result;\n                        }\n                        cb();\n                    });\n                }\n            } else {\n                next();\n            }\n            return;\n        case \"eth_sendRawTransaction\":\n            // allow the request to continue normally\n            next(function(err, result, cb) {\n                // only update local nonce if tx was submitted correctly\n                if (err) return cb();\n                // parse raw tx\n                var rawTx = payload.params[0];\n                var stripped = ethUtil.stripHexPrefix(rawTx);\n                var rawData = Buffer.from(ethUtil.stripHexPrefix(rawTx), \"hex\");\n                var tx = new Transaction(Buffer.from(ethUtil.stripHexPrefix(rawTx), \"hex\"));\n                // extract address\n                var address = \"0x\" + tx.getSenderAddress().toString(\"hex\").toLowerCase();\n                // extract nonce and increment\n                var nonce = ethUtil.bufferToInt(tx.nonce);\n                nonce++;\n                // hexify and normalize\n                var hexNonce = nonce.toString(16);\n                if (hexNonce.length % 2) hexNonce = \"0\" + hexNonce;\n                hexNonce = \"0x\" + hexNonce;\n                // dont update our record on the nonce until the submit was successful\n                // update cache\n                self.nonceCache[address] = hexNonce;\n                cb();\n            });\n            return;\n        // Clear cache on a testrpc revert\n        case \"evm_revert\":\n            self.nonceCache = {};\n            next();\n            return;\n        default:\n            next();\n            return;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL25vbmNlLXRyYWNrZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLFdBQVdDLGtEQUF3QjtBQUN6QyxNQUFNQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUM1QixNQUFNRSxVQUFVRixtQkFBT0EsQ0FBQztBQUN4QixNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQztBQUM1QixNQUFNSSxxQkFBcUJKLDRJQUFxRDtBQUVoRkssT0FBT0MsT0FBTyxHQUFHQztBQUVqQixxQ0FBcUM7QUFDckMsMkNBQTJDO0FBQzNDLEVBQUU7QUFDRixzQ0FBc0M7QUFDdEMsMkJBQTJCO0FBQzNCLDBDQUEwQztBQUUxQ1IsU0FBU1EseUJBQXlCSjtBQUVsQyxTQUFTSSx3QkFBd0JDLElBQUk7SUFDbkMsTUFBTUMsT0FBTyxJQUFJO0lBRWpCQSxLQUFLQyxVQUFVLEdBQUcsQ0FBQztBQUNyQjtBQUVBSCx3QkFBd0JJLFNBQVMsQ0FBQ0MsYUFBYSxHQUFHLFNBQVNDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxHQUFHO0lBQzNFLE1BQU1OLE9BQU8sSUFBSTtJQUVqQixPQUFPSSxRQUFRRyxNQUFNO1FBRW5CLEtBQUs7WUFDSCxJQUFJQyxXQUFXYixtQkFBbUJTO1lBQ2xDLElBQUlLLFVBQVVMLFFBQVFNLE1BQU0sQ0FBQyxFQUFFLENBQUNDLFdBQVc7WUFDM0MsSUFBSUMsZUFBZVosS0FBS0MsVUFBVSxDQUFDUSxRQUFRO1lBQzNDLHNEQUFzRDtZQUN0RCxJQUFJRCxhQUFhLFdBQVc7Z0JBQzFCLGVBQWU7Z0JBQ2YsSUFBSUksY0FBYztvQkFDaEJOLElBQUksTUFBTU07Z0JBQ1osa0NBQWtDO2dCQUNsQyxPQUFPO29CQUNMUCxLQUFLLFNBQVNRLEdBQUcsRUFBRUMsTUFBTSxFQUFFQyxFQUFFO3dCQUMzQixJQUFJRixLQUFLLE9BQU9FO3dCQUNoQixJQUFJZixLQUFLQyxVQUFVLENBQUNRLFFBQVEsS0FBS08sV0FBVzs0QkFDMUNoQixLQUFLQyxVQUFVLENBQUNRLFFBQVEsR0FBR0s7d0JBQzdCO3dCQUNBQztvQkFDRjtnQkFDRjtZQUNGLE9BQU87Z0JBQ0xWO1lBQ0Y7WUFDQTtRQUVGLEtBQUs7WUFDSCx5Q0FBeUM7WUFDekNBLEtBQUssU0FBU1EsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLEVBQUU7Z0JBQzNCLHdEQUF3RDtnQkFDeEQsSUFBSUYsS0FBSyxPQUFPRTtnQkFDaEIsZUFBZTtnQkFDZixJQUFJRSxRQUFRYixRQUFRTSxNQUFNLENBQUMsRUFBRTtnQkFDN0IsSUFBSVEsV0FBV3pCLFFBQVEwQixjQUFjLENBQUNGO2dCQUN0QyxJQUFJRyxVQUFVQyxPQUFPQyxJQUFJLENBQUM3QixRQUFRMEIsY0FBYyxDQUFDRixRQUFRO2dCQUN6RCxJQUFJTSxLQUFLLElBQUkvQixZQUFZNkIsT0FBT0MsSUFBSSxDQUFDN0IsUUFBUTBCLGNBQWMsQ0FBQ0YsUUFBUTtnQkFDcEUsa0JBQWtCO2dCQUNsQixJQUFJUixVQUFVLE9BQUtjLEdBQUdDLGdCQUFnQixHQUFHQyxRQUFRLENBQUMsT0FBT2QsV0FBVztnQkFDcEUsOEJBQThCO2dCQUM5QixJQUFJZSxRQUFRakMsUUFBUWtDLFdBQVcsQ0FBQ0osR0FBR0csS0FBSztnQkFDeENBO2dCQUNBLHVCQUF1QjtnQkFDdkIsSUFBSUUsV0FBV0YsTUFBTUQsUUFBUSxDQUFDO2dCQUM5QixJQUFJRyxTQUFTQyxNQUFNLEdBQUMsR0FBR0QsV0FBVyxNQUFJQTtnQkFDdENBLFdBQVcsT0FBS0E7Z0JBQ2hCLHNFQUFzRTtnQkFDdEUsZUFBZTtnQkFDZjVCLEtBQUtDLFVBQVUsQ0FBQ1EsUUFBUSxHQUFHbUI7Z0JBQzNCYjtZQUNGO1lBQ0E7UUFFSCxrQ0FBa0M7UUFDbEMsS0FBSztZQUNGZixLQUFLQyxVQUFVLEdBQUcsQ0FBQztZQUNuQkk7WUFDQTtRQUVGO1lBQ0VBO1lBQ0E7SUFFSjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL25vbmNlLXRyYWNrZXIuanM/MGY1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0c1xuY29uc3QgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCdldGhlcmV1bWpzLXR4JylcbmNvbnN0IGV0aFV0aWwgPSByZXF1aXJlKCdldGhlcmV1bWpzLXV0aWwnKVxuY29uc3QgU3VicHJvdmlkZXIgPSByZXF1aXJlKCcuL3N1YnByb3ZpZGVyLmpzJylcbmNvbnN0IGJsb2NrVGFnRm9yUGF5bG9hZCA9IHJlcXVpcmUoJy4uL3V0aWwvcnBjLWNhY2hlLXV0aWxzJykuYmxvY2tUYWdGb3JQYXlsb2FkXG5cbm1vZHVsZS5leHBvcnRzID0gTm9uY2VUcmFja2VyU3VicHJvdmlkZXJcblxuLy8gaGFuZGxlcyB0aGUgZm9sbG93aW5nIFJQQyBtZXRob2RzOlxuLy8gICBldGhfZ2V0VHJhbnNhY3Rpb25Db3VudCAocGVuZGluZyBvbmx5KVxuLy9cbi8vIG9ic2VydmVzIHRoZSBmb2xsb3dpbmcgUlBDIG1ldGhvZHM6XG4vLyAgIGV0aF9zZW5kUmF3VHJhbnNhY3Rpb25cbi8vICAgZXZtX3JldmVydCAodG8gY2xlYXIgdGhlIG5vbmNlIGNhY2hlKVxuXG5pbmhlcml0cyhOb25jZVRyYWNrZXJTdWJwcm92aWRlciwgU3VicHJvdmlkZXIpXG5cbmZ1bmN0aW9uIE5vbmNlVHJhY2tlclN1YnByb3ZpZGVyKG9wdHMpe1xuICBjb25zdCBzZWxmID0gdGhpc1xuXG4gIHNlbGYubm9uY2VDYWNoZSA9IHt9XG59XG5cbk5vbmNlVHJhY2tlclN1YnByb3ZpZGVyLnByb3RvdHlwZS5oYW5kbGVSZXF1ZXN0ID0gZnVuY3Rpb24ocGF5bG9hZCwgbmV4dCwgZW5kKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcblxuICBzd2l0Y2gocGF5bG9hZC5tZXRob2QpIHtcblxuICAgIGNhc2UgJ2V0aF9nZXRUcmFuc2FjdGlvbkNvdW50JzpcbiAgICAgIHZhciBibG9ja1RhZyA9IGJsb2NrVGFnRm9yUGF5bG9hZChwYXlsb2FkKVxuICAgICAgdmFyIGFkZHJlc3MgPSBwYXlsb2FkLnBhcmFtc1swXS50b0xvd2VyQ2FzZSgpXG4gICAgICB2YXIgY2FjaGVkUmVzdWx0ID0gc2VsZi5ub25jZUNhY2hlW2FkZHJlc3NdXG4gICAgICAvLyBvbmx5IGhhbmRsZSByZXF1ZXN0cyBhZ2FpbnN0IHRoZSAncGVuZGluZycgYmxvY2tUYWdcbiAgICAgIGlmIChibG9ja1RhZyA9PT0gJ3BlbmRpbmcnKSB7XG4gICAgICAgIC8vIGhhcyBhIHJlc3VsdFxuICAgICAgICBpZiAoY2FjaGVkUmVzdWx0KSB7XG4gICAgICAgICAgZW5kKG51bGwsIGNhY2hlZFJlc3VsdClcbiAgICAgICAgLy8gZmFsbHRocm91Z2ggdGhlbiBwb3B1bGF0ZSBjYWNoZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQoZnVuY3Rpb24oZXJyLCByZXN1bHQsIGNiKXtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjYigpXG4gICAgICAgICAgICBpZiAoc2VsZi5ub25jZUNhY2hlW2FkZHJlc3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgc2VsZi5ub25jZUNhY2hlW2FkZHJlc3NdID0gcmVzdWx0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYigpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dCgpXG4gICAgICB9XG4gICAgICByZXR1cm5cblxuICAgIGNhc2UgJ2V0aF9zZW5kUmF3VHJhbnNhY3Rpb24nOlxuICAgICAgLy8gYWxsb3cgdGhlIHJlcXVlc3QgdG8gY29udGludWUgbm9ybWFsbHlcbiAgICAgIG5leHQoZnVuY3Rpb24oZXJyLCByZXN1bHQsIGNiKXtcbiAgICAgICAgLy8gb25seSB1cGRhdGUgbG9jYWwgbm9uY2UgaWYgdHggd2FzIHN1Ym1pdHRlZCBjb3JyZWN0bHlcbiAgICAgICAgaWYgKGVycikgcmV0dXJuIGNiKClcbiAgICAgICAgLy8gcGFyc2UgcmF3IHR4XG4gICAgICAgIHZhciByYXdUeCA9IHBheWxvYWQucGFyYW1zWzBdXG4gICAgICAgIHZhciBzdHJpcHBlZCA9IGV0aFV0aWwuc3RyaXBIZXhQcmVmaXgocmF3VHgpXG4gICAgICAgIHZhciByYXdEYXRhID0gQnVmZmVyLmZyb20oZXRoVXRpbC5zdHJpcEhleFByZWZpeChyYXdUeCksICdoZXgnKVxuICAgICAgICB2YXIgdHggPSBuZXcgVHJhbnNhY3Rpb24oQnVmZmVyLmZyb20oZXRoVXRpbC5zdHJpcEhleFByZWZpeChyYXdUeCksICdoZXgnKSlcbiAgICAgICAgLy8gZXh0cmFjdCBhZGRyZXNzXG4gICAgICAgIHZhciBhZGRyZXNzID0gJzB4Jyt0eC5nZXRTZW5kZXJBZGRyZXNzKCkudG9TdHJpbmcoJ2hleCcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgLy8gZXh0cmFjdCBub25jZSBhbmQgaW5jcmVtZW50XG4gICAgICAgIHZhciBub25jZSA9IGV0aFV0aWwuYnVmZmVyVG9JbnQodHgubm9uY2UpXG4gICAgICAgIG5vbmNlKytcbiAgICAgICAgLy8gaGV4aWZ5IGFuZCBub3JtYWxpemVcbiAgICAgICAgdmFyIGhleE5vbmNlID0gbm9uY2UudG9TdHJpbmcoMTYpXG4gICAgICAgIGlmIChoZXhOb25jZS5sZW5ndGglMikgaGV4Tm9uY2UgPSAnMCcraGV4Tm9uY2VcbiAgICAgICAgaGV4Tm9uY2UgPSAnMHgnK2hleE5vbmNlXG4gICAgICAgIC8vIGRvbnQgdXBkYXRlIG91ciByZWNvcmQgb24gdGhlIG5vbmNlIHVudGlsIHRoZSBzdWJtaXQgd2FzIHN1Y2Nlc3NmdWxcbiAgICAgICAgLy8gdXBkYXRlIGNhY2hlXG4gICAgICAgIHNlbGYubm9uY2VDYWNoZVthZGRyZXNzXSA9IGhleE5vbmNlXG4gICAgICAgIGNiKClcbiAgICAgIH0pXG4gICAgICByZXR1cm5cblxuICAgLy8gQ2xlYXIgY2FjaGUgb24gYSB0ZXN0cnBjIHJldmVydFxuICAgY2FzZSAnZXZtX3JldmVydCc6XG4gICAgICBzZWxmLm5vbmNlQ2FjaGUgPSB7fVxuICAgICAgbmV4dCgpXG4gICAgICByZXR1cm5cblxuICAgIGRlZmF1bHQ6XG4gICAgICBuZXh0KClcbiAgICAgIHJldHVyblxuXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJpbmhlcml0cyIsInJlcXVpcmUiLCJUcmFuc2FjdGlvbiIsImV0aFV0aWwiLCJTdWJwcm92aWRlciIsImJsb2NrVGFnRm9yUGF5bG9hZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJOb25jZVRyYWNrZXJTdWJwcm92aWRlciIsIm9wdHMiLCJzZWxmIiwibm9uY2VDYWNoZSIsInByb3RvdHlwZSIsImhhbmRsZVJlcXVlc3QiLCJwYXlsb2FkIiwibmV4dCIsImVuZCIsIm1ldGhvZCIsImJsb2NrVGFnIiwiYWRkcmVzcyIsInBhcmFtcyIsInRvTG93ZXJDYXNlIiwiY2FjaGVkUmVzdWx0IiwiZXJyIiwicmVzdWx0IiwiY2IiLCJ1bmRlZmluZWQiLCJyYXdUeCIsInN0cmlwcGVkIiwic3RyaXBIZXhQcmVmaXgiLCJyYXdEYXRhIiwiQnVmZmVyIiwiZnJvbSIsInR4IiwiZ2V0U2VuZGVyQWRkcmVzcyIsInRvU3RyaW5nIiwibm9uY2UiLCJidWZmZXJUb0ludCIsImhleE5vbmNlIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/subproviders/nonce-tracker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/subproviders/subprovider.js":
/*!***********************************************************************!*\
  !*** ./node_modules/web3-provider-engine/subproviders/subprovider.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst createPayload = __webpack_require__(/*! ../util/create-payload.js */ \"(ssr)/./node_modules/web3-provider-engine/util/create-payload.js\");\nmodule.exports = SubProvider;\n// this is the base class for a subprovider -- mostly helpers\nfunction SubProvider() {}\nSubProvider.prototype.setEngine = function(engine) {\n    const self = this;\n    if (self.engine) return;\n    self.engine = engine;\n    engine.on(\"block\", function(block) {\n        self.currentBlock = block;\n    });\n    engine.on(\"start\", function() {\n        self.start();\n    });\n    engine.on(\"stop\", function() {\n        self.stop();\n    });\n};\nSubProvider.prototype.handleRequest = function(payload, next, end) {\n    throw new Error(\"Subproviders should override `handleRequest`.\");\n};\nSubProvider.prototype.emitPayload = function(payload, cb) {\n    const self = this;\n    self.engine.sendAsync(createPayload(payload), cb);\n};\n// dummies for overriding\nSubProvider.prototype.stop = function() {};\nSubProvider.prototype.start = function() {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL3N1YnByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBRTlCQyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLDZEQUE2RDtBQUc3RCxTQUFTQSxlQUVUO0FBRUFBLFlBQVlDLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVNDLE1BQU07SUFDL0MsTUFBTUMsT0FBTyxJQUFJO0lBQ2pCLElBQUlBLEtBQUtELE1BQU0sRUFBRTtJQUNqQkMsS0FBS0QsTUFBTSxHQUFHQTtJQUNkQSxPQUFPRSxFQUFFLENBQUMsU0FBUyxTQUFTQyxLQUFLO1FBQy9CRixLQUFLRyxZQUFZLEdBQUdEO0lBQ3RCO0lBRUFILE9BQU9FLEVBQUUsQ0FBQyxTQUFTO1FBQ2pCRCxLQUFLSSxLQUFLO0lBQ1o7SUFFQUwsT0FBT0UsRUFBRSxDQUFDLFFBQVE7UUFDaEJELEtBQUtLLElBQUk7SUFDWDtBQUNGO0FBRUFULFlBQVlDLFNBQVMsQ0FBQ1MsYUFBYSxHQUFHLFNBQVNDLE9BQU8sRUFBRUMsSUFBSSxFQUFFQyxHQUFHO0lBQy9ELE1BQU0sSUFBSUMsTUFBTTtBQUNsQjtBQUVBZCxZQUFZQyxTQUFTLENBQUNjLFdBQVcsR0FBRyxTQUFTSixPQUFPLEVBQUVLLEVBQUU7SUFDdEQsTUFBTVosT0FBTyxJQUFJO0lBQ2pCQSxLQUFLRCxNQUFNLENBQUNjLFNBQVMsQ0FBQ3JCLGNBQWNlLFVBQVVLO0FBQ2hEO0FBRUEseUJBQXlCO0FBRXpCaEIsWUFBWUMsU0FBUyxDQUFDUSxJQUFJLEdBQUcsWUFBYTtBQUUxQ1QsWUFBWUMsU0FBUyxDQUFDTyxLQUFLLEdBQUcsWUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3N1YnByb3ZpZGVycy9zdWJwcm92aWRlci5qcz8yZTIyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyZWF0ZVBheWxvYWQgPSByZXF1aXJlKCcuLi91dGlsL2NyZWF0ZS1wYXlsb2FkLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBTdWJQcm92aWRlclxuXG4vLyB0aGlzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciBhIHN1YnByb3ZpZGVyIC0tIG1vc3RseSBoZWxwZXJzXG5cblxuZnVuY3Rpb24gU3ViUHJvdmlkZXIoKSB7XG5cbn1cblxuU3ViUHJvdmlkZXIucHJvdG90eXBlLnNldEVuZ2luZSA9IGZ1bmN0aW9uKGVuZ2luZSkge1xuICBjb25zdCBzZWxmID0gdGhpc1xuICBpZiAoc2VsZi5lbmdpbmUpIHJldHVyblxuICBzZWxmLmVuZ2luZSA9IGVuZ2luZVxuICBlbmdpbmUub24oJ2Jsb2NrJywgZnVuY3Rpb24oYmxvY2spIHtcbiAgICBzZWxmLmN1cnJlbnRCbG9jayA9IGJsb2NrXG4gIH0pXG5cbiAgZW5naW5lLm9uKCdzdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLnN0YXJ0KClcbiAgfSlcblxuICBlbmdpbmUub24oJ3N0b3AnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5zdG9wKClcbiAgfSlcbn1cblxuU3ViUHJvdmlkZXIucHJvdG90eXBlLmhhbmRsZVJlcXVlc3QgPSBmdW5jdGlvbihwYXlsb2FkLCBuZXh0LCBlbmQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdTdWJwcm92aWRlcnMgc2hvdWxkIG92ZXJyaWRlIGBoYW5kbGVSZXF1ZXN0YC4nKVxufVxuXG5TdWJQcm92aWRlci5wcm90b3R5cGUuZW1pdFBheWxvYWQgPSBmdW5jdGlvbihwYXlsb2FkLCBjYil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuZW5naW5lLnNlbmRBc3luYyhjcmVhdGVQYXlsb2FkKHBheWxvYWQpLCBjYilcbn1cblxuLy8gZHVtbWllcyBmb3Igb3ZlcnJpZGluZ1xuXG5TdWJQcm92aWRlci5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHt9XG5cblN1YlByb3ZpZGVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHt9XG4iXSwibmFtZXMiOlsiY3JlYXRlUGF5bG9hZCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiU3ViUHJvdmlkZXIiLCJwcm90b3R5cGUiLCJzZXRFbmdpbmUiLCJlbmdpbmUiLCJzZWxmIiwib24iLCJibG9jayIsImN1cnJlbnRCbG9jayIsInN0YXJ0Iiwic3RvcCIsImhhbmRsZVJlcXVlc3QiLCJwYXlsb2FkIiwibmV4dCIsImVuZCIsIkVycm9yIiwiZW1pdFBheWxvYWQiLCJjYiIsInNlbmRBc3luYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/subproviders/subprovider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/subproviders/subscriptions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/web3-provider-engine/subproviders/subscriptions.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ProviderSubprovider = __webpack_require__(/*! ./json-rpc-engine-middleware */ \"(ssr)/./node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js\");\nconst createSubscriptionManager = __webpack_require__(/*! eth-json-rpc-filters/subscriptionManager */ \"(ssr)/./node_modules/eth-json-rpc-filters/subscriptionManager.js\");\nclass SubscriptionsSubprovider extends ProviderSubprovider {\n    constructor(){\n        super(({ blockTracker, provider, engine })=>{\n            const { events, middleware } = createSubscriptionManager({\n                blockTracker,\n                provider\n            });\n            // forward subscription events on the engine\n            events.on(\"notification\", (data)=>engine.emit(\"data\", null, data));\n            // return the subscription install/remove middleware\n            return middleware;\n        });\n    }\n}\nmodule.exports = SubscriptionsSubprovider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL3N1YnNjcmlwdGlvbnMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLHNCQUFzQkMsbUJBQU9BLENBQUM7QUFDcEMsTUFBTUMsNEJBQTRCRCxtQkFBT0EsQ0FBQztBQUUxQyxNQUFNRSxpQ0FBaUNIO0lBQ3JDSSxhQUFjO1FBQ1osS0FBSyxDQUFDLENBQUMsRUFBRUMsWUFBWSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRTtZQUN2QyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFLEdBQUdQLDBCQUEwQjtnQkFBRUc7Z0JBQWNDO1lBQVM7WUFDbEYsNENBQTRDO1lBQzVDRSxPQUFPRSxFQUFFLENBQUMsZ0JBQWdCLENBQUNDLE9BQVNKLE9BQU9LLElBQUksQ0FBQyxRQUFRLE1BQU1EO1lBQzlELG9EQUFvRDtZQUNwRCxPQUFPRjtRQUNUO0lBQ0Y7QUFDRjtBQUVBSSxPQUFPQyxPQUFPLEdBQUdYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvc3VicHJvdmlkZXJzL3N1YnNjcmlwdGlvbnMuanM/MDM2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQcm92aWRlclN1YnByb3ZpZGVyID0gcmVxdWlyZSgnLi9qc29uLXJwYy1lbmdpbmUtbWlkZGxld2FyZScpXG5jb25zdCBjcmVhdGVTdWJzY3JpcHRpb25NYW5hZ2VyID0gcmVxdWlyZSgnZXRoLWpzb24tcnBjLWZpbHRlcnMvc3Vic2NyaXB0aW9uTWFuYWdlcicpXG5cbmNsYXNzIFN1YnNjcmlwdGlvbnNTdWJwcm92aWRlciBleHRlbmRzIFByb3ZpZGVyU3VicHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigoeyBibG9ja1RyYWNrZXIsIHByb3ZpZGVyLCBlbmdpbmUgfSkgPT4ge1xuICAgICAgY29uc3QgeyBldmVudHMsIG1pZGRsZXdhcmUgfSA9IGNyZWF0ZVN1YnNjcmlwdGlvbk1hbmFnZXIoeyBibG9ja1RyYWNrZXIsIHByb3ZpZGVyIH0pXG4gICAgICAvLyBmb3J3YXJkIHN1YnNjcmlwdGlvbiBldmVudHMgb24gdGhlIGVuZ2luZVxuICAgICAgZXZlbnRzLm9uKCdub3RpZmljYXRpb24nLCAoZGF0YSkgPT4gZW5naW5lLmVtaXQoJ2RhdGEnLCBudWxsLCBkYXRhKSlcbiAgICAgIC8vIHJldHVybiB0aGUgc3Vic2NyaXB0aW9uIGluc3RhbGwvcmVtb3ZlIG1pZGRsZXdhcmVcbiAgICAgIHJldHVybiBtaWRkbGV3YXJlXG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN1YnNjcmlwdGlvbnNTdWJwcm92aWRlclxuIl0sIm5hbWVzIjpbIlByb3ZpZGVyU3VicHJvdmlkZXIiLCJyZXF1aXJlIiwiY3JlYXRlU3Vic2NyaXB0aW9uTWFuYWdlciIsIlN1YnNjcmlwdGlvbnNTdWJwcm92aWRlciIsImNvbnN0cnVjdG9yIiwiYmxvY2tUcmFja2VyIiwicHJvdmlkZXIiLCJlbmdpbmUiLCJldmVudHMiLCJtaWRkbGV3YXJlIiwib24iLCJkYXRhIiwiZW1pdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/subproviders/subscriptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/util/create-payload.js":
/*!******************************************************************!*\
  !*** ./node_modules/web3-provider-engine/util/create-payload.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst getRandomId = __webpack_require__(/*! ./random-id.js */ \"(ssr)/./node_modules/web3-provider-engine/util/random-id.js\");\nconst extend = __webpack_require__(/*! xtend */ \"(ssr)/./node_modules/xtend/immutable.js\");\nmodule.exports = createPayload;\nfunction createPayload(data) {\n    return extend({\n        // defaults\n        id: getRandomId(),\n        jsonrpc: \"2.0\",\n        params: []\n    }, data);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9jcmVhdGUtcGF5bG9hZC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsY0FBY0MsbUJBQU9BLENBQUM7QUFDNUIsTUFBTUMsU0FBU0QsbUJBQU9BLENBQUM7QUFFdkJFLE9BQU9DLE9BQU8sR0FBR0M7QUFHakIsU0FBU0EsY0FBY0MsSUFBSTtJQUN6QixPQUFPSixPQUFPO1FBQ1osV0FBVztRQUNYSyxJQUFJUDtRQUNKUSxTQUFTO1FBQ1RDLFFBQVEsRUFBRTtJQUVaLEdBQUdIO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS91dGlsL2NyZWF0ZS1wYXlsb2FkLmpzPzRhMzUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2V0UmFuZG9tSWQgPSByZXF1aXJlKCcuL3JhbmRvbS1pZC5qcycpXG5jb25zdCBleHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUGF5bG9hZFxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVBheWxvYWQoZGF0YSl7XG4gIHJldHVybiBleHRlbmQoe1xuICAgIC8vIGRlZmF1bHRzXG4gICAgaWQ6IGdldFJhbmRvbUlkKCksXG4gICAganNvbnJwYzogJzIuMCcsXG4gICAgcGFyYW1zOiBbXSxcbiAgICAvLyB1c2VyLXNwZWNpZmllZFxuICB9LCBkYXRhKVxufVxuIl0sIm5hbWVzIjpbImdldFJhbmRvbUlkIiwicmVxdWlyZSIsImV4dGVuZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjcmVhdGVQYXlsb2FkIiwiZGF0YSIsImlkIiwianNvbnJwYyIsInBhcmFtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/util/create-payload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/util/estimate-gas.js":
/*!****************************************************************!*\
  !*** ./node_modules/web3-provider-engine/util/estimate-gas.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst createPayload = __webpack_require__(/*! ./create-payload.js */ \"(ssr)/./node_modules/web3-provider-engine/util/create-payload.js\");\nmodule.exports = estimateGas;\n/*\n\nThis is a work around for https://github.com/ethereum/go-ethereum/issues/2577\n\n*/ function estimateGas(provider, txParams, cb) {\n    provider.sendAsync(createPayload({\n        method: \"eth_estimateGas\",\n        params: [\n            txParams\n        ]\n    }), function(err, res) {\n        if (err) {\n            // handle simple value transfer case\n            if (err.message === \"no contract code at given address\") {\n                return cb(null, \"0xcf08\");\n            } else {\n                return cb(err);\n            }\n        }\n        cb(null, res.result);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9lc3RpbWF0ZS1nYXMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGdCQUFnQkMsbUJBQU9BLENBQUM7QUFFOUJDLE9BQU9DLE9BQU8sR0FBR0M7QUFFakI7Ozs7QUFJQSxHQUdBLFNBQVNBLFlBQVlDLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxFQUFFO0lBQ3pDRixTQUFTRyxTQUFTLENBQUNSLGNBQWM7UUFDL0JTLFFBQVE7UUFDUkMsUUFBUTtZQUFDSjtTQUFTO0lBQ3BCLElBQUksU0FBU0ssR0FBRyxFQUFFQyxHQUFHO1FBQ25CLElBQUlELEtBQUs7WUFDUCxvQ0FBb0M7WUFDcEMsSUFBSUEsSUFBSUUsT0FBTyxLQUFLLHFDQUFxQztnQkFDdkQsT0FBT04sR0FBRyxNQUFNO1lBQ2xCLE9BQU87Z0JBQ0wsT0FBT0EsR0FBR0k7WUFDWjtRQUNGO1FBQ0FKLEdBQUcsTUFBTUssSUFBSUUsTUFBTTtJQUNyQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9lc3RpbWF0ZS1nYXMuanM/OWNlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcmVhdGVQYXlsb2FkID0gcmVxdWlyZSgnLi9jcmVhdGUtcGF5bG9hZC5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZXN0aW1hdGVHYXNcblxuLypcblxuVGhpcyBpcyBhIHdvcmsgYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vZ28tZXRoZXJldW0vaXNzdWVzLzI1NzdcblxuKi9cblxuXG5mdW5jdGlvbiBlc3RpbWF0ZUdhcyhwcm92aWRlciwgdHhQYXJhbXMsIGNiKSB7XG4gIHByb3ZpZGVyLnNlbmRBc3luYyhjcmVhdGVQYXlsb2FkKHtcbiAgICBtZXRob2Q6ICdldGhfZXN0aW1hdGVHYXMnLFxuICAgIHBhcmFtczogW3R4UGFyYW1zXVxuICB9KSwgZnVuY3Rpb24oZXJyLCByZXMpe1xuICAgIGlmIChlcnIpIHtcbiAgICAgIC8vIGhhbmRsZSBzaW1wbGUgdmFsdWUgdHJhbnNmZXIgY2FzZVxuICAgICAgaWYgKGVyci5tZXNzYWdlID09PSAnbm8gY29udHJhY3QgY29kZSBhdCBnaXZlbiBhZGRyZXNzJykge1xuICAgICAgICByZXR1cm4gY2IobnVsbCwgJzB4Y2YwOCcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2IoZXJyKSAgICAgICAgXG4gICAgICB9XG4gICAgfVxuICAgIGNiKG51bGwsIHJlcy5yZXN1bHQpXG4gIH0pXG59Il0sIm5hbWVzIjpbImNyZWF0ZVBheWxvYWQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImVzdGltYXRlR2FzIiwicHJvdmlkZXIiLCJ0eFBhcmFtcyIsImNiIiwic2VuZEFzeW5jIiwibWV0aG9kIiwicGFyYW1zIiwiZXJyIiwicmVzIiwibWVzc2FnZSIsInJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/util/estimate-gas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/util/random-id.js":
/*!*************************************************************!*\
  !*** ./node_modules/web3-provider-engine/util/random-id.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = createRandomId;\nfunction createRandomId() {\n    // random id\n    return Math.floor(Number.MAX_SAFE_INTEGER * Math.random());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9yYW5kb20taWQuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUdDO0FBR2pCLFNBQVNBO0lBQ1AsWUFBWTtJQUNaLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0MsT0FBT0MsZ0JBQWdCLEdBQUdILEtBQUtJLE1BQU07QUFDekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy93ZWIzLXByb3ZpZGVyLWVuZ2luZS91dGlsL3JhbmRvbS1pZC5qcz9lMmU1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmFuZG9tSWRcblxuXG5mdW5jdGlvbiBjcmVhdGVSYW5kb21JZCAoKSB7XG4gIC8vIHJhbmRvbSBpZFxuICByZXR1cm4gTWF0aC5mbG9vcihOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiAqIE1hdGgucmFuZG9tKCkpXG59Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjcmVhdGVSYW5kb21JZCIsIk1hdGgiLCJmbG9vciIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJyYW5kb20iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/util/random-id.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/util/rpc-cache-utils.js":
/*!*******************************************************************!*\
  !*** ./node_modules/web3-provider-engine/util/rpc-cache-utils.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stringify = __webpack_require__(/*! json-stable-stringify */ \"(ssr)/./node_modules/json-stable-stringify/index.js\");\nmodule.exports = {\n    cacheIdentifierForPayload: cacheIdentifierForPayload,\n    canCache: canCache,\n    blockTagForPayload: blockTagForPayload,\n    paramsWithoutBlockTag: paramsWithoutBlockTag,\n    blockTagParamIndex: blockTagParamIndex,\n    cacheTypeForPayload: cacheTypeForPayload\n};\nfunction cacheIdentifierForPayload(payload, opts = {}) {\n    if (!canCache(payload)) return null;\n    const { includeBlockRef } = opts;\n    const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload);\n    return payload.method + \":\" + stringify(params);\n}\nfunction canCache(payload) {\n    return cacheTypeForPayload(payload) !== \"never\";\n}\nfunction blockTagForPayload(payload) {\n    var index = blockTagParamIndex(payload);\n    // Block tag param not passed.\n    if (index >= payload.params.length) {\n        return null;\n    }\n    return payload.params[index];\n}\nfunction paramsWithoutBlockTag(payload) {\n    var index = blockTagParamIndex(payload);\n    // Block tag param not passed.\n    if (index >= payload.params.length) {\n        return payload.params;\n    }\n    // eth_getBlockByNumber has the block tag first, then the optional includeTx? param\n    if (payload.method === \"eth_getBlockByNumber\") {\n        return payload.params.slice(1);\n    }\n    return payload.params.slice(0, index);\n}\nfunction blockTagParamIndex(payload) {\n    switch(payload.method){\n        // blockTag is third param\n        case \"eth_getStorageAt\":\n            return 2;\n        // blockTag is second param\n        case \"eth_getBalance\":\n        case \"eth_getCode\":\n        case \"eth_getTransactionCount\":\n        case \"eth_call\":\n        case \"eth_estimateGas\":\n            return 1;\n        // blockTag is first param\n        case \"eth_getBlockByNumber\":\n            return 0;\n        // there is no blockTag\n        default:\n            return undefined;\n    }\n}\nfunction cacheTypeForPayload(payload) {\n    switch(payload.method){\n        // cache permanently\n        case \"web3_clientVersion\":\n        case \"web3_sha3\":\n        case \"eth_protocolVersion\":\n        case \"eth_getBlockTransactionCountByHash\":\n        case \"eth_getUncleCountByBlockHash\":\n        case \"eth_getCode\":\n        case \"eth_getBlockByHash\":\n        case \"eth_getTransactionByHash\":\n        case \"eth_getTransactionByBlockHashAndIndex\":\n        case \"eth_getTransactionReceipt\":\n        case \"eth_getUncleByBlockHashAndIndex\":\n        case \"eth_getCompilers\":\n        case \"eth_compileLLL\":\n        case \"eth_compileSolidity\":\n        case \"eth_compileSerpent\":\n        case \"shh_version\":\n            return \"perma\";\n        // cache until fork\n        case \"eth_getBlockByNumber\":\n        case \"eth_getBlockTransactionCountByNumber\":\n        case \"eth_getUncleCountByBlockNumber\":\n        case \"eth_getTransactionByBlockNumberAndIndex\":\n        case \"eth_getUncleByBlockNumberAndIndex\":\n            return \"fork\";\n        // cache for block\n        case \"eth_gasPrice\":\n        case \"eth_getBalance\":\n        case \"eth_getStorageAt\":\n        case \"eth_getTransactionCount\":\n        case \"eth_call\":\n        case \"eth_estimateGas\":\n        case \"eth_getFilterLogs\":\n        case \"eth_getLogs\":\n        case \"eth_blockNumber\":\n            return \"block\";\n        // never cache\n        case \"net_version\":\n        case \"net_peerCount\":\n        case \"net_listening\":\n        case \"eth_syncing\":\n        case \"eth_sign\":\n        case \"eth_coinbase\":\n        case \"eth_mining\":\n        case \"eth_hashrate\":\n        case \"eth_accounts\":\n        case \"eth_sendTransaction\":\n        case \"eth_sendRawTransaction\":\n        case \"eth_newFilter\":\n        case \"eth_newBlockFilter\":\n        case \"eth_newPendingTransactionFilter\":\n        case \"eth_uninstallFilter\":\n        case \"eth_getFilterChanges\":\n        case \"eth_getWork\":\n        case \"eth_submitWork\":\n        case \"eth_submitHashrate\":\n        case \"db_putString\":\n        case \"db_getString\":\n        case \"db_putHex\":\n        case \"db_getHex\":\n        case \"shh_post\":\n        case \"shh_newIdentity\":\n        case \"shh_hasIdentity\":\n        case \"shh_newGroup\":\n        case \"shh_addToGroup\":\n        case \"shh_newFilter\":\n        case \"shh_uninstallFilter\":\n        case \"shh_getFilterChanges\":\n        case \"shh_getMessages\":\n            return \"never\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/util/rpc-cache-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/web3-provider-engine/util/stoplight.js":
/*!*************************************************************!*\
  !*** ./node_modules/web3-provider-engine/util/stoplight.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst inherits = (__webpack_require__(/*! util */ \"util\").inherits);\nmodule.exports = Stoplight;\ninherits(Stoplight, EventEmitter);\nfunction Stoplight() {\n    const self = this;\n    EventEmitter.call(self);\n    self.isLocked = true;\n}\nStoplight.prototype.go = function() {\n    const self = this;\n    self.isLocked = false;\n    self.emit(\"unlock\");\n};\nStoplight.prototype.stop = function() {\n    const self = this;\n    self.isLocked = true;\n    self.emit(\"lock\");\n};\nStoplight.prototype.await = function(fn) {\n    const self = this;\n    if (self.isLocked) {\n        self.once(\"unlock\", fn);\n    } else {\n        setTimeout(fn);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2ViMy1wcm92aWRlci1lbmdpbmUvdXRpbC9zdG9wbGlnaHQuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU1BLGVBQWVDLDBEQUE4QjtBQUNuRCxNQUFNQyxXQUFXRCxrREFBd0I7QUFFekNFLE9BQU9DLE9BQU8sR0FBR0M7QUFHakJILFNBQVNHLFdBQVdMO0FBRXBCLFNBQVNLO0lBQ1AsTUFBTUMsT0FBTyxJQUFJO0lBQ2pCTixhQUFhTyxJQUFJLENBQUNEO0lBQ2xCQSxLQUFLRSxRQUFRLEdBQUc7QUFDbEI7QUFFQUgsVUFBVUksU0FBUyxDQUFDQyxFQUFFLEdBQUc7SUFDdkIsTUFBTUosT0FBTyxJQUFJO0lBQ2pCQSxLQUFLRSxRQUFRLEdBQUc7SUFDaEJGLEtBQUtLLElBQUksQ0FBQztBQUNaO0FBRUFOLFVBQVVJLFNBQVMsQ0FBQ0csSUFBSSxHQUFHO0lBQ3pCLE1BQU1OLE9BQU8sSUFBSTtJQUNqQkEsS0FBS0UsUUFBUSxHQUFHO0lBQ2hCRixLQUFLSyxJQUFJLENBQUM7QUFDWjtBQUVBTixVQUFVSSxTQUFTLENBQUNJLEtBQUssR0FBRyxTQUFTQyxFQUFFO0lBQ3JDLE1BQU1SLE9BQU8sSUFBSTtJQUNqQixJQUFJQSxLQUFLRSxRQUFRLEVBQUU7UUFDakJGLEtBQUtTLElBQUksQ0FBQyxVQUFVRDtJQUN0QixPQUFPO1FBQ0xFLFdBQVdGO0lBQ2I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3dlYjMtcHJvdmlkZXItZW5naW5lL3V0aWwvc3RvcGxpZ2h0LmpzP2QyZjAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG5jb25zdCBpbmhlcml0cyA9IHJlcXVpcmUoJ3V0aWwnKS5pbmhlcml0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3BsaWdodFxuXG5cbmluaGVyaXRzKFN0b3BsaWdodCwgRXZlbnRFbWl0dGVyKVxuXG5mdW5jdGlvbiBTdG9wbGlnaHQoKXtcbiAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgRXZlbnRFbWl0dGVyLmNhbGwoc2VsZilcbiAgc2VsZi5pc0xvY2tlZCA9IHRydWVcbn1cblxuU3RvcGxpZ2h0LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuaXNMb2NrZWQgPSBmYWxzZVxuICBzZWxmLmVtaXQoJ3VubG9jaycpXG59XG5cblN0b3BsaWdodC5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCl7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIHNlbGYuaXNMb2NrZWQgPSB0cnVlXG4gIHNlbGYuZW1pdCgnbG9jaycpXG59XG5cblN0b3BsaWdodC5wcm90b3R5cGUuYXdhaXQgPSBmdW5jdGlvbihmbil7XG4gIGNvbnN0IHNlbGYgPSB0aGlzXG4gIGlmIChzZWxmLmlzTG9ja2VkKSB7XG4gICAgc2VsZi5vbmNlKCd1bmxvY2snLCBmbilcbiAgfSBlbHNlIHtcbiAgICBzZXRUaW1lb3V0KGZuKVxuICB9XG59Il0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsInJlcXVpcmUiLCJpbmhlcml0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJTdG9wbGlnaHQiLCJzZWxmIiwiY2FsbCIsImlzTG9ja2VkIiwicHJvdG90eXBlIiwiZ28iLCJlbWl0Iiwic3RvcCIsImF3YWl0IiwiZm4iLCJvbmNlIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/web3-provider-engine/util/stoplight.js\n");

/***/ })

};
;