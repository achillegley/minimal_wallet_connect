"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethjs-util";
exports.ids = ["vendor-chunks/ethjs-util"];
exports.modules = {

/***/ "(ssr)/./node_modules/ethjs-util/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/ethjs-util/lib/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar isHexPrefixed = __webpack_require__(/*! is-hex-prefixed */ \"(ssr)/./node_modules/is-hex-prefixed/src/index.js\");\nvar stripHexPrefix = __webpack_require__(/*! strip-hex-prefix */ \"(ssr)/./node_modules/strip-hex-prefix/src/index.js\");\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */ function padToEven(value) {\n    var a = value; // eslint-disable-line\n    if (typeof a !== \"string\") {\n        throw new Error(\"[ethjs-util] while padding to even, value must be string, is currently \" + typeof a + \", while padToEven.\");\n    }\n    if (a.length % 2) {\n        a = \"0\" + a;\n    }\n    return a;\n}\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */ function intToHex(i) {\n    var hex = i.toString(16); // eslint-disable-line\n    return \"0x\" + hex;\n}\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */ function intToBuffer(i) {\n    var hex = intToHex(i);\n    return new Buffer(padToEven(hex.slice(2)), \"hex\");\n}\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */ function getBinarySize(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(\"[ethjs-util] while getting binary size, method getBinarySize requires input 'str' to be type String, got '\" + typeof str + \"'.\");\n    }\n    return Buffer.byteLength(str, \"utf8\");\n}\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */ function arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(\"[ethjs-util] method arrayContainsArray requires input 'superset' to be an array got type '\" + typeof superset + \"'\");\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(\"[ethjs-util] method arrayContainsArray requires input 'subset' to be an array got type '\" + typeof subset + \"'\");\n    }\n    return subset[Boolean(some) && \"some\" || \"every\"](function(value) {\n        return superset.indexOf(value) >= 0;\n    });\n}\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */ function toUtf8(hex) {\n    var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, \"\")), \"hex\");\n    return bufferValue.toString(\"utf8\");\n}\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */ function toAscii(hex) {\n    var str = \"\"; // eslint-disable-line\n    var i = 0, l = hex.length; // eslint-disable-line\n    if (hex.substring(0, 2) === \"0x\") {\n        i = 2;\n    }\n    for(; i < l; i += 2){\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */ function fromUtf8(stringValue) {\n    var str = new Buffer(stringValue, \"utf8\");\n    return \"0x\" + padToEven(str.toString(\"hex\")).replace(/^0+|0+$/g, \"\");\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */ function fromAscii(stringValue) {\n    var hex = \"\"; // eslint-disable-line\n    for(var i = 0; i < stringValue.length; i++){\n        // eslint-disable-line\n        var code = stringValue.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? \"0\" + n : n;\n    }\n    return \"0x\" + hex;\n}\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */ function getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(\"[ethjs-util] method getKeys expecting type Array as 'params' input, got '\" + typeof params + \"'\");\n    }\n    if (typeof key !== \"string\") {\n        throw new Error(\"[ethjs-util] method getKeys expecting type String for input 'key' got '\" + typeof key + \"'.\");\n    }\n    var result = []; // eslint-disable-line\n    for(var i = 0; i < params.length; i++){\n        // eslint-disable-line\n        var value = params[i][key]; // eslint-disable-line\n        if (allowEmpty && !value) {\n            value = \"\";\n        } else if (typeof value !== \"string\") {\n            throw new Error(\"invalid abi\");\n        }\n        result.push(value);\n    }\n    return result;\n}\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */ function isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nmodule.exports = {\n    arrayContainsArray: arrayContainsArray,\n    intToBuffer: intToBuffer,\n    getBinarySize: getBinarySize,\n    isHexPrefixed: isHexPrefixed,\n    stripHexPrefix: stripHexPrefix,\n    padToEven: padToEven,\n    intToHex: intToHex,\n    fromAscii: fromAscii,\n    fromUtf8: fromUtf8,\n    toAscii: toAscii,\n    toUtf8: toUtf8,\n    getKeys: getKeys,\n    isHexString: isHexString\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethjs-util/lib/index.js\n");

/***/ })

};
;