"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-sig-util";
exports.ids = ["vendor-chunks/eth-sig-util"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-sig-util/index.js":
/*!********************************************!*\
  !*** ./node_modules/eth-sig-util/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst ethUtil = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-util/dist/index.js\");\nconst ethAbi = __webpack_require__(/*! ethereumjs-abi */ \"(ssr)/./node_modules/ethereumjs-abi/index.js\");\nmodule.exports = {\n    concatSig: function(v, r, s) {\n        const rSig = ethUtil.fromSigned(r);\n        const sSig = ethUtil.fromSigned(s);\n        const vSig = ethUtil.bufferToInt(v);\n        const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString(\"hex\"), 64);\n        const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString(\"hex\"), 64);\n        const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n        return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString(\"hex\");\n    },\n    normalize: function(input) {\n        if (!input) return;\n        if (typeof input === \"number\") {\n            const buffer = ethUtil.toBuffer(input);\n            input = ethUtil.bufferToHex(buffer);\n        }\n        if (typeof input !== \"string\") {\n            var msg = \"eth-sig-util.normalize() requires hex string or integer input.\";\n            msg += \" received \" + typeof input + \": \" + input;\n            throw new Error(msg);\n        }\n        return ethUtil.addHexPrefix(input.toLowerCase());\n    },\n    personalSign: function(privateKey, msgParams) {\n        var message = ethUtil.toBuffer(msgParams.data);\n        var msgHash = ethUtil.hashPersonalMessage(message);\n        var sig = ethUtil.ecsign(msgHash, privateKey);\n        var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n        return serialized;\n    },\n    recoverPersonalSignature: function(msgParams) {\n        const publicKey = getPublicKeyFor(msgParams);\n        const sender = ethUtil.publicToAddress(publicKey);\n        const senderHex = ethUtil.bufferToHex(sender);\n        return senderHex;\n    },\n    extractPublicKey: function(msgParams) {\n        const publicKey = getPublicKeyFor(msgParams);\n        return \"0x\" + publicKey.toString(\"hex\");\n    },\n    typedSignatureHash: function(typedData) {\n        const hashBuffer = typedSignatureHash(typedData);\n        return ethUtil.bufferToHex(hashBuffer);\n    },\n    signTypedData: function(privateKey, msgParams) {\n        const msgHash = typedSignatureHash(msgParams.data);\n        const sig = ethUtil.ecsign(msgHash, privateKey);\n        return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n    },\n    recoverTypedSignature: function(msgParams) {\n        const msgHash = typedSignatureHash(msgParams.data);\n        const publicKey = recoverPublicKey(msgHash, msgParams.sig);\n        const sender = ethUtil.publicToAddress(publicKey);\n        return ethUtil.bufferToHex(sender);\n    }\n};\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */ function typedSignatureHash(typedData) {\n    const error = new Error(\"Expect argument to be non-empty array\");\n    if (typeof typedData !== \"object\" || !typedData.length) throw error;\n    const data = typedData.map(function(e) {\n        return e.type === \"bytes\" ? ethUtil.toBuffer(e.value) : e.value;\n    });\n    const types = typedData.map(function(e) {\n        return e.type;\n    });\n    const schema = typedData.map(function(e) {\n        if (!e.name) throw error;\n        return e.type + \" \" + e.name;\n    });\n    return ethAbi.soliditySHA3([\n        \"bytes32\",\n        \"bytes32\"\n    ], [\n        ethAbi.soliditySHA3(new Array(typedData.length).fill(\"string\"), schema),\n        ethAbi.soliditySHA3(types, data)\n    ]);\n}\nfunction recoverPublicKey(hash, sig) {\n    const signature = ethUtil.toBuffer(sig);\n    const sigParams = ethUtil.fromRpcSig(signature);\n    return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\nfunction getPublicKeyFor(msgParams) {\n    const message = ethUtil.toBuffer(msgParams.data);\n    const msgHash = ethUtil.hashPersonalMessage(message);\n    return recoverPublicKey(msgHash, msgParams.sig);\n}\nfunction padWithZeroes(number, length) {\n    var myString = \"\" + number;\n    while(myString.length < length){\n        myString = \"0\" + myString;\n    }\n    return myString;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-sig-util/index.js\n");

/***/ })

};
;