"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethereumjs-tx";
exports.ids = ["vendor-chunks/ethereumjs-tx"];
exports.modules = {

/***/ "(ssr)/./node_modules/ethereumjs-tx/es5/index.js":
/*!*************************************************!*\
  !*** ./node_modules/ethereumjs-tx/es5/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nvar ethUtil = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-util/dist/index.js\");\nvar fees = __webpack_require__(/*! ethereum-common/params.json */ \"(ssr)/./node_modules/ethereumjs-tx/node_modules/ethereum-common/params.json\");\nvar BN = ethUtil.BN;\n// secp256k1n/2\nvar N_DIV_2 = new BN(\"7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\", 16);\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '00',\n *   gasPrice: '09184e72a000',\n *   gasLimit: '2710',\n *   to: '0000000000000000000000000000000000000000',\n *   value: '00',\n *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '1c',\n *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC signature parameter\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC recovery ID\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */ var Transaction = function() {\n    function Transaction(data) {\n        _classCallCheck(this, Transaction);\n        data = data || {};\n        // Define Properties\n        var fields = [\n            {\n                name: \"nonce\",\n                length: 32,\n                allowLess: true,\n                default: new Buffer([])\n            },\n            {\n                name: \"gasPrice\",\n                length: 32,\n                allowLess: true,\n                default: new Buffer([])\n            },\n            {\n                name: \"gasLimit\",\n                alias: \"gas\",\n                length: 32,\n                allowLess: true,\n                default: new Buffer([])\n            },\n            {\n                name: \"to\",\n                allowZero: true,\n                length: 20,\n                default: new Buffer([])\n            },\n            {\n                name: \"value\",\n                length: 32,\n                allowLess: true,\n                default: new Buffer([])\n            },\n            {\n                name: \"data\",\n                alias: \"input\",\n                allowZero: true,\n                default: new Buffer([])\n            },\n            {\n                name: \"v\",\n                allowZero: true,\n                default: new Buffer([\n                    0x1c\n                ])\n            },\n            {\n                name: \"r\",\n                length: 32,\n                allowZero: true,\n                allowLess: true,\n                default: new Buffer([])\n            },\n            {\n                name: \"s\",\n                length: 32,\n                allowZero: true,\n                allowLess: true,\n                default: new Buffer([])\n            }\n        ];\n        /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */ // attached serialize\n        ethUtil.defineProperties(this, fields, data);\n        /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */ Object.defineProperty(this, \"from\", {\n            enumerable: true,\n            configurable: true,\n            get: this.getSenderAddress.bind(this)\n        });\n        // calculate chainId from signature\n        var sigV = ethUtil.bufferToInt(this.v);\n        var chainId = Math.floor((sigV - 35) / 2);\n        if (chainId < 0) chainId = 0;\n        // set chainId\n        this._chainId = chainId || data.chainId || 0;\n        this._homestead = true;\n    }\n    /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */ Transaction.prototype.toCreationAddress = function toCreationAddress() {\n        return this.to.toString(\"hex\") === \"\";\n    };\n    /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */ Transaction.prototype.hash = function hash(includeSignature) {\n        if (includeSignature === undefined) includeSignature = true;\n        // EIP155 spec:\n        // when computing the hash of a transaction for purposes of signing or recovering,\n        // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n        var items = void 0;\n        if (includeSignature) {\n            items = this.raw;\n        } else {\n            if (this._chainId > 0) {\n                var raw = this.raw.slice();\n                this.v = this._chainId;\n                this.r = 0;\n                this.s = 0;\n                items = this.raw;\n                this.raw = raw;\n            } else {\n                items = this.raw.slice(0, 6);\n            }\n        }\n        // create hash\n        return ethUtil.rlphash(items);\n    };\n    /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */ Transaction.prototype.getChainId = function getChainId() {\n        return this._chainId;\n    };\n    /**\n   * returns the sender's address\n   * @return {Buffer}\n   */ Transaction.prototype.getSenderAddress = function getSenderAddress() {\n        if (this._from) {\n            return this._from;\n        }\n        var pubkey = this.getSenderPublicKey();\n        this._from = ethUtil.publicToAddress(pubkey);\n        return this._from;\n    };\n    /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */ Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {\n        if (!this._senderPubKey || !this._senderPubKey.length) {\n            if (!this.verifySignature()) throw new Error(\"Invalid Signature\");\n        }\n        return this._senderPubKey;\n    };\n    /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */ Transaction.prototype.verifySignature = function verifySignature() {\n        var msgHash = this.hash(false);\n        // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n            return false;\n        }\n        try {\n            var v = ethUtil.bufferToInt(this.v);\n            if (this._chainId > 0) {\n                v -= this._chainId * 2 + 8;\n            }\n            this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n        } catch (e) {\n            return false;\n        }\n        return !!this._senderPubKey;\n    };\n    /**\n   * sign a transaction with a given a private key\n   * @param {Buffer} privateKey\n   */ Transaction.prototype.sign = function sign(privateKey) {\n        var msgHash = this.hash(false);\n        var sig = ethUtil.ecsign(msgHash, privateKey);\n        if (this._chainId > 0) {\n            sig.v += this._chainId * 2 + 8;\n        }\n        Object.assign(this, sig);\n    };\n    /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */ Transaction.prototype.getDataFee = function getDataFee() {\n        var data = this.raw[5];\n        var cost = new BN(0);\n        for(var i = 0; i < data.length; i++){\n            data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n        }\n        return cost;\n    };\n    /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */ Transaction.prototype.getBaseFee = function getBaseFee() {\n        var fee = this.getDataFee().iaddn(fees.txGas.v);\n        if (this._homestead && this.toCreationAddress()) {\n            fee.iaddn(fees.txCreation.v);\n        }\n        return fee;\n    };\n    /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */ Transaction.prototype.getUpfrontCost = function getUpfrontCost() {\n        return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n    };\n    /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n   * @return {Boolean|String}\n   */ Transaction.prototype.validate = function validate(stringError) {\n        var errors = [];\n        if (!this.verifySignature()) {\n            errors.push(\"Invalid Signature\");\n        }\n        if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n            errors.push([\n                \"gas limit is too low. Need at least \" + this.getBaseFee()\n            ]);\n        }\n        if (stringError === undefined || stringError === false) {\n            return errors.length === 0;\n        } else {\n            return errors.join(\" \");\n        }\n    };\n    return Transaction;\n}();\nmodule.exports = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-tx/es5/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-tx/node_modules/ethereum-common/params.json":
/*!*****************************************************************************!*\
  !*** ./node_modules/ethereumjs-tx/node_modules/ethereum-common/params.json ***!
  \*****************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"genesisGasLimit":{"v":5000,"d":"Gas limit of the Genesis block."},"genesisDifficulty":{"v":17179869184,"d":"Difficulty of the Genesis block."},"genesisNonce":{"v":"0x0000000000000042","d":"the geneis nonce"},"genesisExtraData":{"v":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa","d":"extra data "},"genesisHash":{"v":"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3","d":"genesis hash"},"genesisStateRoot":{"v":"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544","d":"the genesis state root"},"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be."},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations."},"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be."},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations."},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not."},"maximumExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis."},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs."},"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed."},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack."},"tierStepGas":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them."},"expGas":{"v":10,"d":"Once per EXP instuction."},"expByteGas":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction."},"sha3Gas":{"v":30,"d":"Once per SHA3 operation."},"sha3WordGas":{"v":6,"d":"Once per word of the SHA3 operation\'s data."},"sloadGas":{"v":50,"d":"Once per SLOAD operation."},"sstoreSetGas":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero."},"sstoreResetGas":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero."},"sstoreRefundGas":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero."},"jumpdestGas":{"v":1,"d":"Refunded gas, once per SSTORE operation if the zeroness changes to zero."},"logGas":{"v":375,"d":"Per LOG* operation."},"logDataGas":{"v":8,"d":"Per byte in a LOG* operation\'s data."},"logTopicGas":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas."},"createGas":{"v":32000,"d":"Once per CREATE operation & contract-creation transaction."},"callGas":{"v":40,"d":"Once per CALL operation & message call transaction."},"callStipend":{"v":2300,"d":"Free gas given at beginning of call."},"callValueTransferGas":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero."},"callNewAccountGas":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior."},"suicideRefundGas":{"v":24000,"d":"Refunded following a suicide operation."},"memoryGas":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL."},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation."},"createDataGas":{"v":200,"d":""},"txGas":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions."},"txCreation":{"v":32000,"d":"the cost of creating a contract via tx"},"txDataZeroGas":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions."},"txDataNonZeroGas":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions."},"copyGas":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added."},"ecrecoverGas":{"v":3000,"d":""},"sha256Gas":{"v":60,"d":""},"sha256WordGas":{"v":12,"d":""},"ripemd160Gas":{"v":600,"d":""},"ripemd160WordGas":{"v":120,"d":""},"identityGas":{"v":15,"d":""},"identityWordGas":{"v":3,"d":""},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"ommerReward":{"v":"625000000000000000","d":"The amount of wei a miner of an uncle block gets for being inculded in the blockchain"},"niblingReward":{"v":"156250000000000000","d":"the amount a miner gets for inculding a uncle"},"homeSteadForkNumber":{"v":1150000,"d":"the block that the Homestead fork started at"},"homesteadRepriceForkNumber":{"v":2463000,"d":"the block that the Homestead Reprice (EIP150) fork started at"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"freeBlockPeriod":{"v":2}}');

/***/ })

};
;