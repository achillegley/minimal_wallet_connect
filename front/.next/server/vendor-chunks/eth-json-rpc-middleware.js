"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eth-json-rpc-middleware";
exports.ids = ["vendor-chunks/eth-json-rpc-middleware"];
exports.modules = {

/***/ "(ssr)/./node_modules/eth-json-rpc-middleware/block-cache.js":
/*!*************************************************************!*\
  !*** ./node_modules/eth-json-rpc-middleware/block-cache.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst cacheUtils = __webpack_require__(/*! ./cache-utils.js */ \"(ssr)/./node_modules/eth-json-rpc-middleware/cache-utils.js\");\nconst createAsyncMiddleware = __webpack_require__(/*! json-rpc-engine/src/createAsyncMiddleware */ \"(ssr)/./node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js\");\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [\n    undefined,\n    null,\n    \"<nil>\"\n];\nmodule.exports = createBlockCacheMiddleware;\nfunction createBlockCacheMiddleware(opts = {}) {\n    // validate options\n    const { blockTracker } = opts;\n    if (!blockTracker) throw new Error(\"createBlockCacheMiddleware - No BlockTracker specified\");\n    // create caching strategies\n    const blockCache = new BlockCacheStrategy();\n    const strategies = {\n        perma: blockCache,\n        block: blockCache,\n        fork: blockCache\n    };\n    return createAsyncMiddleware(async (req, res, next)=>{\n        // allow cach to be skipped if so specified\n        if (req.skipCache) {\n            return next();\n        }\n        // check type and matching strategy\n        const type = cacheUtils.cacheTypeForPayload(req);\n        const strategy = strategies[type];\n        // If there's no strategy in place, pass it down the chain.\n        if (!strategy) {\n            return next();\n        }\n        // If the strategy can't cache this request, ignore it.\n        if (!strategy.canCacheRequest(req)) {\n            return next();\n        }\n        // get block reference (number or keyword)\n        let blockTag = cacheUtils.blockTagForPayload(req);\n        if (!blockTag) blockTag = \"latest\";\n        // get exact block number\n        let requestedBlockNumber;\n        if (blockTag === \"earliest\") {\n            // this just exists for symmetry with \"latest\"\n            requestedBlockNumber = \"0x00\";\n        } else if (blockTag === \"latest\") {\n            // fetch latest block number\n            const latestBlockNumber = await blockTracker.getLatestBlock();\n            // clear all cache before latest block\n            blockCache.clearBefore(latestBlockNumber);\n            requestedBlockNumber = latestBlockNumber;\n        } else {\n            // We have a hex number\n            requestedBlockNumber = blockTag;\n        }\n        // end on a hit, continue on a miss\n        const cacheResult = await strategy.get(req, requestedBlockNumber);\n        if (cacheResult === undefined) {\n            // cache miss\n            // wait for other middleware to handle request\n            await next();\n            // add result to cache\n            await strategy.set(req, requestedBlockNumber, res.result);\n        } else {\n            // fill in result from cache\n            res.result = cacheResult;\n        }\n    });\n}\n//\n// Cache Strategies\n//\nclass BlockCacheStrategy {\n    constructor(){\n        this.cache = {};\n    }\n    getBlockCacheForPayload(payload, blockNumberHex) {\n        const blockNumber = Number.parseInt(blockNumberHex, 16);\n        let blockCache = this.cache[blockNumber];\n        // create new cache if necesary\n        if (!blockCache) {\n            const newCache = {};\n            this.cache[blockNumber] = newCache;\n            blockCache = newCache;\n        }\n        return blockCache;\n    }\n    async get(payload, requestedBlockNumber) {\n        // lookup block cache\n        const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);\n        if (!blockCache) return;\n        // lookup payload in block cache\n        const identifier = cacheUtils.cacheIdentifierForPayload(payload, true);\n        const cached = blockCache[identifier];\n        // may be undefined\n        return cached;\n    }\n    async set(payload, requestedBlockNumber, result) {\n        // check if we can cached this result\n        const canCache = this.canCacheResult(payload, result);\n        if (!canCache) return;\n        // set the value in the cache\n        const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);\n        const identifier = cacheUtils.cacheIdentifierForPayload(payload, true);\n        blockCache[identifier] = result;\n    }\n    canCacheRequest(payload) {\n        // check request method\n        if (!cacheUtils.canCache(payload)) {\n            return false;\n        }\n        // check blockTag\n        const blockTag = cacheUtils.blockTagForPayload(payload);\n        if (blockTag === \"pending\") {\n            return false;\n        }\n        // can be cached\n        return true;\n    }\n    canCacheResult(payload, result) {\n        // never cache empty values (e.g. undefined)\n        if (emptyValues.includes(result)) return;\n        // check if transactions have block reference before caching\n        if ([\n            \"eth_getTransactionByHash\",\n            \"eth_getTransactionReceipt\"\n        ].includes(payload.method)) {\n            if (!result || !result.blockHash || result.blockHash === \"0x0000000000000000000000000000000000000000000000000000000000000000\") {\n                return false;\n            }\n        }\n        // otherwise true\n        return true;\n    }\n    // removes all block caches with block number lower than `oldBlockHex`\n    clearBefore(oldBlockHex) {\n        const self = this;\n        const oldBlockNumber = Number.parseInt(oldBlockHex, 16);\n        // clear old caches\n        Object.keys(self.cache).map(Number).filter((num)=>num < oldBlockNumber).forEach((num)=>delete self.cache[num]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-middleware/block-cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-middleware/cache-utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/eth-json-rpc-middleware/cache-utils.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst stringify = __webpack_require__(/*! json-stable-stringify */ \"(ssr)/./node_modules/json-stable-stringify/index.js\");\nmodule.exports = {\n    cacheIdentifierForPayload: cacheIdentifierForPayload,\n    canCache: canCache,\n    blockTagForPayload: blockTagForPayload,\n    paramsWithoutBlockTag: paramsWithoutBlockTag,\n    blockTagParamIndex: blockTagParamIndex,\n    cacheTypeForPayload: cacheTypeForPayload\n};\nfunction cacheIdentifierForPayload(payload, skipBlockRef) {\n    const simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params;\n    if (canCache(payload)) {\n        return payload.method + \":\" + stringify(simpleParams);\n    } else {\n        return null;\n    }\n}\nfunction canCache(payload) {\n    return cacheTypeForPayload(payload) !== \"never\";\n}\nfunction blockTagForPayload(payload) {\n    let index = blockTagParamIndex(payload);\n    // Block tag param not passed.\n    if (index >= payload.params.length) {\n        return null;\n    }\n    return payload.params[index];\n}\nfunction paramsWithoutBlockTag(payload) {\n    const index = blockTagParamIndex(payload);\n    // Block tag param not passed.\n    if (index >= payload.params.length) {\n        return payload.params;\n    }\n    // eth_getBlockByNumber has the block tag first, then the optional includeTx? param\n    if (payload.method === \"eth_getBlockByNumber\") {\n        return payload.params.slice(1);\n    }\n    return payload.params.slice(0, index);\n}\nfunction blockTagParamIndex(payload) {\n    switch(payload.method){\n        // blockTag is at index 2\n        case \"eth_getStorageAt\":\n            return 2;\n        // blockTag is at index 1\n        case \"eth_getBalance\":\n        case \"eth_getCode\":\n        case \"eth_getTransactionCount\":\n        case \"eth_call\":\n            return 1;\n        // blockTag is at index 0\n        case \"eth_getBlockByNumber\":\n            return 0;\n        // there is no blockTag\n        default:\n            return undefined;\n    }\n}\nfunction cacheTypeForPayload(payload) {\n    switch(payload.method){\n        // cache permanently\n        case \"web3_clientVersion\":\n        case \"web3_sha3\":\n        case \"eth_protocolVersion\":\n        case \"eth_getBlockTransactionCountByHash\":\n        case \"eth_getUncleCountByBlockHash\":\n        case \"eth_getCode\":\n        case \"eth_getBlockByHash\":\n        case \"eth_getTransactionByHash\":\n        case \"eth_getTransactionByBlockHashAndIndex\":\n        case \"eth_getTransactionReceipt\":\n        case \"eth_getUncleByBlockHashAndIndex\":\n        case \"eth_getCompilers\":\n        case \"eth_compileLLL\":\n        case \"eth_compileSolidity\":\n        case \"eth_compileSerpent\":\n        case \"shh_version\":\n        case \"test_permaCache\":\n            return \"perma\";\n        // cache until fork\n        case \"eth_getBlockByNumber\":\n        case \"eth_getBlockTransactionCountByNumber\":\n        case \"eth_getUncleCountByBlockNumber\":\n        case \"eth_getTransactionByBlockNumberAndIndex\":\n        case \"eth_getUncleByBlockNumberAndIndex\":\n        case \"test_forkCache\":\n            return \"fork\";\n        // cache for block\n        case \"eth_gasPrice\":\n        case \"eth_blockNumber\":\n        case \"eth_getBalance\":\n        case \"eth_getStorageAt\":\n        case \"eth_getTransactionCount\":\n        case \"eth_call\":\n        case \"eth_estimateGas\":\n        case \"eth_getFilterLogs\":\n        case \"eth_getLogs\":\n        case \"test_blockCache\":\n            return \"block\";\n        // never cache\n        case \"net_version\":\n        case \"net_peerCount\":\n        case \"net_listening\":\n        case \"eth_syncing\":\n        case \"eth_sign\":\n        case \"eth_coinbase\":\n        case \"eth_mining\":\n        case \"eth_hashrate\":\n        case \"eth_accounts\":\n        case \"eth_sendTransaction\":\n        case \"eth_sendRawTransaction\":\n        case \"eth_newFilter\":\n        case \"eth_newBlockFilter\":\n        case \"eth_newPendingTransactionFilter\":\n        case \"eth_uninstallFilter\":\n        case \"eth_getFilterChanges\":\n        case \"eth_getWork\":\n        case \"eth_submitWork\":\n        case \"eth_submitHashrate\":\n        case \"db_putString\":\n        case \"db_getString\":\n        case \"db_putHex\":\n        case \"db_getHex\":\n        case \"shh_post\":\n        case \"shh_newIdentity\":\n        case \"shh_hasIdentity\":\n        case \"shh_newGroup\":\n        case \"shh_addToGroup\":\n        case \"shh_newFilter\":\n        case \"shh_uninstallFilter\":\n        case \"shh_getFilterChanges\":\n        case \"shh_getMessages\":\n        case \"test_neverCache\":\n            return \"never\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-middleware/cache-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js ***!
  \********************************************************************************************************/
/***/ ((module) => {

eval("/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */ \nmodule.exports = function createAsyncMiddleware(asyncMiddleware) {\n    return (req, res, next, end)=>{\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve)=>{\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback, nextWasCalled;\n        const asyncNext = async ()=>{\n            nextWasCalled = true;\n            next((callback)=>{\n                returnHandlerCallback = callback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        asyncMiddleware(req, res, asyncNext).then(async ()=>{\n            if (nextWasCalled) {\n                await nextPromise // we must wait until the return handler is called\n                ;\n                returnHandlerCallback(null);\n            } else {\n                end(null);\n            }\n        }).catch((error)=>{\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            } else {\n                end(error);\n            }\n        });\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvbm9kZV9tb2R1bGVzL2pzb24tcnBjLWVuZ2luZS9zcmMvY3JlYXRlQXN5bmNNaWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0NBZ0JDO0FBRURBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxzQkFBdUJDLGVBQWU7SUFDOUQsT0FBTyxDQUFDQyxLQUFLQyxLQUFLQyxNQUFNQztRQUV0QiwrQ0FBK0M7UUFDL0MscURBQXFEO1FBQ3JELGtCQUFrQjtRQUNsQixJQUFJQztRQUNKLE1BQU1DLGNBQWMsSUFBSUMsUUFBUSxDQUFDQztZQUMvQkgscUJBQXFCRztRQUN2QjtRQUVBLElBQUlDLHVCQUF1QkM7UUFFM0IsTUFBTUMsWUFBWTtZQUVoQkQsZ0JBQWdCO1lBRWhCUCxLQUFLLENBQUNTO2dCQUNKSCx3QkFBd0JHO2dCQUN4QlA7WUFDRjtZQUNBLE1BQU1DO1FBQ1I7UUFFQU4sZ0JBQWdCQyxLQUFLQyxLQUFLUyxXQUN2QkUsSUFBSSxDQUFDO1lBQ0osSUFBSUgsZUFBZTtnQkFDakIsTUFBTUosWUFBWSxrREFBa0Q7O2dCQUNwRUcsc0JBQXNCO1lBQ3hCLE9BQU87Z0JBQ0xMLElBQUk7WUFDTjtRQUNGLEdBQ0NVLEtBQUssQ0FBQyxDQUFDQztZQUNOLElBQUlOLHVCQUF1QjtnQkFDekJBLHNCQUFzQk07WUFDeEIsT0FBTztnQkFDTFgsSUFBSVc7WUFDTjtRQUNGO0lBQ0o7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL2V0aC1qc29uLXJwYy1taWRkbGV3YXJlL25vZGVfbW9kdWxlcy9qc29uLXJwYy1lbmdpbmUvc3JjL2NyZWF0ZUFzeW5jTWlkZGxld2FyZS5qcz9jMGE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSnNvblJwY0VuZ2luZSBvbmx5IGFjY2VwdHMgY2FsbGJhY2stYmFzZWQgbWlkZGxld2FyZSBkaXJlY3RseS5cbiAqIGNyZWF0ZUFzeW5jTWlkZGxld2FyZSBleGlzdHMgdG8gZW5hYmxlIGNvbnN1bWVycyB0byBwYXNzIGluIGFzeW5jIG1pZGRsZXdhcmVcbiAqIGZ1bmN0aW9ucy5cbiAqXG4gKiBBc3luYyBtaWRkbGV3YXJlIGhhdmUgbm8gXCJlbmRcIiBmdW5jdGlvbi4gSW5zdGVhZCwgdGhleSBcImVuZFwiIGlmIHRoZXkgcmV0dXJuXG4gKiB3aXRob3V0IGNhbGxpbmcgXCJuZXh0XCIuIFJhdGhlciB0aGFuIHBhc3NpbmcgaW4gZXhwbGljaXQgcmV0dXJuIGhhbmRsZXJzLFxuICogYXN5bmMgbWlkZGxld2FyZSBjYW4gc2ltcGx5IGF3YWl0IFwibmV4dFwiLCBhbmQgcGVyZm9ybSBvcGVyYXRpb25zIG9uIHRoZVxuICogcmVzcG9uc2Ugb2JqZWN0IHdoZW4gZXhlY3V0aW9uIHJlc3VtZXMuXG4gKlxuICogVG8gYWNjb21wbGlzaCB0aGlzLCBjcmVhdGVBc3luY01pZGRsZXdhcmUgcGFzc2VzIHRoZSBhc3luYyBtaWRkbGV3YXJlIGFcbiAqIHdyYXBwZWQgXCJuZXh0XCIgZnVuY3Rpb24uIFRoYXQgZnVuY3Rpb24gY2FsbHMgdGhlIGludGVybmFsIEpzb25ScGNFbmdpbmVcbiAqIFwibmV4dFwiIGZ1bmN0aW9uIHdpdGggYSByZXR1cm4gaGFuZGxlciB0aGF0IHJlc29sdmVzIGEgcHJvbWlzZSB3aGVuIGNhbGxlZC5cbiAqXG4gKiBUaGUgcmV0dXJuIGhhbmRsZXIgd2lsbCBhbHdheXMgYmUgY2FsbGVkLiBJdHMgcmVzb2x1dGlvbiBvZiB0aGUgcHJvbWlzZVxuICogZW5hYmxlcyB0aGUgY29udHJvbCBmbG93IGRlc2NyaWJlZCBhYm92ZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUFzeW5jTWlkZGxld2FyZSAoYXN5bmNNaWRkbGV3YXJlKSB7XG4gIHJldHVybiAocmVxLCByZXMsIG5leHQsIGVuZCkgPT4ge1xuXG4gICAgLy8gbmV4dFByb21pc2UgaXMgdGhlIGtleSB0byB0aGUgaW1wbGVtZW50YXRpb25cbiAgICAvLyBpdCBpcyByZXNvbHZlZCBieSB0aGUgcmV0dXJuIGhhbmRsZXIgcGFzc2VkIHRvIHRoZVxuICAgIC8vIFwibmV4dFwiIGZ1bmN0aW9uXG4gICAgbGV0IHJlc29sdmVOZXh0UHJvbWlzZVxuICAgIGNvbnN0IG5leHRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHJlc29sdmVOZXh0UHJvbWlzZSA9IHJlc29sdmVcbiAgICB9KVxuXG4gICAgbGV0IHJldHVybkhhbmRsZXJDYWxsYmFjaywgbmV4dFdhc0NhbGxlZFxuXG4gICAgY29uc3QgYXN5bmNOZXh0ID0gYXN5bmMgKCkgPT4ge1xuXG4gICAgICBuZXh0V2FzQ2FsbGVkID0gdHJ1ZVxuXG4gICAgICBuZXh0KChjYWxsYmFjaykgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbGxiYWNrLXJldHVyblxuICAgICAgICByZXR1cm5IYW5kbGVyQ2FsbGJhY2sgPSBjYWxsYmFja1xuICAgICAgICByZXNvbHZlTmV4dFByb21pc2UoKVxuICAgICAgfSlcbiAgICAgIGF3YWl0IG5leHRQcm9taXNlXG4gICAgfVxuXG4gICAgYXN5bmNNaWRkbGV3YXJlKHJlcSwgcmVzLCBhc3luY05leHQpXG4gICAgICAudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmIChuZXh0V2FzQ2FsbGVkKSB7XG4gICAgICAgICAgYXdhaXQgbmV4dFByb21pc2UgLy8gd2UgbXVzdCB3YWl0IHVudGlsIHRoZSByZXR1cm4gaGFuZGxlciBpcyBjYWxsZWRcbiAgICAgICAgICByZXR1cm5IYW5kbGVyQ2FsbGJhY2sobnVsbClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQobnVsbClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgaWYgKHJldHVybkhhbmRsZXJDYWxsYmFjaykge1xuICAgICAgICAgIHJldHVybkhhbmRsZXJDYWxsYmFjayhlcnJvcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQoZXJyb3IpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlQXN5bmNNaWRkbGV3YXJlIiwiYXN5bmNNaWRkbGV3YXJlIiwicmVxIiwicmVzIiwibmV4dCIsImVuZCIsInJlc29sdmVOZXh0UHJvbWlzZSIsIm5leHRQcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZXR1cm5IYW5kbGVyQ2FsbGJhY2siLCJuZXh0V2FzQ2FsbGVkIiwiYXN5bmNOZXh0IiwiY2FsbGJhY2siLCJ0aGVuIiwiY2F0Y2giLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createAsyncMiddleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createScaffoldMiddleware.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createScaffoldMiddleware.js ***!
  \***********************************************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function createScaffoldMiddleware(handlers) {\n    return (req, res, next, end)=>{\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === \"function\") {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvbm9kZV9tb2R1bGVzL2pzb24tcnBjLWVuZ2luZS9zcmMvY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLHlCQUEwQkMsUUFBUTtJQUMxRCxPQUFPLENBQUNDLEtBQUtDLEtBQUtDLE1BQU1DO1FBQ3RCLE1BQU1DLFVBQVVMLFFBQVEsQ0FBQ0MsSUFBSUssTUFBTSxDQUFDO1FBQ3BDLHdCQUF3QjtRQUN4QixJQUFJRCxZQUFZRSxXQUFXO1lBQ3pCLE9BQU9KO1FBQ1Q7UUFDQSx1Q0FBdUM7UUFDdkMsSUFBSSxPQUFPRSxZQUFZLFlBQVk7WUFDakMsT0FBT0EsUUFBUUosS0FBS0MsS0FBS0MsTUFBTUM7UUFDakM7UUFDQSxnREFBZ0Q7UUFDaERGLElBQUlNLE1BQU0sR0FBR0g7UUFDYixPQUFPRDtJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9ldGgtanNvbi1ycGMtbWlkZGxld2FyZS9ub2RlX21vZHVsZXMvanNvbi1ycGMtZW5naW5lL3NyYy9jcmVhdGVTY2FmZm9sZE1pZGRsZXdhcmUuanM/YzAyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZSAoaGFuZGxlcnMpIHtcbiAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCwgZW5kKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3JlcS5tZXRob2RdXG4gICAgLy8gaWYgbm8gaGFuZGxlciwgcmV0dXJuXG4gICAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5leHQoKVxuICAgIH1cbiAgICAvLyBpZiBoYW5kbGVyIGlzIGZuLCBjYWxsIGFzIG1pZGRsZXdhcmVcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBoYW5kbGVyKHJlcSwgcmVzLCBuZXh0LCBlbmQpXG4gICAgfVxuICAgIC8vIGlmIGhhbmRsZXIgaXMgc29tZSBvdGhlciB2YWx1ZSwgdXNlIGFzIHJlc3VsdFxuICAgIHJlcy5yZXN1bHQgPSBoYW5kbGVyXG4gICAgcmV0dXJuIGVuZCgpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlIiwiaGFuZGxlcnMiLCJyZXEiLCJyZXMiLCJuZXh0IiwiZW5kIiwiaGFuZGxlciIsIm1ldGhvZCIsInVuZGVmaW5lZCIsInJlc3VsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createScaffoldMiddleware.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/eth-json-rpc-middleware/scaffold.js":
/*!**********************************************************!*\
  !*** ./node_modules/eth-json-rpc-middleware/scaffold.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// for backwards compat\n\nmodule.exports = __webpack_require__(/*! json-rpc-engine/src/createScaffoldMiddleware */ \"(ssr)/./node_modules/eth-json-rpc-middleware/node_modules/json-rpc-engine/src/createScaffoldMiddleware.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvc2NhZmZvbGQuanMiLCJtYXBwaW5ncyI6IkFBQUEsdUJBQXVCOztBQUN2QkEscU1BQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvZXRoLWpzb24tcnBjLW1pZGRsZXdhcmUvc2NhZmZvbGQuanM/YWNkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdqc29uLXJwYy1lbmdpbmUvc3JjL2NyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZScpXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/eth-json-rpc-middleware/scaffold.js\n");

/***/ })

};
;