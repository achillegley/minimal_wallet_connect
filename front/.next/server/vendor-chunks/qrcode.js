/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/qrcode";
exports.ids = ["vendor-chunks/qrcode"];
exports.modules = {

/***/ "(ssr)/./node_modules/qrcode/lib/browser.js":
/*!********************************************!*\
  !*** ./node_modules/qrcode/lib/browser.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var canPromise = __webpack_require__(/*! ./can-promise */ \"(ssr)/./node_modules/qrcode/lib/can-promise.js\");\nvar QRCode = __webpack_require__(/*! ./core/qrcode */ \"(ssr)/./node_modules/qrcode/lib/core/qrcode.js\");\nvar CanvasRenderer = __webpack_require__(/*! ./renderer/canvas */ \"(ssr)/./node_modules/qrcode/lib/renderer/canvas.js\");\nvar SvgRenderer = __webpack_require__(/*! ./renderer/svg-tag.js */ \"(ssr)/./node_modules/qrcode/lib/renderer/svg-tag.js\");\nfunction renderCanvas(renderFunc, canvas, text, opts, cb) {\n    var args = [].slice.call(arguments, 1);\n    var argsNum = args.length;\n    var isLastArgCb = typeof args[argsNum - 1] === \"function\";\n    if (!isLastArgCb && !canPromise()) {\n        throw new Error(\"Callback required as last argument\");\n    }\n    if (isLastArgCb) {\n        if (argsNum < 2) {\n            throw new Error(\"Too few arguments provided\");\n        }\n        if (argsNum === 2) {\n            cb = text;\n            text = canvas;\n            canvas = opts = undefined;\n        } else if (argsNum === 3) {\n            if (canvas.getContext && typeof cb === \"undefined\") {\n                cb = opts;\n                opts = undefined;\n            } else {\n                cb = opts;\n                opts = text;\n                text = canvas;\n                canvas = undefined;\n            }\n        }\n    } else {\n        if (argsNum < 1) {\n            throw new Error(\"Too few arguments provided\");\n        }\n        if (argsNum === 1) {\n            text = canvas;\n            canvas = opts = undefined;\n        } else if (argsNum === 2 && !canvas.getContext) {\n            opts = text;\n            text = canvas;\n            canvas = undefined;\n        }\n        return new Promise(function(resolve, reject) {\n            try {\n                var data = QRCode.create(text, opts);\n                resolve(renderFunc(data, canvas, opts));\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n    try {\n        var data = QRCode.create(text, opts);\n        cb(null, renderFunc(data, canvas, opts));\n    } catch (e) {\n        cb(e);\n    }\n}\nexports.create = QRCode.create;\nexports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);\nexports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);\n// only svg for now.\nexports.toString = renderCanvas.bind(null, function(data, _, opts) {\n    return SvgRenderer.render(data, opts);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUNBLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDO0FBRXpCLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlFLGlCQUFpQkYsbUJBQU9BLENBQUM7QUFDN0IsSUFBSUcsY0FBY0gsbUJBQU9BLENBQUM7QUFFMUIsU0FBU0ksYUFBY0MsVUFBVSxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxFQUFFO0lBQ3ZELElBQUlDLE9BQU8sRUFBRSxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0MsV0FBVztJQUNwQyxJQUFJQyxVQUFVSixLQUFLSyxNQUFNO0lBQ3pCLElBQUlDLGNBQWMsT0FBT04sSUFBSSxDQUFDSSxVQUFVLEVBQUUsS0FBSztJQUUvQyxJQUFJLENBQUNFLGVBQWUsQ0FBQ2pCLGNBQWM7UUFDakMsTUFBTSxJQUFJa0IsTUFBTTtJQUNsQjtJQUVBLElBQUlELGFBQWE7UUFDZixJQUFJRixVQUFVLEdBQUc7WUFDZixNQUFNLElBQUlHLE1BQU07UUFDbEI7UUFFQSxJQUFJSCxZQUFZLEdBQUc7WUFDakJMLEtBQUtGO1lBQ0xBLE9BQU9EO1lBQ1BBLFNBQVNFLE9BQU9VO1FBQ2xCLE9BQU8sSUFBSUosWUFBWSxHQUFHO1lBQ3hCLElBQUlSLE9BQU9hLFVBQVUsSUFBSSxPQUFPVixPQUFPLGFBQWE7Z0JBQ2xEQSxLQUFLRDtnQkFDTEEsT0FBT1U7WUFDVCxPQUFPO2dCQUNMVCxLQUFLRDtnQkFDTEEsT0FBT0Q7Z0JBQ1BBLE9BQU9EO2dCQUNQQSxTQUFTWTtZQUNYO1FBQ0Y7SUFDRixPQUFPO1FBQ0wsSUFBSUosVUFBVSxHQUFHO1lBQ2YsTUFBTSxJQUFJRyxNQUFNO1FBQ2xCO1FBRUEsSUFBSUgsWUFBWSxHQUFHO1lBQ2pCUCxPQUFPRDtZQUNQQSxTQUFTRSxPQUFPVTtRQUNsQixPQUFPLElBQUlKLFlBQVksS0FBSyxDQUFDUixPQUFPYSxVQUFVLEVBQUU7WUFDOUNYLE9BQU9EO1lBQ1BBLE9BQU9EO1lBQ1BBLFNBQVNZO1FBQ1g7UUFFQSxPQUFPLElBQUlFLFFBQVEsU0FBVUMsT0FBTyxFQUFFQyxNQUFNO1lBQzFDLElBQUk7Z0JBQ0YsSUFBSUMsT0FBT3RCLE9BQU91QixNQUFNLENBQUNqQixNQUFNQztnQkFDL0JhLFFBQVFoQixXQUFXa0IsTUFBTWpCLFFBQVFFO1lBQ25DLEVBQUUsT0FBT2lCLEdBQUc7Z0JBQ1ZILE9BQU9HO1lBQ1Q7UUFDRjtJQUNGO0lBRUEsSUFBSTtRQUNGLElBQUlGLE9BQU90QixPQUFPdUIsTUFBTSxDQUFDakIsTUFBTUM7UUFDL0JDLEdBQUcsTUFBTUosV0FBV2tCLE1BQU1qQixRQUFRRTtJQUNwQyxFQUFFLE9BQU9pQixHQUFHO1FBQ1ZoQixHQUFHZ0I7SUFDTDtBQUNGO0FBRUFDLGNBQWMsR0FBR3pCLE9BQU91QixNQUFNO0FBQzlCRSxnQkFBZ0IsR0FBR3RCLGFBQWF3QixJQUFJLENBQUMsTUFBTTFCLGVBQWUyQixNQUFNO0FBQ2hFSCxpQkFBaUIsR0FBR3RCLGFBQWF3QixJQUFJLENBQUMsTUFBTTFCLGVBQWU2QixlQUFlO0FBRTFFLG9CQUFvQjtBQUNwQkwsZ0JBQWdCLEdBQUd0QixhQUFhd0IsSUFBSSxDQUFDLE1BQU0sU0FBVUwsSUFBSSxFQUFFVSxDQUFDLEVBQUV6QixJQUFJO0lBQ2hFLE9BQU9MLFlBQVkwQixNQUFNLENBQUNOLE1BQU1mO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9icm93c2VyLmpzP2I0ZDUiXSwic291cmNlc0NvbnRlbnQiOlsiXG52YXIgY2FuUHJvbWlzZSA9IHJlcXVpcmUoJy4vY2FuLXByb21pc2UnKVxuXG52YXIgUVJDb2RlID0gcmVxdWlyZSgnLi9jb3JlL3FyY29kZScpXG52YXIgQ2FudmFzUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL2NhbnZhcycpXG52YXIgU3ZnUmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyL3N2Zy10YWcuanMnKVxuXG5mdW5jdGlvbiByZW5kZXJDYW52YXMgKHJlbmRlckZ1bmMsIGNhbnZhcywgdGV4dCwgb3B0cywgY2IpIHtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgdmFyIGFyZ3NOdW0gPSBhcmdzLmxlbmd0aFxuICB2YXIgaXNMYXN0QXJnQ2IgPSB0eXBlb2YgYXJnc1thcmdzTnVtIC0gMV0gPT09ICdmdW5jdGlvbidcblxuICBpZiAoIWlzTGFzdEFyZ0NiICYmICFjYW5Qcm9taXNlKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIHJlcXVpcmVkIGFzIGxhc3QgYXJndW1lbnQnKVxuICB9XG5cbiAgaWYgKGlzTGFzdEFyZ0NiKSB7XG4gICAgaWYgKGFyZ3NOdW0gPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBmZXcgYXJndW1lbnRzIHByb3ZpZGVkJylcbiAgICB9XG5cbiAgICBpZiAoYXJnc051bSA9PT0gMikge1xuICAgICAgY2IgPSB0ZXh0XG4gICAgICB0ZXh0ID0gY2FudmFzXG4gICAgICBjYW52YXMgPSBvcHRzID0gdW5kZWZpbmVkXG4gICAgfSBlbHNlIGlmIChhcmdzTnVtID09PSAzKSB7XG4gICAgICBpZiAoY2FudmFzLmdldENvbnRleHQgJiYgdHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjYiA9IG9wdHNcbiAgICAgICAgb3B0cyA9IHVuZGVmaW5lZFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2IgPSBvcHRzXG4gICAgICAgIG9wdHMgPSB0ZXh0XG4gICAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChhcmdzTnVtIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb28gZmV3IGFyZ3VtZW50cyBwcm92aWRlZCcpXG4gICAgfVxuXG4gICAgaWYgKGFyZ3NOdW0gPT09IDEpIHtcbiAgICAgIHRleHQgPSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IG9wdHMgPSB1bmRlZmluZWRcbiAgICB9IGVsc2UgaWYgKGFyZ3NOdW0gPT09IDIgJiYgIWNhbnZhcy5nZXRDb250ZXh0KSB7XG4gICAgICBvcHRzID0gdGV4dFxuICAgICAgdGV4dCA9IGNhbnZhc1xuICAgICAgY2FudmFzID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkYXRhID0gUVJDb2RlLmNyZWF0ZSh0ZXh0LCBvcHRzKVxuICAgICAgICByZXNvbHZlKHJlbmRlckZ1bmMoZGF0YSwgY2FudmFzLCBvcHRzKSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIGRhdGEgPSBRUkNvZGUuY3JlYXRlKHRleHQsIG9wdHMpXG4gICAgY2IobnVsbCwgcmVuZGVyRnVuYyhkYXRhLCBjYW52YXMsIG9wdHMpKVxuICB9IGNhdGNoIChlKSB7XG4gICAgY2IoZSlcbiAgfVxufVxuXG5leHBvcnRzLmNyZWF0ZSA9IFFSQ29kZS5jcmVhdGVcbmV4cG9ydHMudG9DYW52YXMgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBDYW52YXNSZW5kZXJlci5yZW5kZXIpXG5leHBvcnRzLnRvRGF0YVVSTCA9IHJlbmRlckNhbnZhcy5iaW5kKG51bGwsIENhbnZhc1JlbmRlcmVyLnJlbmRlclRvRGF0YVVSTClcblxuLy8gb25seSBzdmcgZm9yIG5vdy5cbmV4cG9ydHMudG9TdHJpbmcgPSByZW5kZXJDYW52YXMuYmluZChudWxsLCBmdW5jdGlvbiAoZGF0YSwgXywgb3B0cykge1xuICByZXR1cm4gU3ZnUmVuZGVyZXIucmVuZGVyKGRhdGEsIG9wdHMpXG59KVxuIl0sIm5hbWVzIjpbImNhblByb21pc2UiLCJyZXF1aXJlIiwiUVJDb2RlIiwiQ2FudmFzUmVuZGVyZXIiLCJTdmdSZW5kZXJlciIsInJlbmRlckNhbnZhcyIsInJlbmRlckZ1bmMiLCJjYW52YXMiLCJ0ZXh0Iiwib3B0cyIsImNiIiwiYXJncyIsInNsaWNlIiwiY2FsbCIsImFyZ3VtZW50cyIsImFyZ3NOdW0iLCJsZW5ndGgiLCJpc0xhc3RBcmdDYiIsIkVycm9yIiwidW5kZWZpbmVkIiwiZ2V0Q29udGV4dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGF0YSIsImNyZWF0ZSIsImUiLCJleHBvcnRzIiwidG9DYW52YXMiLCJiaW5kIiwicmVuZGVyIiwidG9EYXRhVVJMIiwicmVuZGVyVG9EYXRhVVJMIiwidG9TdHJpbmciLCJfIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/can-promise.js":
/*!************************************************!*\
  !*** ./node_modules/qrcode/lib/can-promise.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("// can-promise has a crash in some versions of react native that dont have\n// standard global objects\n// https://github.com/soldair/node-qrcode/issues/157\n\nmodule.exports = function() {\n    return typeof Promise === \"function\" && Promise.prototype && Promise.prototype.then;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jYW4tcHJvbWlzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUsMEJBQTBCO0FBQzFCLG9EQUFvRDs7QUFFcERBLE9BQU9DLE9BQU8sR0FBRztJQUNmLE9BQU8sT0FBT0MsWUFBWSxjQUFjQSxRQUFRQyxTQUFTLElBQUlELFFBQVFDLFNBQVMsQ0FBQ0MsSUFBSTtBQUNyRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY2FuLXByb21pc2UuanM/OWNiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjYW4tcHJvbWlzZSBoYXMgYSBjcmFzaCBpbiBzb21lIHZlcnNpb25zIG9mIHJlYWN0IG5hdGl2ZSB0aGF0IGRvbnQgaGF2ZVxuLy8gc3RhbmRhcmQgZ2xvYmFsIG9iamVjdHNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2xkYWlyL25vZGUtcXJjb2RlL2lzc3Vlcy8xNTdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgUHJvbWlzZSA9PT0gJ2Z1bmN0aW9uJyAmJiBQcm9taXNlLnByb3RvdHlwZSAmJiBQcm9taXNlLnByb3RvdHlwZS50aGVuXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlByb21pc2UiLCJwcm90b3R5cGUiLCJ0aGVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/can-promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/alignment-pattern.js":
/*!***********************************************************!*\
  !*** ./node_modules/qrcode/lib/core/alignment-pattern.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Alignment pattern are fixed reference pattern in defined positions\n * in a matrix symbology, which enables the decode software to re-synchronise\n * the coordinate mapping of the image modules in the event of moderate amounts\n * of distortion of the image.\n *\n * Alignment patterns are present only in QR Code symbols of version 2 or larger\n * and their number depends on the symbol version.\n */ var getSymbolSize = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/core/utils.js\").getSymbolSize);\n/**\n * Calculate the row/column coordinates of the center module of each alignment pattern\n * for the specified QR Code version.\n *\n * The alignment patterns are positioned symmetrically on either side of the diagonal\n * running from the top left corner of the symbol to the bottom right corner.\n *\n * Since positions are simmetrical only half of the coordinates are returned.\n * Each item of the array will represent in turn the x and y coordinate.\n * @see {@link getPositions}\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinate\n */ exports.getRowColCoords = function getRowColCoords(version) {\n    if (version === 1) return [];\n    var posCount = Math.floor(version / 7) + 2;\n    var size = getSymbolSize(version);\n    var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;\n    var positions = [\n        size - 7\n    ] // Last coord is always (size - 7)\n    ;\n    for(var i = 1; i < posCount - 1; i++){\n        positions[i] = positions[i - 1] - intervals;\n    }\n    positions.push(6) // First coord is always 6\n    ;\n    return positions.reverse();\n};\n/**\n * Returns an array containing the positions of each alignment pattern.\n * Each array's element represent the center point of the pattern as (x, y) coordinates\n *\n * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n * and filtering out the items that overlaps with finder pattern\n *\n * @example\n * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n * The alignment patterns, therefore, are to be centered on (row, column)\n * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n * and are not therefore used for alignment patterns.\n *\n * var pos = getPositions(7)\n * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */ exports.getPositions = function getPositions(version) {\n    var coords = [];\n    var pos = exports.getRowColCoords(version);\n    var posLength = pos.length;\n    for(var i = 0; i < posLength; i++){\n        for(var j = 0; j < posLength; j++){\n            // Skip if position is occupied by finder patterns\n            if (i === 0 && j === 0 || // top-left\n            i === 0 && j === posLength - 1 || // bottom-left\n            i === posLength - 1 && j === 0) {\n                continue;\n            }\n            coords.push([\n                pos[i],\n                pos[j]\n            ]);\n        }\n    }\n    return coords;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2FsaWdubWVudC1wYXR0ZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztDQVFDLEdBRUQsSUFBSUEsZ0JBQWdCQyxtR0FBZ0M7QUFFcEQ7Ozs7Ozs7Ozs7Ozs7Q0FhQyxHQUNEQyx1QkFBdUIsR0FBRyxTQUFTQyxnQkFBaUJDLE9BQU87SUFDekQsSUFBSUEsWUFBWSxHQUFHLE9BQU8sRUFBRTtJQUU1QixJQUFJQyxXQUFXQyxLQUFLQyxLQUFLLENBQUNILFVBQVUsS0FBSztJQUN6QyxJQUFJSSxPQUFPUixjQUFjSTtJQUN6QixJQUFJSyxZQUFZRCxTQUFTLE1BQU0sS0FBS0YsS0FBS0ksSUFBSSxDQUFDLENBQUNGLE9BQU8sRUFBQyxJQUFNLEtBQUlILFdBQVcsTUFBTTtJQUNsRixJQUFJTSxZQUFZO1FBQUNILE9BQU87S0FBRSxDQUFDLGtDQUFrQzs7SUFFN0QsSUFBSyxJQUFJSSxJQUFJLEdBQUdBLElBQUlQLFdBQVcsR0FBR08sSUFBSztRQUNyQ0QsU0FBUyxDQUFDQyxFQUFFLEdBQUdELFNBQVMsQ0FBQ0MsSUFBSSxFQUFFLEdBQUdIO0lBQ3BDO0lBRUFFLFVBQVVFLElBQUksQ0FBQyxHQUFHLDBCQUEwQjs7SUFFNUMsT0FBT0YsVUFBVUcsT0FBTztBQUMxQjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUJDLEdBQ0RaLG9CQUFvQixHQUFHLFNBQVNhLGFBQWNYLE9BQU87SUFDbkQsSUFBSVksU0FBUyxFQUFFO0lBQ2YsSUFBSUMsTUFBTWYsUUFBUUMsZUFBZSxDQUFDQztJQUNsQyxJQUFJYyxZQUFZRCxJQUFJRSxNQUFNO0lBRTFCLElBQUssSUFBSVAsSUFBSSxHQUFHQSxJQUFJTSxXQUFXTixJQUFLO1FBQ2xDLElBQUssSUFBSVEsSUFBSSxHQUFHQSxJQUFJRixXQUFXRSxJQUFLO1lBQ2xDLGtEQUFrRDtZQUNsRCxJQUFJLE1BQU8sS0FBS0EsTUFBTSxLQUFrQixXQUFXO1lBQzlDUixNQUFNLEtBQUtRLE1BQU1GLFlBQVksS0FBTSxjQUFjO1lBQ2pETixNQUFNTSxZQUFZLEtBQUtFLE1BQU0sR0FBSTtnQkFDcEM7WUFDRjtZQUVBSixPQUFPSCxJQUFJLENBQUM7Z0JBQUNJLEdBQUcsQ0FBQ0wsRUFBRTtnQkFBRUssR0FBRyxDQUFDRyxFQUFFO2FBQUM7UUFDOUI7SUFDRjtJQUVBLE9BQU9KO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvYWxpZ25tZW50LXBhdHRlcm4uanM/YWI0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFsaWdubWVudCBwYXR0ZXJuIGFyZSBmaXhlZCByZWZlcmVuY2UgcGF0dGVybiBpbiBkZWZpbmVkIHBvc2l0aW9uc1xuICogaW4gYSBtYXRyaXggc3ltYm9sb2d5LCB3aGljaCBlbmFibGVzIHRoZSBkZWNvZGUgc29mdHdhcmUgdG8gcmUtc3luY2hyb25pc2VcbiAqIHRoZSBjb29yZGluYXRlIG1hcHBpbmcgb2YgdGhlIGltYWdlIG1vZHVsZXMgaW4gdGhlIGV2ZW50IG9mIG1vZGVyYXRlIGFtb3VudHNcbiAqIG9mIGRpc3RvcnRpb24gb2YgdGhlIGltYWdlLlxuICpcbiAqIEFsaWdubWVudCBwYXR0ZXJucyBhcmUgcHJlc2VudCBvbmx5IGluIFFSIENvZGUgc3ltYm9scyBvZiB2ZXJzaW9uIDIgb3IgbGFyZ2VyXG4gKiBhbmQgdGhlaXIgbnVtYmVyIGRlcGVuZHMgb24gdGhlIHN5bWJvbCB2ZXJzaW9uLlxuICovXG5cbnZhciBnZXRTeW1ib2xTaXplID0gcmVxdWlyZSgnLi91dGlscycpLmdldFN5bWJvbFNpemVcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHJvdy9jb2x1bW4gY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBtb2R1bGUgb2YgZWFjaCBhbGlnbm1lbnQgcGF0dGVyblxuICogZm9yIHRoZSBzcGVjaWZpZWQgUVIgQ29kZSB2ZXJzaW9uLlxuICpcbiAqIFRoZSBhbGlnbm1lbnQgcGF0dGVybnMgYXJlIHBvc2l0aW9uZWQgc3ltbWV0cmljYWxseSBvbiBlaXRoZXIgc2lkZSBvZiB0aGUgZGlhZ29uYWxcbiAqIHJ1bm5pbmcgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBzeW1ib2wgdG8gdGhlIGJvdHRvbSByaWdodCBjb3JuZXIuXG4gKlxuICogU2luY2UgcG9zaXRpb25zIGFyZSBzaW1tZXRyaWNhbCBvbmx5IGhhbGYgb2YgdGhlIGNvb3JkaW5hdGVzIGFyZSByZXR1cm5lZC5cbiAqIEVhY2ggaXRlbSBvZiB0aGUgYXJyYXkgd2lsbCByZXByZXNlbnQgaW4gdHVybiB0aGUgeCBhbmQgeSBjb29yZGluYXRlLlxuICogQHNlZSB7QGxpbmsgZ2V0UG9zaXRpb25zfVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlXG4gKi9cbmV4cG9ydHMuZ2V0Um93Q29sQ29vcmRzID0gZnVuY3Rpb24gZ2V0Um93Q29sQ29vcmRzICh2ZXJzaW9uKSB7XG4gIGlmICh2ZXJzaW9uID09PSAxKSByZXR1cm4gW11cblxuICB2YXIgcG9zQ291bnQgPSBNYXRoLmZsb29yKHZlcnNpb24gLyA3KSArIDJcbiAgdmFyIHNpemUgPSBnZXRTeW1ib2xTaXplKHZlcnNpb24pXG4gIHZhciBpbnRlcnZhbHMgPSBzaXplID09PSAxNDUgPyAyNiA6IE1hdGguY2VpbCgoc2l6ZSAtIDEzKSAvICgyICogcG9zQ291bnQgLSAyKSkgKiAyXG4gIHZhciBwb3NpdGlvbnMgPSBbc2l6ZSAtIDddIC8vIExhc3QgY29vcmQgaXMgYWx3YXlzIChzaXplIC0gNylcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IHBvc0NvdW50IC0gMTsgaSsrKSB7XG4gICAgcG9zaXRpb25zW2ldID0gcG9zaXRpb25zW2kgLSAxXSAtIGludGVydmFsc1xuICB9XG5cbiAgcG9zaXRpb25zLnB1c2goNikgLy8gRmlyc3QgY29vcmQgaXMgYWx3YXlzIDZcblxuICByZXR1cm4gcG9zaXRpb25zLnJldmVyc2UoKVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgcG9zaXRpb25zIG9mIGVhY2ggYWxpZ25tZW50IHBhdHRlcm4uXG4gKiBFYWNoIGFycmF5J3MgZWxlbWVudCByZXByZXNlbnQgdGhlIGNlbnRlciBwb2ludCBvZiB0aGUgcGF0dGVybiBhcyAoeCwgeSkgY29vcmRpbmF0ZXNcbiAqXG4gKiBDb29yZGluYXRlcyBhcmUgY2FsY3VsYXRlZCBleHBhbmRpbmcgdGhlIHJvdy9jb2x1bW4gY29vcmRpbmF0ZXMgcmV0dXJuZWQgYnkge0BsaW5rIGdldFJvd0NvbENvb3Jkc31cbiAqIGFuZCBmaWx0ZXJpbmcgb3V0IHRoZSBpdGVtcyB0aGF0IG92ZXJsYXBzIHdpdGggZmluZGVyIHBhdHRlcm5cbiAqXG4gKiBAZXhhbXBsZVxuICogRm9yIGEgVmVyc2lvbiA3IHN5bWJvbCB7QGxpbmsgZ2V0Um93Q29sQ29vcmRzfSByZXR1cm5zIHZhbHVlcyA2LCAyMiBhbmQgMzguXG4gKiBUaGUgYWxpZ25tZW50IHBhdHRlcm5zLCB0aGVyZWZvcmUsIGFyZSB0byBiZSBjZW50ZXJlZCBvbiAocm93LCBjb2x1bW4pXG4gKiBwb3NpdGlvbnMgKDYsMjIpLCAoMjIsNiksICgyMiwyMiksICgyMiwzOCksICgzOCwyMiksICgzOCwzOCkuXG4gKiBOb3RlIHRoYXQgdGhlIGNvb3JkaW5hdGVzICg2LDYpLCAoNiwzOCksICgzOCw2KSBhcmUgb2NjdXBpZWQgYnkgZmluZGVyIHBhdHRlcm5zXG4gKiBhbmQgYXJlIG5vdCB0aGVyZWZvcmUgdXNlZCBmb3IgYWxpZ25tZW50IHBhdHRlcm5zLlxuICpcbiAqIHZhciBwb3MgPSBnZXRQb3NpdGlvbnMoNylcbiAqIC8vIFtbNiwyMl0sIFsyMiw2XSwgWzIyLDIyXSwgWzIyLDM4XSwgWzM4LDIyXSwgWzM4LDM4XV1cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHZlcnNpb24gUVIgQ29kZSB2ZXJzaW9uXG4gKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgQXJyYXkgb2YgY29vcmRpbmF0ZXNcbiAqL1xuZXhwb3J0cy5nZXRQb3NpdGlvbnMgPSBmdW5jdGlvbiBnZXRQb3NpdGlvbnMgKHZlcnNpb24pIHtcbiAgdmFyIGNvb3JkcyA9IFtdXG4gIHZhciBwb3MgPSBleHBvcnRzLmdldFJvd0NvbENvb3Jkcyh2ZXJzaW9uKVxuICB2YXIgcG9zTGVuZ3RoID0gcG9zLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zTGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBvc0xlbmd0aDsgaisrKSB7XG4gICAgICAvLyBTa2lwIGlmIHBvc2l0aW9uIGlzIG9jY3VwaWVkIGJ5IGZpbmRlciBwYXR0ZXJuc1xuICAgICAgaWYgKChpID09PSAwICYmIGogPT09IDApIHx8ICAgICAgICAgICAgIC8vIHRvcC1sZWZ0XG4gICAgICAgICAgKGkgPT09IDAgJiYgaiA9PT0gcG9zTGVuZ3RoIC0gMSkgfHwgLy8gYm90dG9tLWxlZnRcbiAgICAgICAgICAoaSA9PT0gcG9zTGVuZ3RoIC0gMSAmJiBqID09PSAwKSkgeyAvLyB0b3AtcmlnaHRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgY29vcmRzLnB1c2goW3Bvc1tpXSwgcG9zW2pdXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29vcmRzXG59XG4iXSwibmFtZXMiOlsiZ2V0U3ltYm9sU2l6ZSIsInJlcXVpcmUiLCJleHBvcnRzIiwiZ2V0Um93Q29sQ29vcmRzIiwidmVyc2lvbiIsInBvc0NvdW50IiwiTWF0aCIsImZsb29yIiwic2l6ZSIsImludGVydmFscyIsImNlaWwiLCJwb3NpdGlvbnMiLCJpIiwicHVzaCIsInJldmVyc2UiLCJnZXRQb3NpdGlvbnMiLCJjb29yZHMiLCJwb3MiLCJwb3NMZW5ndGgiLCJsZW5ndGgiLCJqIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/alignment-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/alphanumeric-data.js":
/*!***********************************************************!*\
  !*** ./node_modules/qrcode/lib/core/alphanumeric-data.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qrcode/lib/core/mode.js\");\n/**\n * Array of characters available in alphanumeric mode\n *\n * As per QR Code specification, to each character\n * is assigned a value from 0 to 44 which in this case coincides\n * with the array index\n *\n * @type {Array}\n */ var ALPHA_NUM_CHARS = [\n    \"0\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"5\",\n    \"6\",\n    \"7\",\n    \"8\",\n    \"9\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \" \",\n    \"$\",\n    \"%\",\n    \"*\",\n    \"+\",\n    \"-\",\n    \".\",\n    \"/\",\n    \":\"\n];\nfunction AlphanumericData(data) {\n    this.mode = Mode.ALPHANUMERIC;\n    this.data = data;\n}\nAlphanumericData.getBitsLength = function getBitsLength(length) {\n    return 11 * Math.floor(length / 2) + 6 * (length % 2);\n};\nAlphanumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nAlphanumericData.prototype.getBitsLength = function getBitsLength() {\n    return AlphanumericData.getBitsLength(this.data.length);\n};\nAlphanumericData.prototype.write = function write(bitBuffer) {\n    var i;\n    // Input data characters are divided into groups of two characters\n    // and encoded as 11-bit binary codes.\n    for(i = 0; i + 2 <= this.data.length; i += 2){\n        // The character value of the first character is multiplied by 45\n        var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;\n        // The character value of the second digit is added to the product\n        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);\n        // The sum is then stored as 11-bit binary number\n        bitBuffer.put(value, 11);\n    }\n    // If the number of input data characters is not a multiple of two,\n    // the character value of the final character is encoded as a 6-bit binary number.\n    if (this.data.length % 2) {\n        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);\n    }\n};\nmodule.exports = AlphanumericData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2FscGhhbnVtZXJpYy1kYXRhLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQjs7Ozs7Ozs7Q0FRQyxHQUNELElBQUlDLGtCQUFrQjtJQUNwQjtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUM3QztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUM1RDtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUM1RDtJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7Q0FDekM7QUFFRCxTQUFTQyxpQkFBa0JDLElBQUk7SUFDN0IsSUFBSSxDQUFDQyxJQUFJLEdBQUdMLEtBQUtNLFlBQVk7SUFDN0IsSUFBSSxDQUFDRixJQUFJLEdBQUdBO0FBQ2Q7QUFFQUQsaUJBQWlCSSxhQUFhLEdBQUcsU0FBU0EsY0FBZUMsTUFBTTtJQUM3RCxPQUFPLEtBQUtDLEtBQUtDLEtBQUssQ0FBQ0YsU0FBUyxLQUFLLElBQUtBLENBQUFBLFNBQVM7QUFDckQ7QUFFQUwsaUJBQWlCUSxTQUFTLENBQUNDLFNBQVMsR0FBRyxTQUFTQTtJQUM5QyxPQUFPLElBQUksQ0FBQ1IsSUFBSSxDQUFDSSxNQUFNO0FBQ3pCO0FBRUFMLGlCQUFpQlEsU0FBUyxDQUFDSixhQUFhLEdBQUcsU0FBU0E7SUFDbEQsT0FBT0osaUJBQWlCSSxhQUFhLENBQUMsSUFBSSxDQUFDSCxJQUFJLENBQUNJLE1BQU07QUFDeEQ7QUFFQUwsaUJBQWlCUSxTQUFTLENBQUNFLEtBQUssR0FBRyxTQUFTQSxNQUFPQyxTQUFTO0lBQzFELElBQUlDO0lBRUosa0VBQWtFO0lBQ2xFLHNDQUFzQztJQUN0QyxJQUFLQSxJQUFJLEdBQUdBLElBQUksS0FBSyxJQUFJLENBQUNYLElBQUksQ0FBQ0ksTUFBTSxFQUFFTyxLQUFLLEVBQUc7UUFDN0MsaUVBQWlFO1FBQ2pFLElBQUlDLFFBQVFkLGdCQUFnQmUsT0FBTyxDQUFDLElBQUksQ0FBQ2IsSUFBSSxDQUFDVyxFQUFFLElBQUk7UUFFcEQsa0VBQWtFO1FBQ2xFQyxTQUFTZCxnQkFBZ0JlLE9BQU8sQ0FBQyxJQUFJLENBQUNiLElBQUksQ0FBQ1csSUFBSSxFQUFFO1FBRWpELGlEQUFpRDtRQUNqREQsVUFBVUksR0FBRyxDQUFDRixPQUFPO0lBQ3ZCO0lBRUEsbUVBQW1FO0lBQ25FLGtGQUFrRjtJQUNsRixJQUFJLElBQUksQ0FBQ1osSUFBSSxDQUFDSSxNQUFNLEdBQUcsR0FBRztRQUN4Qk0sVUFBVUksR0FBRyxDQUFDaEIsZ0JBQWdCZSxPQUFPLENBQUMsSUFBSSxDQUFDYixJQUFJLENBQUNXLEVBQUUsR0FBRztJQUN2RDtBQUNGO0FBRUFJLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2FscGhhbnVtZXJpYy1kYXRhLmpzPzI3NzgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxuXG4vKipcbiAqIEFycmF5IG9mIGNoYXJhY3RlcnMgYXZhaWxhYmxlIGluIGFscGhhbnVtZXJpYyBtb2RlXG4gKlxuICogQXMgcGVyIFFSIENvZGUgc3BlY2lmaWNhdGlvbiwgdG8gZWFjaCBjaGFyYWN0ZXJcbiAqIGlzIGFzc2lnbmVkIGEgdmFsdWUgZnJvbSAwIHRvIDQ0IHdoaWNoIGluIHRoaXMgY2FzZSBjb2luY2lkZXNcbiAqIHdpdGggdGhlIGFycmF5IGluZGV4XG4gKlxuICogQHR5cGUge0FycmF5fVxuICovXG52YXIgQUxQSEFfTlVNX0NIQVJTID0gW1xuICAnMCcsICcxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsXG4gICdBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJyxcbiAgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onLFxuICAnICcsICckJywgJyUnLCAnKicsICcrJywgJy0nLCAnLicsICcvJywgJzonXG5dXG5cbmZ1bmN0aW9uIEFscGhhbnVtZXJpY0RhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5BTFBIQU5VTUVSSUNcbiAgdGhpcy5kYXRhID0gZGF0YVxufVxuXG5BbHBoYW51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIDExICogTWF0aC5mbG9vcihsZW5ndGggLyAyKSArIDYgKiAobGVuZ3RoICUgMilcbn1cblxuQWxwaGFudW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuQWxwaGFudW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKCkge1xuICByZXR1cm4gQWxwaGFudW1lcmljRGF0YS5nZXRCaXRzTGVuZ3RoKHRoaXMuZGF0YS5sZW5ndGgpXG59XG5cbkFscGhhbnVtZXJpY0RhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKGJpdEJ1ZmZlcikge1xuICB2YXIgaVxuXG4gIC8vIElucHV0IGRhdGEgY2hhcmFjdGVycyBhcmUgZGl2aWRlZCBpbnRvIGdyb3VwcyBvZiB0d28gY2hhcmFjdGVyc1xuICAvLyBhbmQgZW5jb2RlZCBhcyAxMS1iaXQgYmluYXJ5IGNvZGVzLlxuICBmb3IgKGkgPSAwOyBpICsgMiA8PSB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAvLyBUaGUgY2hhcmFjdGVyIHZhbHVlIG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgaXMgbXVsdGlwbGllZCBieSA0NVxuICAgIHZhciB2YWx1ZSA9IEFMUEhBX05VTV9DSEFSUy5pbmRleE9mKHRoaXMuZGF0YVtpXSkgKiA0NVxuXG4gICAgLy8gVGhlIGNoYXJhY3RlciB2YWx1ZSBvZiB0aGUgc2Vjb25kIGRpZ2l0IGlzIGFkZGVkIHRvIHRoZSBwcm9kdWN0XG4gICAgdmFsdWUgKz0gQUxQSEFfTlVNX0NIQVJTLmluZGV4T2YodGhpcy5kYXRhW2kgKyAxXSlcblxuICAgIC8vIFRoZSBzdW0gaXMgdGhlbiBzdG9yZWQgYXMgMTEtYml0IGJpbmFyeSBudW1iZXJcbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMSlcbiAgfVxuXG4gIC8vIElmIHRoZSBudW1iZXIgb2YgaW5wdXQgZGF0YSBjaGFyYWN0ZXJzIGlzIG5vdCBhIG11bHRpcGxlIG9mIHR3byxcbiAgLy8gdGhlIGNoYXJhY3RlciB2YWx1ZSBvZiB0aGUgZmluYWwgY2hhcmFjdGVyIGlzIGVuY29kZWQgYXMgYSA2LWJpdCBiaW5hcnkgbnVtYmVyLlxuICBpZiAodGhpcy5kYXRhLmxlbmd0aCAlIDIpIHtcbiAgICBiaXRCdWZmZXIucHV0KEFMUEhBX05VTV9DSEFSUy5pbmRleE9mKHRoaXMuZGF0YVtpXSksIDYpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbHBoYW51bWVyaWNEYXRhXG4iXSwibmFtZXMiOlsiTW9kZSIsInJlcXVpcmUiLCJBTFBIQV9OVU1fQ0hBUlMiLCJBbHBoYW51bWVyaWNEYXRhIiwiZGF0YSIsIm1vZGUiLCJBTFBIQU5VTUVSSUMiLCJnZXRCaXRzTGVuZ3RoIiwibGVuZ3RoIiwiTWF0aCIsImZsb29yIiwicHJvdG90eXBlIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJpIiwidmFsdWUiLCJpbmRleE9mIiwicHV0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/alphanumeric-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/bit-buffer.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/bit-buffer.js ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
eval("\nfunction BitBuffer() {\n    this.buffer = [];\n    this.length = 0;\n}\nBitBuffer.prototype = {\n    get: function(index) {\n        var bufIndex = Math.floor(index / 8);\n        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\n    },\n    put: function(num, length) {\n        for(var i = 0; i < length; i++){\n            this.putBit((num >>> length - i - 1 & 1) === 1);\n        }\n    },\n    getLengthInBits: function() {\n        return this.length;\n    },\n    putBit: function(bit) {\n        var bufIndex = Math.floor(this.length / 8);\n        if (this.buffer.length <= bufIndex) {\n            this.buffer.push(0);\n        }\n        if (bit) {\n            this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n        }\n        this.length++;\n    }\n};\nmodule.exports = BitBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2JpdC1idWZmZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBLFNBQVNBO0lBQ1AsSUFBSSxDQUFDQyxNQUFNLEdBQUcsRUFBRTtJQUNoQixJQUFJLENBQUNDLE1BQU0sR0FBRztBQUNoQjtBQUVBRixVQUFVRyxTQUFTLEdBQUc7SUFFcEJDLEtBQUssU0FBVUMsS0FBSztRQUNsQixJQUFJQyxXQUFXQyxLQUFLQyxLQUFLLENBQUNILFFBQVE7UUFDbEMsT0FBTyxDQUFDLElBQUssQ0FBQ0osTUFBTSxDQUFDSyxTQUFTLEtBQU0sSUFBSUQsUUFBUSxJQUFNLE9BQU87SUFDL0Q7SUFFQUksS0FBSyxTQUFVQyxHQUFHLEVBQUVSLE1BQU07UUFDeEIsSUFBSyxJQUFJUyxJQUFJLEdBQUdBLElBQUlULFFBQVFTLElBQUs7WUFDL0IsSUFBSSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxRQUFVVixTQUFTUyxJQUFJLElBQU0sT0FBTztRQUNuRDtJQUNGO0lBRUFFLGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDWCxNQUFNO0lBQ3BCO0lBRUFVLFFBQVEsU0FBVUUsR0FBRztRQUNuQixJQUFJUixXQUFXQyxLQUFLQyxLQUFLLENBQUMsSUFBSSxDQUFDTixNQUFNLEdBQUc7UUFDeEMsSUFBSSxJQUFJLENBQUNELE1BQU0sQ0FBQ0MsTUFBTSxJQUFJSSxVQUFVO1lBQ2xDLElBQUksQ0FBQ0wsTUFBTSxDQUFDYyxJQUFJLENBQUM7UUFDbkI7UUFFQSxJQUFJRCxLQUFLO1lBQ1AsSUFBSSxDQUFDYixNQUFNLENBQUNLLFNBQVMsSUFBSyxTQUFVLElBQUksQ0FBQ0osTUFBTSxHQUFHO1FBQ3BEO1FBRUEsSUFBSSxDQUFDQSxNQUFNO0lBQ2I7QUFDRjtBQUVBYyxPQUFPQyxPQUFPLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9iaXQtYnVmZmVyLmpzPzdkZTAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gQml0QnVmZmVyICgpIHtcbiAgdGhpcy5idWZmZXIgPSBbXVxuICB0aGlzLmxlbmd0aCA9IDBcbn1cblxuQml0QnVmZmVyLnByb3RvdHlwZSA9IHtcblxuICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciBidWZJbmRleCA9IE1hdGguZmxvb3IoaW5kZXggLyA4KVxuICAgIHJldHVybiAoKHRoaXMuYnVmZmVyW2J1ZkluZGV4XSA+Pj4gKDcgLSBpbmRleCAlIDgpKSAmIDEpID09PSAxXG4gIH0sXG5cbiAgcHV0OiBmdW5jdGlvbiAobnVtLCBsZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnB1dEJpdCgoKG51bSA+Pj4gKGxlbmd0aCAtIGkgLSAxKSkgJiAxKSA9PT0gMSlcbiAgICB9XG4gIH0sXG5cbiAgZ2V0TGVuZ3RoSW5CaXRzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoXG4gIH0sXG5cbiAgcHV0Qml0OiBmdW5jdGlvbiAoYml0KSB7XG4gICAgdmFyIGJ1ZkluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmxlbmd0aCAvIDgpXG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8PSBidWZJbmRleCkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaCgwKVxuICAgIH1cblxuICAgIGlmIChiaXQpIHtcbiAgICAgIHRoaXMuYnVmZmVyW2J1ZkluZGV4XSB8PSAoMHg4MCA+Pj4gKHRoaXMubGVuZ3RoICUgOCkpXG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGgrK1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQml0QnVmZmVyXG4iXSwibmFtZXMiOlsiQml0QnVmZmVyIiwiYnVmZmVyIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiZ2V0IiwiaW5kZXgiLCJidWZJbmRleCIsIk1hdGgiLCJmbG9vciIsInB1dCIsIm51bSIsImkiLCJwdXRCaXQiLCJnZXRMZW5ndGhJbkJpdHMiLCJiaXQiLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/bit-buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/bit-matrix.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/bit-matrix.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/./node_modules/qrcode/lib/utils/buffer.js\");\n/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */ function BitMatrix(size) {\n    if (!size || size < 1) {\n        throw new Error(\"BitMatrix size must be defined and greater than 0\");\n    }\n    this.size = size;\n    this.data = BufferUtil.alloc(size * size);\n    this.reservedBit = BufferUtil.alloc(size * size);\n}\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */ BitMatrix.prototype.set = function(row, col, value, reserved) {\n    var index = row * this.size + col;\n    this.data[index] = value;\n    if (reserved) this.reservedBit[index] = true;\n};\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */ BitMatrix.prototype.get = function(row, col) {\n    return this.data[row * this.size + col];\n};\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */ BitMatrix.prototype.xor = function(row, col, value) {\n    this.data[row * this.size + col] ^= value;\n};\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */ BitMatrix.prototype.isReserved = function(row, col) {\n    return this.reservedBit[row * this.size + col];\n};\nmodule.exports = BitMatrix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2JpdC1tYXRyaXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGFBQWFDLG1CQUFPQSxDQUFDO0FBRXpCOzs7O0NBSUMsR0FDRCxTQUFTQyxVQUFXQyxJQUFJO0lBQ3RCLElBQUksQ0FBQ0EsUUFBUUEsT0FBTyxHQUFHO1FBQ3JCLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtJQUVBLElBQUksQ0FBQ0QsSUFBSSxHQUFHQTtJQUNaLElBQUksQ0FBQ0UsSUFBSSxHQUFHTCxXQUFXTSxLQUFLLENBQUNILE9BQU9BO0lBQ3BDLElBQUksQ0FBQ0ksV0FBVyxHQUFHUCxXQUFXTSxLQUFLLENBQUNILE9BQU9BO0FBQzdDO0FBRUE7Ozs7Ozs7O0NBUUMsR0FDREQsVUFBVU0sU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBVUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsUUFBUTtJQUMzRCxJQUFJQyxRQUFRSixNQUFNLElBQUksQ0FBQ1AsSUFBSSxHQUFHUTtJQUM5QixJQUFJLENBQUNOLElBQUksQ0FBQ1MsTUFBTSxHQUFHRjtJQUNuQixJQUFJQyxVQUFVLElBQUksQ0FBQ04sV0FBVyxDQUFDTyxNQUFNLEdBQUc7QUFDMUM7QUFFQTs7Ozs7O0NBTUMsR0FDRFosVUFBVU0sU0FBUyxDQUFDTyxHQUFHLEdBQUcsU0FBVUwsR0FBRyxFQUFFQyxHQUFHO0lBQzFDLE9BQU8sSUFBSSxDQUFDTixJQUFJLENBQUNLLE1BQU0sSUFBSSxDQUFDUCxJQUFJLEdBQUdRLElBQUk7QUFDekM7QUFFQTs7Ozs7OztDQU9DLEdBQ0RULFVBQVVNLFNBQVMsQ0FBQ1EsR0FBRyxHQUFHLFNBQVVOLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxLQUFLO0lBQ2pELElBQUksQ0FBQ1AsSUFBSSxDQUFDSyxNQUFNLElBQUksQ0FBQ1AsSUFBSSxHQUFHUSxJQUFJLElBQUlDO0FBQ3RDO0FBRUE7Ozs7OztDQU1DLEdBQ0RWLFVBQVVNLFNBQVMsQ0FBQ1MsVUFBVSxHQUFHLFNBQVVQLEdBQUcsRUFBRUMsR0FBRztJQUNqRCxPQUFPLElBQUksQ0FBQ0osV0FBVyxDQUFDRyxNQUFNLElBQUksQ0FBQ1AsSUFBSSxHQUFHUSxJQUFJO0FBQ2hEO0FBRUFPLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2JpdC1tYXRyaXguanM/NmViNSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWxzL2J1ZmZlcicpXG5cbi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGhhbmRsZSBRUiBDb2RlIHN5bWJvbCBtb2R1bGVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHNpemUgU3ltYm9sIHNpemVcbiAqL1xuZnVuY3Rpb24gQml0TWF0cml4IChzaXplKSB7XG4gIGlmICghc2l6ZSB8fCBzaXplIDwgMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQml0TWF0cml4IHNpemUgbXVzdCBiZSBkZWZpbmVkIGFuZCBncmVhdGVyIHRoYW4gMCcpXG4gIH1cblxuICB0aGlzLnNpemUgPSBzaXplXG4gIHRoaXMuZGF0YSA9IEJ1ZmZlclV0aWwuYWxsb2Moc2l6ZSAqIHNpemUpXG4gIHRoaXMucmVzZXJ2ZWRCaXQgPSBCdWZmZXJVdGlsLmFsbG9jKHNpemUgKiBzaXplKVxufVxuXG4vKipcbiAqIFNldCBiaXQgdmFsdWUgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKiBJZiByZXNlcnZlZCBmbGFnIGlzIHNldCwgdGhpcyBiaXQgd2lsbCBiZSBpZ25vcmVkIGR1cmluZyBtYXNraW5nIHByb2Nlc3NcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICBjb2xcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVzZXJ2ZWRcbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAocm93LCBjb2wsIHZhbHVlLCByZXNlcnZlZCkge1xuICB2YXIgaW5kZXggPSByb3cgKiB0aGlzLnNpemUgKyBjb2xcbiAgdGhpcy5kYXRhW2luZGV4XSA9IHZhbHVlXG4gIGlmIChyZXNlcnZlZCkgdGhpcy5yZXNlcnZlZEJpdFtpbmRleF0gPSB0cnVlXG59XG5cbi8qKlxuICogUmV0dXJucyBiaXQgdmFsdWUgYXQgc3BlY2lmaWVkIGxvY2F0aW9uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgcm93XG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICBjb2xcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkJpdE1hdHJpeC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gIHJldHVybiB0aGlzLmRhdGFbcm93ICogdGhpcy5zaXplICsgY29sXVxufVxuXG4vKipcbiAqIEFwcGxpZXMgeG9yIG9wZXJhdG9yIGF0IHNwZWNpZmllZCBsb2NhdGlvblxuICogKHVzZWQgZHVyaW5nIG1hc2tpbmcgcHJvY2VzcylcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICBjb2xcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWVcbiAqL1xuQml0TWF0cml4LnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiAocm93LCBjb2wsIHZhbHVlKSB7XG4gIHRoaXMuZGF0YVtyb3cgKiB0aGlzLnNpemUgKyBjb2xdIF49IHZhbHVlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYml0IGF0IHNwZWNpZmllZCBsb2NhdGlvbiBpcyByZXNlcnZlZFxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSAgIHJvd1xuICogQHBhcmFtIHtOdW1iZXJ9ICAgY29sXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5CaXRNYXRyaXgucHJvdG90eXBlLmlzUmVzZXJ2ZWQgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgcmV0dXJuIHRoaXMucmVzZXJ2ZWRCaXRbcm93ICogdGhpcy5zaXplICsgY29sXVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJpdE1hdHJpeFxuIl0sIm5hbWVzIjpbIkJ1ZmZlclV0aWwiLCJyZXF1aXJlIiwiQml0TWF0cml4Iiwic2l6ZSIsIkVycm9yIiwiZGF0YSIsImFsbG9jIiwicmVzZXJ2ZWRCaXQiLCJwcm90b3R5cGUiLCJzZXQiLCJyb3ciLCJjb2wiLCJ2YWx1ZSIsInJlc2VydmVkIiwiaW5kZXgiLCJnZXQiLCJ4b3IiLCJpc1Jlc2VydmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/bit-matrix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/byte-data.js":
/*!***************************************************!*\
  !*** ./node_modules/qrcode/lib/core/byte-data.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/./node_modules/qrcode/lib/utils/buffer.js\");\nvar Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qrcode/lib/core/mode.js\");\nfunction ByteData(data) {\n    this.mode = Mode.BYTE;\n    this.data = BufferUtil.from(data);\n}\nByteData.getBitsLength = function getBitsLength(length) {\n    return length * 8;\n};\nByteData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nByteData.prototype.getBitsLength = function getBitsLength() {\n    return ByteData.getBitsLength(this.data.length);\n};\nByteData.prototype.write = function(bitBuffer) {\n    for(var i = 0, l = this.data.length; i < l; i++){\n        bitBuffer.put(this.data[i], 8);\n    }\n};\nmodule.exports = ByteData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2J5dGUtZGF0YS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDekIsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUM7QUFFbkIsU0FBU0UsU0FBVUMsSUFBSTtJQUNyQixJQUFJLENBQUNDLElBQUksR0FBR0gsS0FBS0ksSUFBSTtJQUNyQixJQUFJLENBQUNGLElBQUksR0FBR0osV0FBV08sSUFBSSxDQUFDSDtBQUM5QjtBQUVBRCxTQUFTSyxhQUFhLEdBQUcsU0FBU0EsY0FBZUMsTUFBTTtJQUNyRCxPQUFPQSxTQUFTO0FBQ2xCO0FBRUFOLFNBQVNPLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVNBO0lBQ3RDLE9BQU8sSUFBSSxDQUFDUCxJQUFJLENBQUNLLE1BQU07QUFDekI7QUFFQU4sU0FBU08sU0FBUyxDQUFDRixhQUFhLEdBQUcsU0FBU0E7SUFDMUMsT0FBT0wsU0FBU0ssYUFBYSxDQUFDLElBQUksQ0FBQ0osSUFBSSxDQUFDSyxNQUFNO0FBQ2hEO0FBRUFOLFNBQVNPLFNBQVMsQ0FBQ0UsS0FBSyxHQUFHLFNBQVVDLFNBQVM7SUFDNUMsSUFBSyxJQUFJQyxJQUFJLEdBQUdDLElBQUksSUFBSSxDQUFDWCxJQUFJLENBQUNLLE1BQU0sRUFBRUssSUFBSUMsR0FBR0QsSUFBSztRQUNoREQsVUFBVUcsR0FBRyxDQUFDLElBQUksQ0FBQ1osSUFBSSxDQUFDVSxFQUFFLEVBQUU7SUFDOUI7QUFDRjtBQUVBRyxPQUFPQyxPQUFPLEdBQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2J5dGUtZGF0YS5qcz85MWU2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcbnZhciBNb2RlID0gcmVxdWlyZSgnLi9tb2RlJylcblxuZnVuY3Rpb24gQnl0ZURhdGEgKGRhdGEpIHtcbiAgdGhpcy5tb2RlID0gTW9kZS5CWVRFXG4gIHRoaXMuZGF0YSA9IEJ1ZmZlclV0aWwuZnJvbShkYXRhKVxufVxuXG5CeXRlRGF0YS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAobGVuZ3RoKSB7XG4gIHJldHVybiBsZW5ndGggKiA4XG59XG5cbkJ5dGVEYXRhLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiBnZXRMZW5ndGggKCkge1xuICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxufVxuXG5CeXRlRGF0YS5wcm90b3R5cGUuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKCkge1xuICByZXR1cm4gQnl0ZURhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5CeXRlRGF0YS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYml0QnVmZmVyKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5kYXRhLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGJpdEJ1ZmZlci5wdXQodGhpcy5kYXRhW2ldLCA4KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQnl0ZURhdGFcbiJdLCJuYW1lcyI6WyJCdWZmZXJVdGlsIiwicmVxdWlyZSIsIk1vZGUiLCJCeXRlRGF0YSIsImRhdGEiLCJtb2RlIiwiQllURSIsImZyb20iLCJnZXRCaXRzTGVuZ3RoIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJpIiwibCIsInB1dCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/byte-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/error-correction-code.js":
/*!***************************************************************!*\
  !*** ./node_modules/qrcode/lib/core/error-correction-code.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/qrcode/lib/core/error-correction-level.js\");\nvar EC_BLOCKS_TABLE = [\n    // L  M  Q  H\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    1,\n    2,\n    2,\n    4,\n    1,\n    2,\n    4,\n    4,\n    2,\n    4,\n    4,\n    4,\n    2,\n    4,\n    6,\n    5,\n    2,\n    4,\n    6,\n    6,\n    2,\n    5,\n    8,\n    8,\n    4,\n    5,\n    8,\n    8,\n    4,\n    5,\n    8,\n    11,\n    4,\n    8,\n    10,\n    11,\n    4,\n    9,\n    12,\n    16,\n    4,\n    9,\n    16,\n    16,\n    6,\n    10,\n    12,\n    18,\n    6,\n    10,\n    17,\n    16,\n    6,\n    11,\n    16,\n    19,\n    6,\n    13,\n    18,\n    21,\n    7,\n    14,\n    21,\n    25,\n    8,\n    16,\n    20,\n    25,\n    8,\n    17,\n    23,\n    25,\n    9,\n    17,\n    23,\n    34,\n    9,\n    18,\n    25,\n    30,\n    10,\n    20,\n    27,\n    32,\n    12,\n    21,\n    29,\n    35,\n    12,\n    23,\n    34,\n    37,\n    12,\n    25,\n    34,\n    40,\n    13,\n    26,\n    35,\n    42,\n    14,\n    28,\n    38,\n    45,\n    15,\n    29,\n    40,\n    48,\n    16,\n    31,\n    43,\n    51,\n    17,\n    33,\n    45,\n    54,\n    18,\n    35,\n    48,\n    57,\n    19,\n    37,\n    51,\n    60,\n    19,\n    38,\n    53,\n    63,\n    20,\n    40,\n    56,\n    66,\n    21,\n    43,\n    59,\n    70,\n    22,\n    45,\n    62,\n    74,\n    24,\n    47,\n    65,\n    77,\n    25,\n    49,\n    68,\n    81\n];\nvar EC_CODEWORDS_TABLE = [\n    // L  M  Q  H\n    7,\n    10,\n    13,\n    17,\n    10,\n    16,\n    22,\n    28,\n    15,\n    26,\n    36,\n    44,\n    20,\n    36,\n    52,\n    64,\n    26,\n    48,\n    72,\n    88,\n    36,\n    64,\n    96,\n    112,\n    40,\n    72,\n    108,\n    130,\n    48,\n    88,\n    132,\n    156,\n    60,\n    110,\n    160,\n    192,\n    72,\n    130,\n    192,\n    224,\n    80,\n    150,\n    224,\n    264,\n    96,\n    176,\n    260,\n    308,\n    104,\n    198,\n    288,\n    352,\n    120,\n    216,\n    320,\n    384,\n    132,\n    240,\n    360,\n    432,\n    144,\n    280,\n    408,\n    480,\n    168,\n    308,\n    448,\n    532,\n    180,\n    338,\n    504,\n    588,\n    196,\n    364,\n    546,\n    650,\n    224,\n    416,\n    600,\n    700,\n    224,\n    442,\n    644,\n    750,\n    252,\n    476,\n    690,\n    816,\n    270,\n    504,\n    750,\n    900,\n    300,\n    560,\n    810,\n    960,\n    312,\n    588,\n    870,\n    1050,\n    336,\n    644,\n    952,\n    1110,\n    360,\n    700,\n    1020,\n    1200,\n    390,\n    728,\n    1050,\n    1260,\n    420,\n    784,\n    1140,\n    1350,\n    450,\n    812,\n    1200,\n    1440,\n    480,\n    868,\n    1290,\n    1530,\n    510,\n    924,\n    1350,\n    1620,\n    540,\n    980,\n    1440,\n    1710,\n    570,\n    1036,\n    1530,\n    1800,\n    570,\n    1064,\n    1590,\n    1890,\n    600,\n    1120,\n    1680,\n    1980,\n    630,\n    1204,\n    1770,\n    2100,\n    660,\n    1260,\n    1860,\n    2220,\n    720,\n    1316,\n    1950,\n    2310,\n    750,\n    1372,\n    2040,\n    2430\n];\n/**\r\n * Returns the number of error correction block that the QR Code should contain\r\n * for the specified version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction blocks\r\n */ exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {\n    switch(errorCorrectionLevel){\n        case ECLevel.L:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];\n        case ECLevel.M:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];\n        case ECLevel.Q:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];\n        case ECLevel.H:\n            return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];\n        default:\n            return undefined;\n    }\n};\n/**\r\n * Returns the number of error correction codewords to use for the specified\r\n * version and error correction level.\r\n *\r\n * @param  {Number} version              QR Code version\r\n * @param  {Number} errorCorrectionLevel Error correction level\r\n * @return {Number}                      Number of error correction codewords\r\n */ exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {\n    switch(errorCorrectionLevel){\n        case ECLevel.L:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];\n        case ECLevel.M:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];\n        case ECLevel.Q:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];\n        case ECLevel.H:\n            return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];\n        default:\n            return undefined;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/error-correction-code.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/error-correction-level.js":
/*!****************************************************************!*\
  !*** ./node_modules/qrcode/lib/core/error-correction-level.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("exports.L = {\n    bit: 1\n};\nexports.M = {\n    bit: 0\n};\nexports.Q = {\n    bit: 3\n};\nexports.H = {\n    bit: 2\n};\nfunction fromString(string) {\n    if (typeof string !== \"string\") {\n        throw new Error(\"Param is not a string\");\n    }\n    var lcStr = string.toLowerCase();\n    switch(lcStr){\n        case \"l\":\n        case \"low\":\n            return exports.L;\n        case \"m\":\n        case \"medium\":\n            return exports.M;\n        case \"q\":\n        case \"quartile\":\n            return exports.Q;\n        case \"h\":\n        case \"high\":\n            return exports.H;\n        default:\n            throw new Error(\"Unknown EC Level: \" + string);\n    }\n}\nexports.isValid = function isValid(level) {\n    return level && typeof level.bit !== \"undefined\" && level.bit >= 0 && level.bit < 4;\n};\nexports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n        return value;\n    }\n    try {\n        return fromString(value);\n    } catch (e) {\n        return defaultValue;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2Vycm9yLWNvcnJlY3Rpb24tbGV2ZWwuanMiLCJtYXBwaW5ncyI6IkFBQUFBLFNBQVMsR0FBRztJQUFFRSxLQUFLO0FBQUU7QUFDckJGLFNBQVMsR0FBRztJQUFFRSxLQUFLO0FBQUU7QUFDckJGLFNBQVMsR0FBRztJQUFFRSxLQUFLO0FBQUU7QUFDckJGLFNBQVMsR0FBRztJQUFFRSxLQUFLO0FBQUU7QUFFckIsU0FBU0ksV0FBWUMsTUFBTTtJQUN6QixJQUFJLE9BQU9BLFdBQVcsVUFBVTtRQUM5QixNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQSxJQUFJQyxRQUFRRixPQUFPRyxXQUFXO0lBRTlCLE9BQVFEO1FBQ04sS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPVCxRQUFRQyxDQUFDO1FBRWxCLEtBQUs7UUFDTCxLQUFLO1lBQ0gsT0FBT0QsUUFBUUcsQ0FBQztRQUVsQixLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9ILFFBQVFJLENBQUM7UUFFbEIsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPSixRQUFRSyxDQUFDO1FBRWxCO1lBQ0UsTUFBTSxJQUFJRyxNQUFNLHVCQUF1QkQ7SUFDM0M7QUFDRjtBQUVBUCxlQUFlLEdBQUcsU0FBU1csUUFBU0MsS0FBSztJQUN2QyxPQUFPQSxTQUFTLE9BQU9BLE1BQU1WLEdBQUcsS0FBSyxlQUNuQ1UsTUFBTVYsR0FBRyxJQUFJLEtBQUtVLE1BQU1WLEdBQUcsR0FBRztBQUNsQztBQUVBRixZQUFZLEdBQUcsU0FBU2EsS0FBTUMsS0FBSyxFQUFFQyxZQUFZO0lBQy9DLElBQUlmLFFBQVFXLE9BQU8sQ0FBQ0csUUFBUTtRQUMxQixPQUFPQTtJQUNUO0lBRUEsSUFBSTtRQUNGLE9BQU9SLFdBQVdRO0lBQ3BCLEVBQUUsT0FBT0UsR0FBRztRQUNWLE9BQU9EO0lBQ1Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9lcnJvci1jb3JyZWN0aW9uLWxldmVsLmpzPzE1NzkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5MID0geyBiaXQ6IDEgfVxuZXhwb3J0cy5NID0geyBiaXQ6IDAgfVxuZXhwb3J0cy5RID0geyBiaXQ6IDMgfVxuZXhwb3J0cy5IID0geyBiaXQ6IDIgfVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQYXJhbSBpcyBub3QgYSBzdHJpbmcnKVxuICB9XG5cbiAgdmFyIGxjU3RyID0gc3RyaW5nLnRvTG93ZXJDYXNlKClcblxuICBzd2l0Y2ggKGxjU3RyKSB7XG4gICAgY2FzZSAnbCc6XG4gICAgY2FzZSAnbG93JzpcbiAgICAgIHJldHVybiBleHBvcnRzLkxcblxuICAgIGNhc2UgJ20nOlxuICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5NXG5cbiAgICBjYXNlICdxJzpcbiAgICBjYXNlICdxdWFydGlsZSc6XG4gICAgICByZXR1cm4gZXhwb3J0cy5RXG5cbiAgICBjYXNlICdoJzpcbiAgICBjYXNlICdoaWdoJzpcbiAgICAgIHJldHVybiBleHBvcnRzLkhcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gRUMgTGV2ZWw6ICcgKyBzdHJpbmcpXG4gIH1cbn1cblxuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAobGV2ZWwpIHtcbiAgcmV0dXJuIGxldmVsICYmIHR5cGVvZiBsZXZlbC5iaXQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgbGV2ZWwuYml0ID49IDAgJiYgbGV2ZWwuYml0IDwgNFxufVxuXG5leHBvcnRzLmZyb20gPSBmdW5jdGlvbiBmcm9tICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIGlmIChleHBvcnRzLmlzVmFsaWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVxuICB9XG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsIkwiLCJiaXQiLCJNIiwiUSIsIkgiLCJmcm9tU3RyaW5nIiwic3RyaW5nIiwiRXJyb3IiLCJsY1N0ciIsInRvTG93ZXJDYXNlIiwiaXNWYWxpZCIsImxldmVsIiwiZnJvbSIsInZhbHVlIiwiZGVmYXVsdFZhbHVlIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/error-correction-level.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/finder-pattern.js":
/*!********************************************************!*\
  !*** ./node_modules/qrcode/lib/core/finder-pattern.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var getSymbolSize = (__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/core/utils.js\").getSymbolSize);\nvar FINDER_PATTERN_SIZE = 7;\n/**\n * Returns an array containing the positions of each finder pattern.\n * Each array's element represent the top-left point of the pattern as (x, y) coordinates\n *\n * @param  {Number} version QR Code version\n * @return {Array}          Array of coordinates\n */ exports.getPositions = function getPositions(version) {\n    var size = getSymbolSize(version);\n    return [\n        // top-left\n        [\n            0,\n            0\n        ],\n        // top-right\n        [\n            size - FINDER_PATTERN_SIZE,\n            0\n        ],\n        // bottom-left\n        [\n            0,\n            size - FINDER_PATTERN_SIZE\n        ]\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2ZpbmRlci1wYXR0ZXJuLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLGdCQUFnQkMsbUdBQWdDO0FBQ3BELElBQUlDLHNCQUFzQjtBQUUxQjs7Ozs7O0NBTUMsR0FDREMsb0JBQW9CLEdBQUcsU0FBU0MsYUFBY0MsT0FBTztJQUNuRCxJQUFJQyxPQUFPTixjQUFjSztJQUV6QixPQUFPO1FBQ0wsV0FBVztRQUNYO1lBQUM7WUFBRztTQUFFO1FBQ04sWUFBWTtRQUNaO1lBQUNDLE9BQU9KO1lBQXFCO1NBQUU7UUFDL0IsY0FBYztRQUNkO1lBQUM7WUFBR0ksT0FBT0o7U0FBb0I7S0FDaEM7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9maW5kZXItcGF0dGVybi5qcz9hMDM3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRTeW1ib2xTaXplID0gcmVxdWlyZSgnLi91dGlscycpLmdldFN5bWJvbFNpemVcbnZhciBGSU5ERVJfUEFUVEVSTl9TSVpFID0gN1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgcG9zaXRpb25zIG9mIGVhY2ggZmluZGVyIHBhdHRlcm4uXG4gKiBFYWNoIGFycmF5J3MgZWxlbWVudCByZXByZXNlbnQgdGhlIHRvcC1sZWZ0IHBvaW50IG9mIHRoZSBwYXR0ZXJuIGFzICh4LCB5KSBjb29yZGluYXRlc1xuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0FycmF5fSAgICAgICAgICBBcnJheSBvZiBjb29yZGluYXRlc1xuICovXG5leHBvcnRzLmdldFBvc2l0aW9ucyA9IGZ1bmN0aW9uIGdldFBvc2l0aW9ucyAodmVyc2lvbikge1xuICB2YXIgc2l6ZSA9IGdldFN5bWJvbFNpemUodmVyc2lvbilcblxuICByZXR1cm4gW1xuICAgIC8vIHRvcC1sZWZ0XG4gICAgWzAsIDBdLFxuICAgIC8vIHRvcC1yaWdodFxuICAgIFtzaXplIC0gRklOREVSX1BBVFRFUk5fU0laRSwgMF0sXG4gICAgLy8gYm90dG9tLWxlZnRcbiAgICBbMCwgc2l6ZSAtIEZJTkRFUl9QQVRURVJOX1NJWkVdXG4gIF1cbn1cbiJdLCJuYW1lcyI6WyJnZXRTeW1ib2xTaXplIiwicmVxdWlyZSIsIkZJTkRFUl9QQVRURVJOX1NJWkUiLCJleHBvcnRzIiwiZ2V0UG9zaXRpb25zIiwidmVyc2lvbiIsInNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/finder-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/format-info.js":
/*!*****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/format-info.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/core/utils.js\");\nvar G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\nvar G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\nvar G15_BCH = Utils.getBCHDigit(G15);\n/**\n * Returns format information with relative error correction bits\n *\n * The format information is a 15-bit sequence containing 5 data bits,\n * with 10 error correction bits calculated using the (15, 5) BCH code.\n *\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Number} mask                 Mask pattern\n * @return {Number}                      Encoded format information bits\n */ exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {\n    var data = errorCorrectionLevel.bit << 3 | mask;\n    var d = data << 10;\n    while(Utils.getBCHDigit(d) - G15_BCH >= 0){\n        d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;\n    }\n    // xor final data with mask pattern in order to ensure that\n    // no combination of Error Correction Level and data mask pattern\n    // will result in an all-zero data string\n    return (data << 10 | d) ^ G15_MASK;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2Zvcm1hdC1pbmZvLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLElBQUlDLE1BQU0sS0FBTSxLQUFPLEtBQUssSUFBTSxLQUFLLElBQU0sS0FBSyxJQUFNLEtBQUssSUFBTSxLQUFLLElBQU0sS0FBSztBQUNuRixJQUFJQyxXQUFXLEtBQU0sS0FBTyxLQUFLLEtBQU8sS0FBSyxLQUFPLEtBQUssSUFBTSxLQUFLO0FBQ3BFLElBQUlDLFVBQVVKLE1BQU1LLFdBQVcsQ0FBQ0g7QUFFaEM7Ozs7Ozs7OztDQVNDLEdBQ0RJLHNCQUFzQixHQUFHLFNBQVNDLGVBQWdCQyxvQkFBb0IsRUFBRUMsSUFBSTtJQUMxRSxJQUFJQyxPQUFRLHFCQUFzQkMsR0FBRyxJQUFJLElBQUtGO0lBQzlDLElBQUlHLElBQUlGLFFBQVE7SUFFaEIsTUFBT1YsTUFBTUssV0FBVyxDQUFDTyxLQUFLUixXQUFXLEVBQUc7UUFDMUNRLEtBQU1WLE9BQVFGLE1BQU1LLFdBQVcsQ0FBQ08sS0FBS1I7SUFDdkM7SUFFQSwyREFBMkQ7SUFDM0QsaUVBQWlFO0lBQ2pFLHlDQUF5QztJQUN6QyxPQUFPLENBQUMsUUFBUyxLQUFNUSxDQUFBQSxJQUFLVDtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9mb3JtYXQtaW5mby5qcz85MjA5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG52YXIgRzE1ID0gKDEgPDwgMTApIHwgKDEgPDwgOCkgfCAoMSA8PCA1KSB8ICgxIDw8IDQpIHwgKDEgPDwgMikgfCAoMSA8PCAxKSB8ICgxIDw8IDApXG52YXIgRzE1X01BU0sgPSAoMSA8PCAxNCkgfCAoMSA8PCAxMikgfCAoMSA8PCAxMCkgfCAoMSA8PCA0KSB8ICgxIDw8IDEpXG52YXIgRzE1X0JDSCA9IFV0aWxzLmdldEJDSERpZ2l0KEcxNSlcblxuLyoqXG4gKiBSZXR1cm5zIGZvcm1hdCBpbmZvcm1hdGlvbiB3aXRoIHJlbGF0aXZlIGVycm9yIGNvcnJlY3Rpb24gYml0c1xuICpcbiAqIFRoZSBmb3JtYXQgaW5mb3JtYXRpb24gaXMgYSAxNS1iaXQgc2VxdWVuY2UgY29udGFpbmluZyA1IGRhdGEgYml0cyxcbiAqIHdpdGggMTAgZXJyb3IgY29ycmVjdGlvbiBiaXRzIGNhbGN1bGF0ZWQgdXNpbmcgdGhlICgxNSwgNSkgQkNIIGNvZGUuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBlcnJvckNvcnJlY3Rpb25MZXZlbCBFcnJvciBjb3JyZWN0aW9uIGxldmVsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG1hc2sgICAgICAgICAgICAgICAgIE1hc2sgcGF0dGVyblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICBFbmNvZGVkIGZvcm1hdCBpbmZvcm1hdGlvbiBiaXRzXG4gKi9cbmV4cG9ydHMuZ2V0RW5jb2RlZEJpdHMgPSBmdW5jdGlvbiBnZXRFbmNvZGVkQml0cyAoZXJyb3JDb3JyZWN0aW9uTGV2ZWwsIG1hc2spIHtcbiAgdmFyIGRhdGEgPSAoKGVycm9yQ29ycmVjdGlvbkxldmVsLmJpdCA8PCAzKSB8IG1hc2spXG4gIHZhciBkID0gZGF0YSA8PCAxMFxuXG4gIHdoaWxlIChVdGlscy5nZXRCQ0hEaWdpdChkKSAtIEcxNV9CQ0ggPj0gMCkge1xuICAgIGQgXj0gKEcxNSA8PCAoVXRpbHMuZ2V0QkNIRGlnaXQoZCkgLSBHMTVfQkNIKSlcbiAgfVxuXG4gIC8vIHhvciBmaW5hbCBkYXRhIHdpdGggbWFzayBwYXR0ZXJuIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0XG4gIC8vIG5vIGNvbWJpbmF0aW9uIG9mIEVycm9yIENvcnJlY3Rpb24gTGV2ZWwgYW5kIGRhdGEgbWFzayBwYXR0ZXJuXG4gIC8vIHdpbGwgcmVzdWx0IGluIGFuIGFsbC16ZXJvIGRhdGEgc3RyaW5nXG4gIHJldHVybiAoKGRhdGEgPDwgMTApIHwgZCkgXiBHMTVfTUFTS1xufVxuIl0sIm5hbWVzIjpbIlV0aWxzIiwicmVxdWlyZSIsIkcxNSIsIkcxNV9NQVNLIiwiRzE1X0JDSCIsImdldEJDSERpZ2l0IiwiZXhwb3J0cyIsImdldEVuY29kZWRCaXRzIiwiZXJyb3JDb3JyZWN0aW9uTGV2ZWwiLCJtYXNrIiwiZGF0YSIsImJpdCIsImQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/format-info.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/galois-field.js":
/*!******************************************************!*\
  !*** ./node_modules/qrcode/lib/core/galois-field.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/./node_modules/qrcode/lib/utils/buffer.js\");\nvar EXP_TABLE = BufferUtil.alloc(512);\nvar LOG_TABLE = BufferUtil.alloc(256) /**\n * Precompute the log and anti-log tables for faster computation later\n *\n * For each possible value in the galois field 2^8, we will pre-compute\n * the logarithm and anti-logarithm (exponential) of this value\n *\n * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n */ ;\n(function initTables() {\n    var x = 1;\n    for(var i = 0; i < 255; i++){\n        EXP_TABLE[i] = x;\n        LOG_TABLE[x] = i;\n        x <<= 1 // multiply by 2\n        ;\n        // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n        // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n        if (x & 0x100) {\n            x ^= 0x11D;\n        }\n    }\n    // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n    // stay inside the bounds (because we will mainly use this table for the multiplication of\n    // two GF numbers, no more).\n    // @see {@link mul}\n    for(i = 255; i < 512; i++){\n        EXP_TABLE[i] = EXP_TABLE[i - 255];\n    }\n})();\n/**\n * Returns log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */ exports.log = function log(n) {\n    if (n < 1) throw new Error(\"log(\" + n + \")\");\n    return LOG_TABLE[n];\n};\n/**\n * Returns anti-log value of n inside Galois Field\n *\n * @param  {Number} n\n * @return {Number}\n */ exports.exp = function exp(n) {\n    return EXP_TABLE[n];\n};\n/**\n * Multiplies two number inside Galois Field\n *\n * @param  {Number} x\n * @param  {Number} y\n * @return {Number}\n */ exports.mul = function mul(x, y) {\n    if (x === 0 || y === 0) return 0;\n    // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n    // @see {@link initTables}\n    return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2dhbG9pcy1maWVsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUV6QixJQUFJQyxZQUFZRixXQUFXRyxLQUFLLENBQUM7QUFDakMsSUFBSUMsWUFBWUosV0FBV0csS0FBSyxDQUFDLEtBQ2pDOzs7Ozs7O0NBT0M7QUFDQyxVQUFTRTtJQUNULElBQUlDLElBQUk7SUFDUixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxLQUFLQSxJQUFLO1FBQzVCTCxTQUFTLENBQUNLLEVBQUUsR0FBR0Q7UUFDZkYsU0FBUyxDQUFDRSxFQUFFLEdBQUdDO1FBRWZELE1BQU0sRUFBRSxnQkFBZ0I7O1FBRXhCLCtFQUErRTtRQUMvRSxpRkFBaUY7UUFDakYsSUFBSUEsSUFBSSxPQUFPO1lBQ2JBLEtBQUs7UUFDUDtJQUNGO0lBRUEsMEZBQTBGO0lBQzFGLDBGQUEwRjtJQUMxRiw0QkFBNEI7SUFDNUIsbUJBQW1CO0lBQ25CLElBQUtDLElBQUksS0FBS0EsSUFBSSxLQUFLQSxJQUFLO1FBQzFCTCxTQUFTLENBQUNLLEVBQUUsR0FBR0wsU0FBUyxDQUFDSyxJQUFJLElBQUk7SUFDbkM7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ0RDLFdBQVcsR0FBRyxTQUFTQyxJQUFLQyxDQUFDO0lBQzNCLElBQUlBLElBQUksR0FBRyxNQUFNLElBQUlDLE1BQU0sU0FBU0QsSUFBSTtJQUN4QyxPQUFPTixTQUFTLENBQUNNLEVBQUU7QUFDckI7QUFFQTs7Ozs7Q0FLQyxHQUNERixXQUFXLEdBQUcsU0FBU0ksSUFBS0YsQ0FBQztJQUMzQixPQUFPUixTQUFTLENBQUNRLEVBQUU7QUFDckI7QUFFQTs7Ozs7O0NBTUMsR0FDREYsV0FBVyxHQUFHLFNBQVNLLElBQUtQLENBQUMsRUFBRVEsQ0FBQztJQUM5QixJQUFJUixNQUFNLEtBQUtRLE1BQU0sR0FBRyxPQUFPO0lBRS9CLHlGQUF5RjtJQUN6RiwwQkFBMEI7SUFDMUIsT0FBT1osU0FBUyxDQUFDRSxTQUFTLENBQUNFLEVBQUUsR0FBR0YsU0FBUyxDQUFDVSxFQUFFLENBQUM7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvZ2Fsb2lzLWZpZWxkLmpzPzAzODgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEJ1ZmZlclV0aWwgPSByZXF1aXJlKCcuLi91dGlscy9idWZmZXInKVxuXG52YXIgRVhQX1RBQkxFID0gQnVmZmVyVXRpbC5hbGxvYyg1MTIpXG52YXIgTE9HX1RBQkxFID0gQnVmZmVyVXRpbC5hbGxvYygyNTYpXG4vKipcbiAqIFByZWNvbXB1dGUgdGhlIGxvZyBhbmQgYW50aS1sb2cgdGFibGVzIGZvciBmYXN0ZXIgY29tcHV0YXRpb24gbGF0ZXJcbiAqXG4gKiBGb3IgZWFjaCBwb3NzaWJsZSB2YWx1ZSBpbiB0aGUgZ2Fsb2lzIGZpZWxkIDJeOCwgd2Ugd2lsbCBwcmUtY29tcHV0ZVxuICogdGhlIGxvZ2FyaXRobSBhbmQgYW50aS1sb2dhcml0aG0gKGV4cG9uZW50aWFsKSBvZiB0aGlzIHZhbHVlXG4gKlxuICogcmVmIHtAbGluayBodHRwczovL2VuLndpa2l2ZXJzaXR5Lm9yZy93aWtpL1JlZWQlRTIlODAlOTNTb2xvbW9uX2NvZGVzX2Zvcl9jb2RlcnMjSW50cm9kdWN0aW9uX3RvX21hdGhlbWF0aWNhbF9maWVsZHN9XG4gKi9cbjsoZnVuY3Rpb24gaW5pdFRhYmxlcyAoKSB7XG4gIHZhciB4ID0gMVxuICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NTsgaSsrKSB7XG4gICAgRVhQX1RBQkxFW2ldID0geFxuICAgIExPR19UQUJMRVt4XSA9IGlcblxuICAgIHggPDw9IDEgLy8gbXVsdGlwbHkgYnkgMlxuXG4gICAgLy8gVGhlIFFSIGNvZGUgc3BlY2lmaWNhdGlvbiBzYXlzIHRvIHVzZSBieXRlLXdpc2UgbW9kdWxvIDEwMDAxMTEwMSBhcml0aG1ldGljLlxuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB3aGVuIGEgbnVtYmVyIGlzIDI1NiBvciBsYXJnZXIsIGl0IHNob3VsZCBiZSBYT1JlZCB3aXRoIDB4MTFELlxuICAgIGlmICh4ICYgMHgxMDApIHsgLy8gc2ltaWxhciB0byB4ID49IDI1NiwgYnV0IGEgbG90IGZhc3RlciAoYmVjYXVzZSAweDEwMCA9PSAyNTYpXG4gICAgICB4IF49IDB4MTFEXG4gICAgfVxuICB9XG5cbiAgLy8gT3B0aW1pemF0aW9uOiBkb3VibGUgdGhlIHNpemUgb2YgdGhlIGFudGktbG9nIHRhYmxlIHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCB0byBtb2QgMjU1IHRvXG4gIC8vIHN0YXkgaW5zaWRlIHRoZSBib3VuZHMgKGJlY2F1c2Ugd2Ugd2lsbCBtYWlubHkgdXNlIHRoaXMgdGFibGUgZm9yIHRoZSBtdWx0aXBsaWNhdGlvbiBvZlxuICAvLyB0d28gR0YgbnVtYmVycywgbm8gbW9yZSkuXG4gIC8vIEBzZWUge0BsaW5rIG11bH1cbiAgZm9yIChpID0gMjU1OyBpIDwgNTEyOyBpKyspIHtcbiAgICBFWFBfVEFCTEVbaV0gPSBFWFBfVEFCTEVbaSAtIDI1NV1cbiAgfVxufSgpKVxuXG4vKipcbiAqIFJldHVybnMgbG9nIHZhbHVlIG9mIG4gaW5zaWRlIEdhbG9pcyBGaWVsZFxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gblxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uIGxvZyAobikge1xuICBpZiAobiA8IDEpIHRocm93IG5ldyBFcnJvcignbG9nKCcgKyBuICsgJyknKVxuICByZXR1cm4gTE9HX1RBQkxFW25dXG59XG5cbi8qKlxuICogUmV0dXJucyBhbnRpLWxvZyB2YWx1ZSBvZiBuIGluc2lkZSBHYWxvaXMgRmllbGRcbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG5cbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5leHAgPSBmdW5jdGlvbiBleHAgKG4pIHtcbiAgcmV0dXJuIEVYUF9UQUJMRVtuXVxufVxuXG4vKipcbiAqIE11bHRpcGxpZXMgdHdvIG51bWJlciBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB4XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHlcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuZXhwb3J0cy5tdWwgPSBmdW5jdGlvbiBtdWwgKHgsIHkpIHtcbiAgaWYgKHggPT09IDAgfHwgeSA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBzaG91bGQgYmUgRVhQX1RBQkxFWyhMT0dfVEFCTEVbeF0gKyBMT0dfVEFCTEVbeV0pICUgMjU1XSBpZiBFWFBfVEFCTEUgd2Fzbid0IG92ZXJzaXplZFxuICAvLyBAc2VlIHtAbGluayBpbml0VGFibGVzfVxuICByZXR1cm4gRVhQX1RBQkxFW0xPR19UQUJMRVt4XSArIExPR19UQUJMRVt5XV1cbn1cbiJdLCJuYW1lcyI6WyJCdWZmZXJVdGlsIiwicmVxdWlyZSIsIkVYUF9UQUJMRSIsImFsbG9jIiwiTE9HX1RBQkxFIiwiaW5pdFRhYmxlcyIsIngiLCJpIiwiZXhwb3J0cyIsImxvZyIsIm4iLCJFcnJvciIsImV4cCIsIm11bCIsInkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/galois-field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/kanji-data.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/kanji-data.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qrcode/lib/core/mode.js\");\nvar Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/core/utils.js\");\nfunction KanjiData(data) {\n    this.mode = Mode.KANJI;\n    this.data = data;\n}\nKanjiData.getBitsLength = function getBitsLength(length) {\n    return length * 13;\n};\nKanjiData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nKanjiData.prototype.getBitsLength = function getBitsLength() {\n    return KanjiData.getBitsLength(this.data.length);\n};\nKanjiData.prototype.write = function(bitBuffer) {\n    var i;\n    // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n    // These byte values are shifted from the JIS X 0208 values.\n    // JIS X 0208 gives details of the shift coded representation.\n    for(i = 0; i < this.data.length; i++){\n        var value = Utils.toSJIS(this.data[i]);\n        // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n        if (value >= 0x8140 && value <= 0x9FFC) {\n            // Subtract 0x8140 from Shift JIS value\n            value -= 0x8140;\n        // For characters with Shift JIS values from 0xE040 to 0xEBBF\n        } else if (value >= 0xE040 && value <= 0xEBBF) {\n            // Subtract 0xC140 from Shift JIS value\n            value -= 0xC140;\n        } else {\n            throw new Error(\"Invalid SJIS character: \" + this.data[i] + \"\\n\" + \"Make sure your charset is UTF-8\");\n        }\n        // Multiply most significant byte of result by 0xC0\n        // and add least significant byte to product\n        value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff);\n        // Convert result to a 13-bit binary string\n        bitBuffer.put(value, 13);\n    }\n};\nmodule.exports = KanjiData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL2thbmppLWRhdGEuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLFFBQVFELG1CQUFPQSxDQUFDO0FBRXBCLFNBQVNFLFVBQVdDLElBQUk7SUFDdEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdMLEtBQUtNLEtBQUs7SUFDdEIsSUFBSSxDQUFDRixJQUFJLEdBQUdBO0FBQ2Q7QUFFQUQsVUFBVUksYUFBYSxHQUFHLFNBQVNBLGNBQWVDLE1BQU07SUFDdEQsT0FBT0EsU0FBUztBQUNsQjtBQUVBTCxVQUFVTSxTQUFTLENBQUNDLFNBQVMsR0FBRyxTQUFTQTtJQUN2QyxPQUFPLElBQUksQ0FBQ04sSUFBSSxDQUFDSSxNQUFNO0FBQ3pCO0FBRUFMLFVBQVVNLFNBQVMsQ0FBQ0YsYUFBYSxHQUFHLFNBQVNBO0lBQzNDLE9BQU9KLFVBQVVJLGFBQWEsQ0FBQyxJQUFJLENBQUNILElBQUksQ0FBQ0ksTUFBTTtBQUNqRDtBQUVBTCxVQUFVTSxTQUFTLENBQUNFLEtBQUssR0FBRyxTQUFVQyxTQUFTO0lBQzdDLElBQUlDO0lBRUosdUZBQXVGO0lBQ3ZGLDREQUE0RDtJQUM1RCw4REFBOEQ7SUFDOUQsSUFBS0EsSUFBSSxHQUFHQSxJQUFJLElBQUksQ0FBQ1QsSUFBSSxDQUFDSSxNQUFNLEVBQUVLLElBQUs7UUFDckMsSUFBSUMsUUFBUVosTUFBTWEsTUFBTSxDQUFDLElBQUksQ0FBQ1gsSUFBSSxDQUFDUyxFQUFFO1FBRXJDLDhEQUE4RDtRQUM5RCxJQUFJQyxTQUFTLFVBQVVBLFNBQVMsUUFBUTtZQUN0Qyx1Q0FBdUM7WUFDdkNBLFNBQVM7UUFFWCw2REFBNkQ7UUFDN0QsT0FBTyxJQUFJQSxTQUFTLFVBQVVBLFNBQVMsUUFBUTtZQUM3Qyx1Q0FBdUM7WUFDdkNBLFNBQVM7UUFDWCxPQUFPO1lBQ0wsTUFBTSxJQUFJRSxNQUNSLDZCQUE2QixJQUFJLENBQUNaLElBQUksQ0FBQ1MsRUFBRSxHQUFHLE9BQzVDO1FBQ0o7UUFFQSxtREFBbUQ7UUFDbkQsNENBQTRDO1FBQzVDQyxRQUFRLENBQUUsVUFBVyxJQUFLLElBQUcsSUFBSyxPQUFTQSxDQUFBQSxRQUFRLElBQUc7UUFFdEQsMkNBQTJDO1FBQzNDRixVQUFVSyxHQUFHLENBQUNILE9BQU87SUFDdkI7QUFDRjtBQUVBSSxPQUFPQyxPQUFPLEdBQUdoQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9rYW5qaS1kYXRhLmpzPzlhZGYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE1vZGUgPSByZXF1aXJlKCcuL21vZGUnKVxudmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpXG5cbmZ1bmN0aW9uIEthbmppRGF0YSAoZGF0YSkge1xuICB0aGlzLm1vZGUgPSBNb2RlLktBTkpJXG4gIHRoaXMuZGF0YSA9IGRhdGFcbn1cblxuS2FuamlEYXRhLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoIChsZW5ndGgpIHtcbiAgcmV0dXJuIGxlbmd0aCAqIDEzXG59XG5cbkthbmppRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuS2FuamlEYXRhLnByb3RvdHlwZS5nZXRCaXRzTGVuZ3RoID0gZnVuY3Rpb24gZ2V0Qml0c0xlbmd0aCAoKSB7XG4gIHJldHVybiBLYW5qaURhdGEuZ2V0Qml0c0xlbmd0aCh0aGlzLmRhdGEubGVuZ3RoKVxufVxuXG5LYW5qaURhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJpdEJ1ZmZlcikge1xuICB2YXIgaVxuXG4gIC8vIEluIHRoZSBTaGlmdCBKSVMgc3lzdGVtLCBLYW5qaSBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSBhIHR3byBieXRlIGNvbWJpbmF0aW9uLlxuICAvLyBUaGVzZSBieXRlIHZhbHVlcyBhcmUgc2hpZnRlZCBmcm9tIHRoZSBKSVMgWCAwMjA4IHZhbHVlcy5cbiAgLy8gSklTIFggMDIwOCBnaXZlcyBkZXRhaWxzIG9mIHRoZSBzaGlmdCBjb2RlZCByZXByZXNlbnRhdGlvbi5cbiAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWx1ZSA9IFV0aWxzLnRvU0pJUyh0aGlzLmRhdGFbaV0pXG5cbiAgICAvLyBGb3IgY2hhcmFjdGVycyB3aXRoIFNoaWZ0IEpJUyB2YWx1ZXMgZnJvbSAweDgxNDAgdG8gMHg5RkZDOlxuICAgIGlmICh2YWx1ZSA+PSAweDgxNDAgJiYgdmFsdWUgPD0gMHg5RkZDKSB7XG4gICAgICAvLyBTdWJ0cmFjdCAweDgxNDAgZnJvbSBTaGlmdCBKSVMgdmFsdWVcbiAgICAgIHZhbHVlIC09IDB4ODE0MFxuXG4gICAgLy8gRm9yIGNoYXJhY3RlcnMgd2l0aCBTaGlmdCBKSVMgdmFsdWVzIGZyb20gMHhFMDQwIHRvIDB4RUJCRlxuICAgIH0gZWxzZSBpZiAodmFsdWUgPj0gMHhFMDQwICYmIHZhbHVlIDw9IDB4RUJCRikge1xuICAgICAgLy8gU3VidHJhY3QgMHhDMTQwIGZyb20gU2hpZnQgSklTIHZhbHVlXG4gICAgICB2YWx1ZSAtPSAweEMxNDBcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSW52YWxpZCBTSklTIGNoYXJhY3RlcjogJyArIHRoaXMuZGF0YVtpXSArICdcXG4nICtcbiAgICAgICAgJ01ha2Ugc3VyZSB5b3VyIGNoYXJzZXQgaXMgVVRGLTgnKVxuICAgIH1cblxuICAgIC8vIE11bHRpcGx5IG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSBvZiByZXN1bHQgYnkgMHhDMFxuICAgIC8vIGFuZCBhZGQgbGVhc3Qgc2lnbmlmaWNhbnQgYnl0ZSB0byBwcm9kdWN0XG4gICAgdmFsdWUgPSAoKCh2YWx1ZSA+Pj4gOCkgJiAweGZmKSAqIDB4QzApICsgKHZhbHVlICYgMHhmZilcblxuICAgIC8vIENvbnZlcnQgcmVzdWx0IHRvIGEgMTMtYml0IGJpbmFyeSBzdHJpbmdcbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMylcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEthbmppRGF0YVxuIl0sIm5hbWVzIjpbIk1vZGUiLCJyZXF1aXJlIiwiVXRpbHMiLCJLYW5qaURhdGEiLCJkYXRhIiwibW9kZSIsIktBTkpJIiwiZ2V0Qml0c0xlbmd0aCIsImxlbmd0aCIsInByb3RvdHlwZSIsImdldExlbmd0aCIsIndyaXRlIiwiYml0QnVmZmVyIiwiaSIsInZhbHVlIiwidG9TSklTIiwiRXJyb3IiLCJwdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/kanji-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/mask-pattern.js":
/*!******************************************************!*\
  !*** ./node_modules/qrcode/lib/core/mask-pattern.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Data mask pattern reference\n * @type {Object}\n */ exports.Patterns = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7\n};\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */ var PenaltyScores = {\n    N1: 3,\n    N2: 3,\n    N3: 40,\n    N4: 10\n};\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */ exports.isValid = function isValid(mask) {\n    return mask != null && mask !== \"\" && !isNaN(mask) && mask >= 0 && mask <= 7;\n};\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */ exports.from = function from(value) {\n    return exports.isValid(value) ? parseInt(value, 10) : undefined;\n};\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/ exports.getPenaltyN1 = function getPenaltyN1(data) {\n    var size = data.size;\n    var points = 0;\n    var sameCountCol = 0;\n    var sameCountRow = 0;\n    var lastCol = null;\n    var lastRow = null;\n    for(var row = 0; row < size; row++){\n        sameCountCol = sameCountRow = 0;\n        lastCol = lastRow = null;\n        for(var col = 0; col < size; col++){\n            var module = data.get(row, col);\n            if (module === lastCol) {\n                sameCountCol++;\n            } else {\n                if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n                lastCol = module;\n                sameCountCol = 1;\n            }\n            module = data.get(col, row);\n            if (module === lastRow) {\n                sameCountRow++;\n            } else {\n                if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n                lastRow = module;\n                sameCountRow = 1;\n            }\n        }\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n    }\n    return points;\n};\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */ exports.getPenaltyN2 = function getPenaltyN2(data) {\n    var size = data.size;\n    var points = 0;\n    for(var row = 0; row < size - 1; row++){\n        for(var col = 0; col < size - 1; col++){\n            var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);\n            if (last === 4 || last === 0) points++;\n        }\n    }\n    return points * PenaltyScores.N2;\n};\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */ exports.getPenaltyN3 = function getPenaltyN3(data) {\n    var size = data.size;\n    var points = 0;\n    var bitsCol = 0;\n    var bitsRow = 0;\n    for(var row = 0; row < size; row++){\n        bitsCol = bitsRow = 0;\n        for(var col = 0; col < size; col++){\n            bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);\n            if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;\n            bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);\n            if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;\n        }\n    }\n    return points * PenaltyScores.N3;\n};\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */ exports.getPenaltyN4 = function getPenaltyN4(data) {\n    var darkCount = 0;\n    var modulesCount = data.data.length;\n    for(var i = 0; i < modulesCount; i++)darkCount += data.data[i];\n    var k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);\n    return k * PenaltyScores.N4;\n};\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */ function getMaskAt(maskPattern, i, j) {\n    switch(maskPattern){\n        case exports.Patterns.PATTERN000:\n            return (i + j) % 2 === 0;\n        case exports.Patterns.PATTERN001:\n            return i % 2 === 0;\n        case exports.Patterns.PATTERN010:\n            return j % 3 === 0;\n        case exports.Patterns.PATTERN011:\n            return (i + j) % 3 === 0;\n        case exports.Patterns.PATTERN100:\n            return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n        case exports.Patterns.PATTERN101:\n            return i * j % 2 + i * j % 3 === 0;\n        case exports.Patterns.PATTERN110:\n            return (i * j % 2 + i * j % 3) % 2 === 0;\n        case exports.Patterns.PATTERN111:\n            return (i * j % 3 + (i + j) % 2) % 2 === 0;\n        default:\n            throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n}\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */ exports.applyMask = function applyMask(pattern, data) {\n    var size = data.size;\n    for(var col = 0; col < size; col++){\n        for(var row = 0; row < size; row++){\n            if (data.isReserved(row, col)) continue;\n            data.xor(row, col, getMaskAt(pattern, row, col));\n        }\n    }\n};\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */ exports.getBestMask = function getBestMask(data, setupFormatFunc) {\n    var numPatterns = Object.keys(exports.Patterns).length;\n    var bestPattern = 0;\n    var lowerPenalty = Infinity;\n    for(var p = 0; p < numPatterns; p++){\n        setupFormatFunc(p);\n        exports.applyMask(p, data);\n        // Calculate penalty\n        var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);\n        // Undo previously applied mask\n        exports.applyMask(p, data);\n        if (penalty < lowerPenalty) {\n            lowerPenalty = penalty;\n            bestPattern = p;\n        }\n    }\n    return bestPattern;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/mask-pattern.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/mode.js":
/*!**********************************************!*\
  !*** ./node_modules/qrcode/lib/core/mode.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var VersionCheck = __webpack_require__(/*! ./version-check */ \"(ssr)/./node_modules/qrcode/lib/core/version-check.js\");\nvar Regex = __webpack_require__(/*! ./regex */ \"(ssr)/./node_modules/qrcode/lib/core/regex.js\");\n/**\n * Numeric mode encodes data from the decimal digit set (0 - 9)\n * (byte values 30HEX to 39HEX).\n * Normally, 3 data characters are represented by 10 bits.\n *\n * @type {Object}\n */ exports.NUMERIC = {\n    id: \"Numeric\",\n    bit: 1 << 0,\n    ccBits: [\n        10,\n        12,\n        14\n    ]\n};\n/**\n * Alphanumeric mode encodes data from a set of 45 characters,\n * i.e. 10 numeric digits (0 - 9),\n *      26 alphabetic characters (A - Z),\n *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n * Normally, two input characters are represented by 11 bits.\n *\n * @type {Object}\n */ exports.ALPHANUMERIC = {\n    id: \"Alphanumeric\",\n    bit: 1 << 1,\n    ccBits: [\n        9,\n        11,\n        13\n    ]\n};\n/**\n * In byte mode, data is encoded at 8 bits per character.\n *\n * @type {Object}\n */ exports.BYTE = {\n    id: \"Byte\",\n    bit: 1 << 2,\n    ccBits: [\n        8,\n        16,\n        16\n    ]\n};\n/**\n * The Kanji mode efficiently encodes Kanji characters in accordance with\n * the Shift JIS system based on JIS X 0208.\n * The Shift JIS values are shifted from the JIS X 0208 values.\n * JIS X 0208 gives details of the shift coded representation.\n * Each two-byte character value is compacted to a 13-bit binary codeword.\n *\n * @type {Object}\n */ exports.KANJI = {\n    id: \"Kanji\",\n    bit: 1 << 3,\n    ccBits: [\n        8,\n        10,\n        12\n    ]\n};\n/**\n * Mixed mode will contain a sequences of data in a combination of any of\n * the modes described above\n *\n * @type {Object}\n */ exports.MIXED = {\n    bit: -1\n};\n/**\n * Returns the number of bits needed to store the data length\n * according to QR Code specifications.\n *\n * @param  {Mode}   mode    Data mode\n * @param  {Number} version QR Code version\n * @return {Number}         Number of bits\n */ exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n    if (!mode.ccBits) throw new Error(\"Invalid mode: \" + mode);\n    if (!VersionCheck.isValid(version)) {\n        throw new Error(\"Invalid version: \" + version);\n    }\n    if (version >= 1 && version < 10) return mode.ccBits[0];\n    else if (version < 27) return mode.ccBits[1];\n    return mode.ccBits[2];\n};\n/**\n * Returns the most efficient mode to store the specified data\n *\n * @param  {String} dataStr Input data string\n * @return {Mode}           Best mode\n */ exports.getBestModeForData = function getBestModeForData(dataStr) {\n    if (Regex.testNumeric(dataStr)) return exports.NUMERIC;\n    else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;\n    else if (Regex.testKanji(dataStr)) return exports.KANJI;\n    else return exports.BYTE;\n};\n/**\n * Return mode name as string\n *\n * @param {Mode} mode Mode object\n * @returns {String}  Mode name\n */ exports.toString = function toString(mode) {\n    if (mode && mode.id) return mode.id;\n    throw new Error(\"Invalid mode\");\n};\n/**\n * Check if input param is a valid mode object\n *\n * @param   {Mode}    mode Mode object\n * @returns {Boolean} True if valid mode, false otherwise\n */ exports.isValid = function isValid(mode) {\n    return mode && mode.bit && mode.ccBits;\n};\n/**\n * Get mode object from its name\n *\n * @param   {String} string Mode name\n * @returns {Mode}          Mode object\n */ function fromString(string) {\n    if (typeof string !== \"string\") {\n        throw new Error(\"Param is not a string\");\n    }\n    var lcStr = string.toLowerCase();\n    switch(lcStr){\n        case \"numeric\":\n            return exports.NUMERIC;\n        case \"alphanumeric\":\n            return exports.ALPHANUMERIC;\n        case \"kanji\":\n            return exports.KANJI;\n        case \"byte\":\n            return exports.BYTE;\n        default:\n            throw new Error(\"Unknown mode: \" + string);\n    }\n}\n/**\n * Returns mode from a value.\n * If value is not a valid mode, returns defaultValue\n *\n * @param  {Mode|String} value        Encoding mode\n * @param  {Mode}        defaultValue Fallback value\n * @return {Mode}                     Encoding mode\n */ exports.from = function from(value, defaultValue) {\n    if (exports.isValid(value)) {\n        return value;\n    }\n    try {\n        return fromString(value);\n    } catch (e) {\n        return defaultValue;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/mode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/numeric-data.js":
/*!******************************************************!*\
  !*** ./node_modules/qrcode/lib/core/numeric-data.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qrcode/lib/core/mode.js\");\nfunction NumericData(data) {\n    this.mode = Mode.NUMERIC;\n    this.data = data.toString();\n}\nNumericData.getBitsLength = function getBitsLength(length) {\n    return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n};\nNumericData.prototype.getLength = function getLength() {\n    return this.data.length;\n};\nNumericData.prototype.getBitsLength = function getBitsLength() {\n    return NumericData.getBitsLength(this.data.length);\n};\nNumericData.prototype.write = function write(bitBuffer) {\n    var i, group, value;\n    // The input data string is divided into groups of three digits,\n    // and each group is converted to its 10-bit binary equivalent.\n    for(i = 0; i + 3 <= this.data.length; i += 3){\n        group = this.data.substr(i, 3);\n        value = parseInt(group, 10);\n        bitBuffer.put(value, 10);\n    }\n    // If the number of input digits is not an exact multiple of three,\n    // the final one or two digits are converted to 4 or 7 bits respectively.\n    var remainingNum = this.data.length - i;\n    if (remainingNum > 0) {\n        group = this.data.substr(i);\n        value = parseInt(group, 10);\n        bitBuffer.put(value, remainingNum * 3 + 1);\n    }\n};\nmodule.exports = NumericData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL251bWVyaWMtZGF0YS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsU0FBU0MsWUFBYUMsSUFBSTtJQUN4QixJQUFJLENBQUNDLElBQUksR0FBR0osS0FBS0ssT0FBTztJQUN4QixJQUFJLENBQUNGLElBQUksR0FBR0EsS0FBS0csUUFBUTtBQUMzQjtBQUVBSixZQUFZSyxhQUFhLEdBQUcsU0FBU0EsY0FBZUMsTUFBTTtJQUN4RCxPQUFPLEtBQUtDLEtBQUtDLEtBQUssQ0FBQ0YsU0FBUyxLQUFNLFVBQVUsSUFBTSxTQUFVLElBQUssSUFBSSxJQUFLO0FBQ2hGO0FBRUFOLFlBQVlTLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHLFNBQVNBO0lBQ3pDLE9BQU8sSUFBSSxDQUFDVCxJQUFJLENBQUNLLE1BQU07QUFDekI7QUFFQU4sWUFBWVMsU0FBUyxDQUFDSixhQUFhLEdBQUcsU0FBU0E7SUFDN0MsT0FBT0wsWUFBWUssYUFBYSxDQUFDLElBQUksQ0FBQ0osSUFBSSxDQUFDSyxNQUFNO0FBQ25EO0FBRUFOLFlBQVlTLFNBQVMsQ0FBQ0UsS0FBSyxHQUFHLFNBQVNBLE1BQU9DLFNBQVM7SUFDckQsSUFBSUMsR0FBR0MsT0FBT0M7SUFFZCxnRUFBZ0U7SUFDaEUsK0RBQStEO0lBQy9ELElBQUtGLElBQUksR0FBR0EsSUFBSSxLQUFLLElBQUksQ0FBQ1osSUFBSSxDQUFDSyxNQUFNLEVBQUVPLEtBQUssRUFBRztRQUM3Q0MsUUFBUSxJQUFJLENBQUNiLElBQUksQ0FBQ2UsTUFBTSxDQUFDSCxHQUFHO1FBQzVCRSxRQUFRRSxTQUFTSCxPQUFPO1FBRXhCRixVQUFVTSxHQUFHLENBQUNILE9BQU87SUFDdkI7SUFFQSxtRUFBbUU7SUFDbkUseUVBQXlFO0lBQ3pFLElBQUlJLGVBQWUsSUFBSSxDQUFDbEIsSUFBSSxDQUFDSyxNQUFNLEdBQUdPO0lBQ3RDLElBQUlNLGVBQWUsR0FBRztRQUNwQkwsUUFBUSxJQUFJLENBQUNiLElBQUksQ0FBQ2UsTUFBTSxDQUFDSDtRQUN6QkUsUUFBUUUsU0FBU0gsT0FBTztRQUV4QkYsVUFBVU0sR0FBRyxDQUFDSCxPQUFPSSxlQUFlLElBQUk7SUFDMUM7QUFDRjtBQUVBQyxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9udW1lcmljLWRhdGEuanM/MmU4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTW9kZSA9IHJlcXVpcmUoJy4vbW9kZScpXG5cbmZ1bmN0aW9uIE51bWVyaWNEYXRhIChkYXRhKSB7XG4gIHRoaXMubW9kZSA9IE1vZGUuTlVNRVJJQ1xuICB0aGlzLmRhdGEgPSBkYXRhLnRvU3RyaW5nKClcbn1cblxuTnVtZXJpY0RhdGEuZ2V0Qml0c0xlbmd0aCA9IGZ1bmN0aW9uIGdldEJpdHNMZW5ndGggKGxlbmd0aCkge1xuICByZXR1cm4gMTAgKiBNYXRoLmZsb29yKGxlbmd0aCAvIDMpICsgKChsZW5ndGggJSAzKSA/ICgobGVuZ3RoICUgMykgKiAzICsgMSkgOiAwKVxufVxuXG5OdW1lcmljRGF0YS5wcm90b3R5cGUuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoICgpIHtcbiAgcmV0dXJuIHRoaXMuZGF0YS5sZW5ndGhcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLmdldEJpdHNMZW5ndGggPSBmdW5jdGlvbiBnZXRCaXRzTGVuZ3RoICgpIHtcbiAgcmV0dXJuIE51bWVyaWNEYXRhLmdldEJpdHNMZW5ndGgodGhpcy5kYXRhLmxlbmd0aClcbn1cblxuTnVtZXJpY0RhdGEucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKGJpdEJ1ZmZlcikge1xuICB2YXIgaSwgZ3JvdXAsIHZhbHVlXG5cbiAgLy8gVGhlIGlucHV0IGRhdGEgc3RyaW5nIGlzIGRpdmlkZWQgaW50byBncm91cHMgb2YgdGhyZWUgZGlnaXRzLFxuICAvLyBhbmQgZWFjaCBncm91cCBpcyBjb252ZXJ0ZWQgdG8gaXRzIDEwLWJpdCBiaW5hcnkgZXF1aXZhbGVudC5cbiAgZm9yIChpID0gMDsgaSArIDMgPD0gdGhpcy5kYXRhLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgZ3JvdXAgPSB0aGlzLmRhdGEuc3Vic3RyKGksIDMpXG4gICAgdmFsdWUgPSBwYXJzZUludChncm91cCwgMTApXG5cbiAgICBiaXRCdWZmZXIucHV0KHZhbHVlLCAxMClcbiAgfVxuXG4gIC8vIElmIHRoZSBudW1iZXIgb2YgaW5wdXQgZGlnaXRzIGlzIG5vdCBhbiBleGFjdCBtdWx0aXBsZSBvZiB0aHJlZSxcbiAgLy8gdGhlIGZpbmFsIG9uZSBvciB0d28gZGlnaXRzIGFyZSBjb252ZXJ0ZWQgdG8gNCBvciA3IGJpdHMgcmVzcGVjdGl2ZWx5LlxuICB2YXIgcmVtYWluaW5nTnVtID0gdGhpcy5kYXRhLmxlbmd0aCAtIGlcbiAgaWYgKHJlbWFpbmluZ051bSA+IDApIHtcbiAgICBncm91cCA9IHRoaXMuZGF0YS5zdWJzdHIoaSlcbiAgICB2YWx1ZSA9IHBhcnNlSW50KGdyb3VwLCAxMClcblxuICAgIGJpdEJ1ZmZlci5wdXQodmFsdWUsIHJlbWFpbmluZ051bSAqIDMgKyAxKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtZXJpY0RhdGFcbiJdLCJuYW1lcyI6WyJNb2RlIiwicmVxdWlyZSIsIk51bWVyaWNEYXRhIiwiZGF0YSIsIm1vZGUiLCJOVU1FUklDIiwidG9TdHJpbmciLCJnZXRCaXRzTGVuZ3RoIiwibGVuZ3RoIiwiTWF0aCIsImZsb29yIiwicHJvdG90eXBlIiwiZ2V0TGVuZ3RoIiwid3JpdGUiLCJiaXRCdWZmZXIiLCJpIiwiZ3JvdXAiLCJ2YWx1ZSIsInN1YnN0ciIsInBhcnNlSW50IiwicHV0IiwicmVtYWluaW5nTnVtIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/numeric-data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/polynomial.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/polynomial.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/./node_modules/qrcode/lib/utils/buffer.js\");\nvar GF = __webpack_require__(/*! ./galois-field */ \"(ssr)/./node_modules/qrcode/lib/core/galois-field.js\");\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */ exports.mul = function mul(p1, p2) {\n    var coeff = BufferUtil.alloc(p1.length + p2.length - 1);\n    for(var i = 0; i < p1.length; i++){\n        for(var j = 0; j < p2.length; j++){\n            coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n        }\n    }\n    return coeff;\n};\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */ exports.mod = function mod(divident, divisor) {\n    var result = BufferUtil.from(divident);\n    while(result.length - divisor.length >= 0){\n        var coeff = result[0];\n        for(var i = 0; i < divisor.length; i++){\n            result[i] ^= GF.mul(divisor[i], coeff);\n        }\n        // remove all zeros from buffer head\n        var offset = 0;\n        while(offset < result.length && result[offset] === 0)offset++;\n        result = result.slice(offset);\n    }\n    return result;\n};\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */ exports.generateECPolynomial = function generateECPolynomial(degree) {\n    var poly = BufferUtil.from([\n        1\n    ]);\n    for(var i = 0; i < degree; i++){\n        poly = exports.mul(poly, [\n            1,\n            GF.exp(i)\n        ]);\n    }\n    return poly;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3BvbHlub21pYWwuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUM7QUFDekIsSUFBSUMsS0FBS0QsbUJBQU9BLENBQUM7QUFFakI7Ozs7OztDQU1DLEdBQ0RFLFdBQVcsR0FBRyxTQUFTQyxJQUFLQyxFQUFFLEVBQUVDLEVBQUU7SUFDaEMsSUFBSUMsUUFBUVAsV0FBV1EsS0FBSyxDQUFDSCxHQUFHSSxNQUFNLEdBQUdILEdBQUdHLE1BQU0sR0FBRztJQUVyRCxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsR0FBR0ksTUFBTSxFQUFFQyxJQUFLO1FBQ2xDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxHQUFHRyxNQUFNLEVBQUVFLElBQUs7WUFDbENKLEtBQUssQ0FBQ0csSUFBSUMsRUFBRSxJQUFJVCxHQUFHRSxHQUFHLENBQUNDLEVBQUUsQ0FBQ0ssRUFBRSxFQUFFSixFQUFFLENBQUNLLEVBQUU7UUFDckM7SUFDRjtJQUVBLE9BQU9KO0FBQ1Q7QUFFQTs7Ozs7O0NBTUMsR0FDREosV0FBVyxHQUFHLFNBQVNTLElBQUtDLFFBQVEsRUFBRUMsT0FBTztJQUMzQyxJQUFJQyxTQUFTZixXQUFXZ0IsSUFBSSxDQUFDSDtJQUU3QixNQUFPLE9BQVFKLE1BQU0sR0FBR0ssUUFBUUwsTUFBTSxJQUFLLEVBQUc7UUFDNUMsSUFBSUYsUUFBUVEsTUFBTSxDQUFDLEVBQUU7UUFFckIsSUFBSyxJQUFJTCxJQUFJLEdBQUdBLElBQUlJLFFBQVFMLE1BQU0sRUFBRUMsSUFBSztZQUN2Q0ssTUFBTSxDQUFDTCxFQUFFLElBQUlSLEdBQUdFLEdBQUcsQ0FBQ1UsT0FBTyxDQUFDSixFQUFFLEVBQUVIO1FBQ2xDO1FBRUEsb0NBQW9DO1FBQ3BDLElBQUlVLFNBQVM7UUFDYixNQUFPQSxTQUFTRixPQUFPTixNQUFNLElBQUlNLE1BQU0sQ0FBQ0UsT0FBTyxLQUFLLEVBQUdBO1FBQ3ZERixTQUFTQSxPQUFPRyxLQUFLLENBQUNEO0lBQ3hCO0lBRUEsT0FBT0Y7QUFDVDtBQUVBOzs7Ozs7Q0FNQyxHQUNEWiw0QkFBNEIsR0FBRyxTQUFTZ0IscUJBQXNCQyxNQUFNO0lBQ2xFLElBQUlDLE9BQU9yQixXQUFXZ0IsSUFBSSxDQUFDO1FBQUM7S0FBRTtJQUM5QixJQUFLLElBQUlOLElBQUksR0FBR0EsSUFBSVUsUUFBUVYsSUFBSztRQUMvQlcsT0FBT2xCLFFBQVFDLEdBQUcsQ0FBQ2lCLE1BQU07WUFBQztZQUFHbkIsR0FBR29CLEdBQUcsQ0FBQ1o7U0FBRztJQUN6QztJQUVBLE9BQU9XO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcG9seW5vbWlhbC5qcz9iY2JhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcbnZhciBHRiA9IHJlcXVpcmUoJy4vZ2Fsb2lzLWZpZWxkJylcblxuLyoqXG4gKiBNdWx0aXBsaWVzIHR3byBwb2x5bm9taWFscyBpbnNpZGUgR2Fsb2lzIEZpZWxkXG4gKlxuICogQHBhcmFtICB7QnVmZmVyfSBwMSBQb2x5bm9taWFsXG4gKiBAcGFyYW0gIHtCdWZmZXJ9IHAyIFBvbHlub21pYWxcbiAqIEByZXR1cm4ge0J1ZmZlcn0gICAgUHJvZHVjdCBvZiBwMSBhbmQgcDJcbiAqL1xuZXhwb3J0cy5tdWwgPSBmdW5jdGlvbiBtdWwgKHAxLCBwMikge1xuICB2YXIgY29lZmYgPSBCdWZmZXJVdGlsLmFsbG9jKHAxLmxlbmd0aCArIHAyLmxlbmd0aCAtIDEpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwMS5sZW5ndGg7IGkrKykge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcDIubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvZWZmW2kgKyBqXSBePSBHRi5tdWwocDFbaV0sIHAyW2pdKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb2VmZlxufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgcmVtYWluZGVyIG9mIHBvbHlub21pYWxzIGRpdmlzaW9uXG4gKlxuICogQHBhcmFtICB7QnVmZmVyfSBkaXZpZGVudCBQb2x5bm9taWFsXG4gKiBAcGFyYW0gIHtCdWZmZXJ9IGRpdmlzb3IgIFBvbHlub21pYWxcbiAqIEByZXR1cm4ge0J1ZmZlcn0gICAgICAgICAgUmVtYWluZGVyXG4gKi9cbmV4cG9ydHMubW9kID0gZnVuY3Rpb24gbW9kIChkaXZpZGVudCwgZGl2aXNvcikge1xuICB2YXIgcmVzdWx0ID0gQnVmZmVyVXRpbC5mcm9tKGRpdmlkZW50KVxuXG4gIHdoaWxlICgocmVzdWx0Lmxlbmd0aCAtIGRpdmlzb3IubGVuZ3RoKSA+PSAwKSB7XG4gICAgdmFyIGNvZWZmID0gcmVzdWx0WzBdXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpdmlzb3IubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSBePSBHRi5tdWwoZGl2aXNvcltpXSwgY29lZmYpXG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGFsbCB6ZXJvcyBmcm9tIGJ1ZmZlciBoZWFkXG4gICAgdmFyIG9mZnNldCA9IDBcbiAgICB3aGlsZSAob2Zmc2V0IDwgcmVzdWx0Lmxlbmd0aCAmJiByZXN1bHRbb2Zmc2V0XSA9PT0gMCkgb2Zmc2V0KytcbiAgICByZXN1bHQgPSByZXN1bHQuc2xpY2Uob2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGFuIGlycmVkdWNpYmxlIGdlbmVyYXRvciBwb2x5bm9taWFsIG9mIHNwZWNpZmllZCBkZWdyZWVcbiAqICh1c2VkIGJ5IFJlZWQtU29sb21vbiBlbmNvZGVyKVxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlIERlZ3JlZSBvZiB0aGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAqIEByZXR1cm4ge0J1ZmZlcn0gICAgICAgIEJ1ZmZlciBjb250YWluaW5nIHBvbHlub21pYWwgY29lZmZpY2llbnRzXG4gKi9cbmV4cG9ydHMuZ2VuZXJhdGVFQ1BvbHlub21pYWwgPSBmdW5jdGlvbiBnZW5lcmF0ZUVDUG9seW5vbWlhbCAoZGVncmVlKSB7XG4gIHZhciBwb2x5ID0gQnVmZmVyVXRpbC5mcm9tKFsxXSlcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWdyZWU7IGkrKykge1xuICAgIHBvbHkgPSBleHBvcnRzLm11bChwb2x5LCBbMSwgR0YuZXhwKGkpXSlcbiAgfVxuXG4gIHJldHVybiBwb2x5XG59XG4iXSwibmFtZXMiOlsiQnVmZmVyVXRpbCIsInJlcXVpcmUiLCJHRiIsImV4cG9ydHMiLCJtdWwiLCJwMSIsInAyIiwiY29lZmYiLCJhbGxvYyIsImxlbmd0aCIsImkiLCJqIiwibW9kIiwiZGl2aWRlbnQiLCJkaXZpc29yIiwicmVzdWx0IiwiZnJvbSIsIm9mZnNldCIsInNsaWNlIiwiZ2VuZXJhdGVFQ1BvbHlub21pYWwiLCJkZWdyZWUiLCJwb2x5IiwiZXhwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/polynomial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/qrcode.js":
/*!************************************************!*\
  !*** ./node_modules/qrcode/lib/core/qrcode.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/./node_modules/qrcode/lib/utils/buffer.js\");\nvar Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/core/utils.js\");\nvar ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/qrcode/lib/core/error-correction-level.js\");\nvar BitBuffer = __webpack_require__(/*! ./bit-buffer */ \"(ssr)/./node_modules/qrcode/lib/core/bit-buffer.js\");\nvar BitMatrix = __webpack_require__(/*! ./bit-matrix */ \"(ssr)/./node_modules/qrcode/lib/core/bit-matrix.js\");\nvar AlignmentPattern = __webpack_require__(/*! ./alignment-pattern */ \"(ssr)/./node_modules/qrcode/lib/core/alignment-pattern.js\");\nvar FinderPattern = __webpack_require__(/*! ./finder-pattern */ \"(ssr)/./node_modules/qrcode/lib/core/finder-pattern.js\");\nvar MaskPattern = __webpack_require__(/*! ./mask-pattern */ \"(ssr)/./node_modules/qrcode/lib/core/mask-pattern.js\");\nvar ECCode = __webpack_require__(/*! ./error-correction-code */ \"(ssr)/./node_modules/qrcode/lib/core/error-correction-code.js\");\nvar ReedSolomonEncoder = __webpack_require__(/*! ./reed-solomon-encoder */ \"(ssr)/./node_modules/qrcode/lib/core/reed-solomon-encoder.js\");\nvar Version = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/qrcode/lib/core/version.js\");\nvar FormatInfo = __webpack_require__(/*! ./format-info */ \"(ssr)/./node_modules/qrcode/lib/core/format-info.js\");\nvar Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qrcode/lib/core/mode.js\");\nvar Segments = __webpack_require__(/*! ./segments */ \"(ssr)/./node_modules/qrcode/lib/core/segments.js\");\nvar isArray = __webpack_require__(/*! isarray */ \"(ssr)/./node_modules/isarray/index.js\");\n/**\n * QRCode for JavaScript\n *\n * modified by Ryan Day for nodejs support\n * Copyright (c) 2011 Ryan Day\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n//---------------------------------------------------------------------\n// QRCode for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: http://www.d-project.com/\n//\n// Licensed under the MIT license:\n//   http://www.opensource.org/licenses/mit-license.php\n//\n// The word \"QR Code\" is registered trademark of\n// DENSO WAVE INCORPORATED\n//   http://www.denso-wave.com/qrcode/faqpatent-e.html\n//\n//---------------------------------------------------------------------\n*/ /**\n * Add finder patterns bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupFinderPattern(matrix, version) {\n    var size = matrix.size;\n    var pos = FinderPattern.getPositions(version);\n    for(var i = 0; i < pos.length; i++){\n        var row = pos[i][0];\n        var col = pos[i][1];\n        for(var r = -1; r <= 7; r++){\n            if (row + r <= -1 || size <= row + r) continue;\n            for(var c = -1; c <= 7; c++){\n                if (col + c <= -1 || size <= col + c) continue;\n                if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {\n                    matrix.set(row + r, col + c, true, true);\n                } else {\n                    matrix.set(row + r, col + c, false, true);\n                }\n            }\n        }\n    }\n}\n/**\n * Add timing pattern bits to matrix\n *\n * Note: this function must be called before {@link setupAlignmentPattern}\n *\n * @param  {BitMatrix} matrix Modules matrix\n */ function setupTimingPattern(matrix) {\n    var size = matrix.size;\n    for(var r = 8; r < size - 8; r++){\n        var value = r % 2 === 0;\n        matrix.set(r, 6, value, true);\n        matrix.set(6, r, value, true);\n    }\n}\n/**\n * Add alignment patterns bits to matrix\n *\n * Note: this function must be called after {@link setupTimingPattern}\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupAlignmentPattern(matrix, version) {\n    var pos = AlignmentPattern.getPositions(version);\n    for(var i = 0; i < pos.length; i++){\n        var row = pos[i][0];\n        var col = pos[i][1];\n        for(var r = -2; r <= 2; r++){\n            for(var c = -2; c <= 2; c++){\n                if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {\n                    matrix.set(row + r, col + c, true, true);\n                } else {\n                    matrix.set(row + r, col + c, false, true);\n                }\n            }\n        }\n    }\n}\n/**\n * Add version info bits to matrix\n *\n * @param  {BitMatrix} matrix  Modules matrix\n * @param  {Number}    version QR Code version\n */ function setupVersionInfo(matrix, version) {\n    var size = matrix.size;\n    var bits = Version.getEncodedBits(version);\n    var row, col, mod;\n    for(var i = 0; i < 18; i++){\n        row = Math.floor(i / 3);\n        col = i % 3 + size - 8 - 3;\n        mod = (bits >> i & 1) === 1;\n        matrix.set(row, col, mod, true);\n        matrix.set(col, row, mod, true);\n    }\n}\n/**\n * Add format info bits to matrix\n *\n * @param  {BitMatrix} matrix               Modules matrix\n * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level\n * @param  {Number}    maskPattern          Mask pattern reference value\n */ function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {\n    var size = matrix.size;\n    var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);\n    var i, mod;\n    for(i = 0; i < 15; i++){\n        mod = (bits >> i & 1) === 1;\n        // vertical\n        if (i < 6) {\n            matrix.set(i, 8, mod, true);\n        } else if (i < 8) {\n            matrix.set(i + 1, 8, mod, true);\n        } else {\n            matrix.set(size - 15 + i, 8, mod, true);\n        }\n        // horizontal\n        if (i < 8) {\n            matrix.set(8, size - i - 1, mod, true);\n        } else if (i < 9) {\n            matrix.set(8, 15 - i - 1 + 1, mod, true);\n        } else {\n            matrix.set(8, 15 - i - 1, mod, true);\n        }\n    }\n    // fixed module\n    matrix.set(size - 8, 8, 1, true);\n}\n/**\n * Add encoded data bits to matrix\n *\n * @param  {BitMatrix} matrix Modules matrix\n * @param  {Buffer}    data   Data codewords\n */ function setupData(matrix, data) {\n    var size = matrix.size;\n    var inc = -1;\n    var row = size - 1;\n    var bitIndex = 7;\n    var byteIndex = 0;\n    for(var col = size - 1; col > 0; col -= 2){\n        if (col === 6) col--;\n        while(true){\n            for(var c = 0; c < 2; c++){\n                if (!matrix.isReserved(row, col - c)) {\n                    var dark = false;\n                    if (byteIndex < data.length) {\n                        dark = (data[byteIndex] >>> bitIndex & 1) === 1;\n                    }\n                    matrix.set(row, col - c, dark);\n                    bitIndex--;\n                    if (bitIndex === -1) {\n                        byteIndex++;\n                        bitIndex = 7;\n                    }\n                }\n            }\n            row += inc;\n            if (row < 0 || size <= row) {\n                row -= inc;\n                inc = -inc;\n                break;\n            }\n        }\n    }\n}\n/**\n * Create encoded codewords from data input\n *\n * @param  {Number}   version              QR Code version\n * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level\n * @param  {ByteData} data                 Data input\n * @return {Buffer}                        Buffer containing encoded codewords\n */ function createData(version, errorCorrectionLevel, segments) {\n    // Prepare data buffer\n    var buffer = new BitBuffer();\n    segments.forEach(function(data) {\n        // prefix data with mode indicator (4 bits)\n        buffer.put(data.mode.bit, 4);\n        // Prefix data with character count indicator.\n        // The character count indicator is a string of bits that represents the\n        // number of characters that are being encoded.\n        // The character count indicator must be placed after the mode indicator\n        // and must be a certain number of bits long, depending on the QR version\n        // and data mode\n        // @see {@link Mode.getCharCountIndicator}.\n        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version));\n        // add binary data sequence to buffer\n        data.write(buffer);\n    });\n    // Calculate required number of bits\n    var totalCodewords = Utils.getSymbolTotalCodewords(version);\n    var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    // Add a terminator.\n    // If the bit string is shorter than the total number of required bits,\n    // a terminator of up to four 0s must be added to the right side of the string.\n    // If the bit string is more than four bits shorter than the required number of bits,\n    // add four 0s to the end.\n    if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {\n        buffer.put(0, 4);\n    }\n    // If the bit string is fewer than four bits shorter, add only the number of 0s that\n    // are needed to reach the required number of bits.\n    // After adding the terminator, if the number of bits in the string is not a multiple of 8,\n    // pad the string on the right with 0s to make the string's length a multiple of 8.\n    while(buffer.getLengthInBits() % 8 !== 0){\n        buffer.putBit(0);\n    }\n    // Add pad bytes if the string is still shorter than the total number of required bits.\n    // Extend the buffer to fill the data capacity of the symbol corresponding to\n    // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)\n    // and 00010001 (0x11) alternately.\n    var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;\n    for(var i = 0; i < remainingByte; i++){\n        buffer.put(i % 2 ? 0x11 : 0xEC, 8);\n    }\n    return createCodewords(buffer, version, errorCorrectionLevel);\n}\n/**\n * Encode input data with Reed-Solomon and return codewords with\n * relative error correction bits\n *\n * @param  {BitBuffer} bitBuffer            Data to encode\n * @param  {Number}    version              QR Code version\n * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level\n * @return {Buffer}                         Buffer containing encoded codewords\n */ function createCodewords(bitBuffer, version, errorCorrectionLevel) {\n    // Total codewords for this QR code version (Data + Error correction)\n    var totalCodewords = Utils.getSymbolTotalCodewords(version);\n    // Total number of error correction codewords\n    var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    // Total number of data codewords\n    var dataTotalCodewords = totalCodewords - ecTotalCodewords;\n    // Total number of blocks\n    var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel);\n    // Calculate how many blocks each group should contain\n    var blocksInGroup2 = totalCodewords % ecTotalBlocks;\n    var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;\n    var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);\n    var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);\n    var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;\n    // Number of EC codewords is the same for both groups\n    var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;\n    // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount\n    var rs = new ReedSolomonEncoder(ecCount);\n    var offset = 0;\n    var dcData = new Array(ecTotalBlocks);\n    var ecData = new Array(ecTotalBlocks);\n    var maxDataSize = 0;\n    var buffer = BufferUtil.from(bitBuffer.buffer);\n    // Divide the buffer into the required number of blocks\n    for(var b = 0; b < ecTotalBlocks; b++){\n        var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;\n        // extract a block of data from buffer\n        dcData[b] = buffer.slice(offset, offset + dataSize);\n        // Calculate EC codewords for this data block\n        ecData[b] = rs.encode(dcData[b]);\n        offset += dataSize;\n        maxDataSize = Math.max(maxDataSize, dataSize);\n    }\n    // Create final data\n    // Interleave the data and error correction codewords from each block\n    var data = BufferUtil.alloc(totalCodewords);\n    var index = 0;\n    var i, r;\n    // Add data codewords\n    for(i = 0; i < maxDataSize; i++){\n        for(r = 0; r < ecTotalBlocks; r++){\n            if (i < dcData[r].length) {\n                data[index++] = dcData[r][i];\n            }\n        }\n    }\n    // Apped EC codewords\n    for(i = 0; i < ecCount; i++){\n        for(r = 0; r < ecTotalBlocks; r++){\n            data[index++] = ecData[r][i];\n        }\n    }\n    return data;\n}\n/**\n * Build QR Code symbol\n *\n * @param  {String} data                 Input string\n * @param  {Number} version              QR Code version\n * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level\n * @param  {MaskPattern} maskPattern     Mask pattern\n * @return {Object}                      Object containing symbol data\n */ function createSymbol(data, version, errorCorrectionLevel, maskPattern) {\n    var segments;\n    if (isArray(data)) {\n        segments = Segments.fromArray(data);\n    } else if (typeof data === \"string\") {\n        var estimatedVersion = version;\n        if (!estimatedVersion) {\n            var rawSegments = Segments.rawSplit(data);\n            // Estimate best version that can contain raw splitted segments\n            estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);\n        }\n        // Build optimized segments\n        // If estimated version is undefined, try with the highest version\n        segments = Segments.fromString(data, estimatedVersion || 40);\n    } else {\n        throw new Error(\"Invalid data\");\n    }\n    // Get the min version that can contain data\n    var bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);\n    // If no version is found, data cannot be stored\n    if (!bestVersion) {\n        throw new Error(\"The amount of data is too big to be stored in a QR Code\");\n    }\n    // If not specified, use min version as default\n    if (!version) {\n        version = bestVersion;\n    // Check if the specified version can contain the data\n    } else if (version < bestVersion) {\n        throw new Error(\"\\n\" + \"The chosen QR Code version cannot contain this amount of data.\\n\" + \"Minimum version required to store current data is: \" + bestVersion + \".\\n\");\n    }\n    var dataBits = createData(version, errorCorrectionLevel, segments);\n    // Allocate matrix buffer\n    var moduleCount = Utils.getSymbolSize(version);\n    var modules = new BitMatrix(moduleCount);\n    // Add function modules\n    setupFinderPattern(modules, version);\n    setupTimingPattern(modules);\n    setupAlignmentPattern(modules, version);\n    // Add temporary dummy bits for format info just to set them as reserved.\n    // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}\n    // since the masking operation must be performed only on the encoding region.\n    // These blocks will be replaced with correct values later in code.\n    setupFormatInfo(modules, errorCorrectionLevel, 0);\n    if (version >= 7) {\n        setupVersionInfo(modules, version);\n    }\n    // Add data codewords\n    setupData(modules, dataBits);\n    if (isNaN(maskPattern)) {\n        // Find best mask pattern\n        maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));\n    }\n    // Apply mask pattern\n    MaskPattern.applyMask(maskPattern, modules);\n    // Replace format info bits with correct values\n    setupFormatInfo(modules, errorCorrectionLevel, maskPattern);\n    return {\n        modules: modules,\n        version: version,\n        errorCorrectionLevel: errorCorrectionLevel,\n        maskPattern: maskPattern,\n        segments: segments\n    };\n}\n/**\n * QR Code\n *\n * @param {String | Array} data                 Input data\n * @param {Object} options                      Optional configurations\n * @param {Number} options.version              QR Code version\n * @param {String} options.errorCorrectionLevel Error correction level\n * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis\n */ exports.create = function create(data, options) {\n    if (typeof data === \"undefined\" || data === \"\") {\n        throw new Error(\"No input text\");\n    }\n    var errorCorrectionLevel = ECLevel.M;\n    var version;\n    var mask;\n    if (typeof options !== \"undefined\") {\n        // Use higher error correction level as default\n        errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);\n        version = Version.from(options.version);\n        mask = MaskPattern.from(options.maskPattern);\n        if (options.toSJISFunc) {\n            Utils.setToSJISFunction(options.toSJISFunc);\n        }\n    }\n    return createSymbol(data, version, errorCorrectionLevel, mask);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/qrcode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/reed-solomon-encoder.js":
/*!**************************************************************!*\
  !*** ./node_modules/qrcode/lib/core/reed-solomon-encoder.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar BufferUtil = __webpack_require__(/*! ../utils/buffer */ \"(ssr)/./node_modules/qrcode/lib/utils/buffer.js\");\nvar Polynomial = __webpack_require__(/*! ./polynomial */ \"(ssr)/./node_modules/qrcode/lib/core/polynomial.js\");\nvar Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nfunction ReedSolomonEncoder(degree) {\n    this.genPoly = undefined;\n    this.degree = degree;\n    if (this.degree) this.initialize(this.degree);\n}\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */ ReedSolomonEncoder.prototype.initialize = function initialize(degree) {\n    // create an irreducible generator polynomial\n    this.degree = degree;\n    this.genPoly = Polynomial.generateECPolynomial(this.degree);\n};\n/**\n * Encodes a chunk of data\n *\n * @param  {Buffer} data Buffer containing input data\n * @return {Buffer}      Buffer containing encoded data\n */ ReedSolomonEncoder.prototype.encode = function encode(data) {\n    if (!this.genPoly) {\n        throw new Error(\"Encoder not initialized\");\n    }\n    // Calculate EC for this data block\n    // extends data size to data+genPoly size\n    var pad = BufferUtil.alloc(this.degree);\n    var paddedData = Buffer.concat([\n        data,\n        pad\n    ], data.length + this.degree);\n    // The error correction codewords are the remainder after dividing the data codewords\n    // by a generator polynomial\n    var remainder = Polynomial.mod(paddedData, this.genPoly);\n    // return EC data blocks (last n byte, where n is the degree of genPoly)\n    // If coefficients number in remainder are less than genPoly degree,\n    // pad with 0s to the left to reach the needed number of coefficients\n    var start = this.degree - remainder.length;\n    if (start > 0) {\n        var buff = BufferUtil.alloc(this.degree);\n        remainder.copy(buff, start);\n        return buff;\n    }\n    return remainder;\n};\nmodule.exports = ReedSolomonEncoder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3JlZWQtc29sb21vbi1lbmNvZGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUN6QixJQUFJQyxhQUFhRCxtQkFBT0EsQ0FBQztBQUN6QixJQUFJRSxTQUFTRixvREFBd0I7QUFFckMsU0FBU0csbUJBQW9CQyxNQUFNO0lBQ2pDLElBQUksQ0FBQ0MsT0FBTyxHQUFHQztJQUNmLElBQUksQ0FBQ0YsTUFBTSxHQUFHQTtJQUVkLElBQUksSUFBSSxDQUFDQSxNQUFNLEVBQUUsSUFBSSxDQUFDRyxVQUFVLENBQUMsSUFBSSxDQUFDSCxNQUFNO0FBQzlDO0FBRUE7Ozs7O0NBS0MsR0FDREQsbUJBQW1CSyxTQUFTLENBQUNELFVBQVUsR0FBRyxTQUFTQSxXQUFZSCxNQUFNO0lBQ25FLDZDQUE2QztJQUM3QyxJQUFJLENBQUNBLE1BQU0sR0FBR0E7SUFDZCxJQUFJLENBQUNDLE9BQU8sR0FBR0osV0FBV1Esb0JBQW9CLENBQUMsSUFBSSxDQUFDTCxNQUFNO0FBQzVEO0FBRUE7Ozs7O0NBS0MsR0FDREQsbUJBQW1CSyxTQUFTLENBQUNFLE1BQU0sR0FBRyxTQUFTQSxPQUFRQyxJQUFJO0lBQ3pELElBQUksQ0FBQyxJQUFJLENBQUNOLE9BQU8sRUFBRTtRQUNqQixNQUFNLElBQUlPLE1BQU07SUFDbEI7SUFFQSxtQ0FBbUM7SUFDbkMseUNBQXlDO0lBQ3pDLElBQUlDLE1BQU1kLFdBQVdlLEtBQUssQ0FBQyxJQUFJLENBQUNWLE1BQU07SUFDdEMsSUFBSVcsYUFBYWIsT0FBT2MsTUFBTSxDQUFDO1FBQUNMO1FBQU1FO0tBQUksRUFBRUYsS0FBS00sTUFBTSxHQUFHLElBQUksQ0FBQ2IsTUFBTTtJQUVyRSxxRkFBcUY7SUFDckYsNEJBQTRCO0lBQzVCLElBQUljLFlBQVlqQixXQUFXa0IsR0FBRyxDQUFDSixZQUFZLElBQUksQ0FBQ1YsT0FBTztJQUV2RCx3RUFBd0U7SUFDeEUsb0VBQW9FO0lBQ3BFLHFFQUFxRTtJQUNyRSxJQUFJZSxRQUFRLElBQUksQ0FBQ2hCLE1BQU0sR0FBR2MsVUFBVUQsTUFBTTtJQUMxQyxJQUFJRyxRQUFRLEdBQUc7UUFDYixJQUFJQyxPQUFPdEIsV0FBV2UsS0FBSyxDQUFDLElBQUksQ0FBQ1YsTUFBTTtRQUN2Q2MsVUFBVUksSUFBSSxDQUFDRCxNQUFNRDtRQUVyQixPQUFPQztJQUNUO0lBRUEsT0FBT0g7QUFDVDtBQUVBSyxPQUFPQyxPQUFPLEdBQUdyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvY29yZS9yZWVkLXNvbG9tb24tZW5jb2Rlci5qcz8wYTY2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBCdWZmZXJVdGlsID0gcmVxdWlyZSgnLi4vdXRpbHMvYnVmZmVyJylcbnZhciBQb2x5bm9taWFsID0gcmVxdWlyZSgnLi9wb2x5bm9taWFsJylcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXJcblxuZnVuY3Rpb24gUmVlZFNvbG9tb25FbmNvZGVyIChkZWdyZWUpIHtcbiAgdGhpcy5nZW5Qb2x5ID0gdW5kZWZpbmVkXG4gIHRoaXMuZGVncmVlID0gZGVncmVlXG5cbiAgaWYgKHRoaXMuZGVncmVlKSB0aGlzLmluaXRpYWxpemUodGhpcy5kZWdyZWUpXG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZW5jb2Rlci5cbiAqIFRoZSBpbnB1dCBwYXJhbSBzaG91bGQgY29ycmVzcG9uZCB0byB0aGUgbnVtYmVyIG9mIGVycm9yIGNvcnJlY3Rpb24gY29kZXdvcmRzLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gZGVncmVlXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIGluaXRpYWxpemUgKGRlZ3JlZSkge1xuICAvLyBjcmVhdGUgYW4gaXJyZWR1Y2libGUgZ2VuZXJhdG9yIHBvbHlub21pYWxcbiAgdGhpcy5kZWdyZWUgPSBkZWdyZWVcbiAgdGhpcy5nZW5Qb2x5ID0gUG9seW5vbWlhbC5nZW5lcmF0ZUVDUG9seW5vbWlhbCh0aGlzLmRlZ3JlZSlcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgY2h1bmsgb2YgZGF0YVxuICpcbiAqIEBwYXJhbSAge0J1ZmZlcn0gZGF0YSBCdWZmZXIgY29udGFpbmluZyBpbnB1dCBkYXRhXG4gKiBAcmV0dXJuIHtCdWZmZXJ9ICAgICAgQnVmZmVyIGNvbnRhaW5pbmcgZW5jb2RlZCBkYXRhXG4gKi9cblJlZWRTb2xvbW9uRW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlIChkYXRhKSB7XG4gIGlmICghdGhpcy5nZW5Qb2x5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbmNvZGVyIG5vdCBpbml0aWFsaXplZCcpXG4gIH1cblxuICAvLyBDYWxjdWxhdGUgRUMgZm9yIHRoaXMgZGF0YSBibG9ja1xuICAvLyBleHRlbmRzIGRhdGEgc2l6ZSB0byBkYXRhK2dlblBvbHkgc2l6ZVxuICB2YXIgcGFkID0gQnVmZmVyVXRpbC5hbGxvYyh0aGlzLmRlZ3JlZSlcbiAgdmFyIHBhZGRlZERhdGEgPSBCdWZmZXIuY29uY2F0KFtkYXRhLCBwYWRdLCBkYXRhLmxlbmd0aCArIHRoaXMuZGVncmVlKVxuXG4gIC8vIFRoZSBlcnJvciBjb3JyZWN0aW9uIGNvZGV3b3JkcyBhcmUgdGhlIHJlbWFpbmRlciBhZnRlciBkaXZpZGluZyB0aGUgZGF0YSBjb2Rld29yZHNcbiAgLy8gYnkgYSBnZW5lcmF0b3IgcG9seW5vbWlhbFxuICB2YXIgcmVtYWluZGVyID0gUG9seW5vbWlhbC5tb2QocGFkZGVkRGF0YSwgdGhpcy5nZW5Qb2x5KVxuXG4gIC8vIHJldHVybiBFQyBkYXRhIGJsb2NrcyAobGFzdCBuIGJ5dGUsIHdoZXJlIG4gaXMgdGhlIGRlZ3JlZSBvZiBnZW5Qb2x5KVxuICAvLyBJZiBjb2VmZmljaWVudHMgbnVtYmVyIGluIHJlbWFpbmRlciBhcmUgbGVzcyB0aGFuIGdlblBvbHkgZGVncmVlLFxuICAvLyBwYWQgd2l0aCAwcyB0byB0aGUgbGVmdCB0byByZWFjaCB0aGUgbmVlZGVkIG51bWJlciBvZiBjb2VmZmljaWVudHNcbiAgdmFyIHN0YXJ0ID0gdGhpcy5kZWdyZWUgLSByZW1haW5kZXIubGVuZ3RoXG4gIGlmIChzdGFydCA+IDApIHtcbiAgICB2YXIgYnVmZiA9IEJ1ZmZlclV0aWwuYWxsb2ModGhpcy5kZWdyZWUpXG4gICAgcmVtYWluZGVyLmNvcHkoYnVmZiwgc3RhcnQpXG5cbiAgICByZXR1cm4gYnVmZlxuICB9XG5cbiAgcmV0dXJuIHJlbWFpbmRlclxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZWRTb2xvbW9uRW5jb2RlclxuIl0sIm5hbWVzIjpbIkJ1ZmZlclV0aWwiLCJyZXF1aXJlIiwiUG9seW5vbWlhbCIsIkJ1ZmZlciIsIlJlZWRTb2xvbW9uRW5jb2RlciIsImRlZ3JlZSIsImdlblBvbHkiLCJ1bmRlZmluZWQiLCJpbml0aWFsaXplIiwicHJvdG90eXBlIiwiZ2VuZXJhdGVFQ1BvbHlub21pYWwiLCJlbmNvZGUiLCJkYXRhIiwiRXJyb3IiLCJwYWQiLCJhbGxvYyIsInBhZGRlZERhdGEiLCJjb25jYXQiLCJsZW5ndGgiLCJyZW1haW5kZXIiLCJtb2QiLCJzdGFydCIsImJ1ZmYiLCJjb3B5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/reed-solomon-encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/regex.js":
/*!***********************************************!*\
  !*** ./node_modules/qrcode/lib/core/regex.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var numeric = \"[0-9]+\";\nvar alphanumeric = \"[A-Z $%*+\\\\-./:]+\";\nvar kanji = \"(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|\" + \"[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|\" + \"[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|\" + \"[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+\";\nkanji = kanji.replace(/u/g, \"\\\\u\");\nvar byte = \"(?:(?![A-Z0-9 $%*+\\\\-./:]|\" + kanji + \")(?:.|[\\r\\n]))+\";\nexports.KANJI = new RegExp(kanji, \"g\");\nexports.BYTE_KANJI = new RegExp(\"[^A-Z0-9 $%*+\\\\-./:]+\", \"g\");\nexports.BYTE = new RegExp(byte, \"g\");\nexports.NUMERIC = new RegExp(numeric, \"g\");\nexports.ALPHANUMERIC = new RegExp(alphanumeric, \"g\");\nvar TEST_KANJI = new RegExp(\"^\" + kanji + \"$\");\nvar TEST_NUMERIC = new RegExp(\"^\" + numeric + \"$\");\nvar TEST_ALPHANUMERIC = new RegExp(\"^[A-Z0-9 $%*+\\\\-./:]+$\");\nexports.testKanji = function testKanji(str) {\n    return TEST_KANJI.test(str);\n};\nexports.testNumeric = function testNumeric(str) {\n    return TEST_NUMERIC.test(str);\n};\nexports.testAlphanumeric = function testAlphanumeric(str) {\n    return TEST_ALPHANUMERIC.test(str);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3JlZ2V4LmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFVBQVU7QUFDZCxJQUFJQyxlQUFlO0FBQ25CLElBQUlDLFFBQVEsa0RBQ1YsbUVBQ0EsMERBQ0E7QUFDRkEsUUFBUUEsTUFBTUMsT0FBTyxDQUFDLE1BQU07QUFFNUIsSUFBSUMsT0FBTywrQkFBK0JGLFFBQVE7QUFFbERHLGFBQWEsR0FBRyxJQUFJRSxPQUFPTCxPQUFPO0FBQ2xDRyxrQkFBa0IsR0FBRyxJQUFJRSxPQUFPLHlCQUF5QjtBQUN6REYsWUFBWSxHQUFHLElBQUlFLE9BQU9ILE1BQU07QUFDaENDLGVBQWUsR0FBRyxJQUFJRSxPQUFPUCxTQUFTO0FBQ3RDSyxvQkFBb0IsR0FBRyxJQUFJRSxPQUFPTixjQUFjO0FBRWhELElBQUlXLGFBQWEsSUFBSUwsT0FBTyxNQUFNTCxRQUFRO0FBQzFDLElBQUlXLGVBQWUsSUFBSU4sT0FBTyxNQUFNUCxVQUFVO0FBQzlDLElBQUljLG9CQUFvQixJQUFJUCxPQUFPO0FBRW5DRixpQkFBaUIsR0FBRyxTQUFTVSxVQUFXQyxHQUFHO0lBQ3pDLE9BQU9KLFdBQVdLLElBQUksQ0FBQ0Q7QUFDekI7QUFFQVgsbUJBQW1CLEdBQUcsU0FBU2EsWUFBYUYsR0FBRztJQUM3QyxPQUFPSCxhQUFhSSxJQUFJLENBQUNEO0FBQzNCO0FBRUFYLHdCQUF3QixHQUFHLFNBQVNjLGlCQUFrQkgsR0FBRztJQUN2RCxPQUFPRixrQkFBa0JHLElBQUksQ0FBQ0Q7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvcmVnZXguanM/NmVlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbnVtZXJpYyA9ICdbMC05XSsnXG52YXIgYWxwaGFudW1lcmljID0gJ1tBLVogJCUqK1xcXFwtLi86XSsnXG52YXIga2FuamkgPSAnKD86W3UzMDAwLXUzMDNGXXxbdTMwNDAtdTMwOUZdfFt1MzBBMC11MzBGRl18JyArXG4gICdbdUZGMDAtdUZGRUZdfFt1NEUwMC11OUZBRl18W3UyNjA1LXUyNjA2XXxbdTIxOTAtdTIxOTVdfHUyMDNCfCcgK1xuICAnW3UyMDEwdTIwMTV1MjAxOHUyMDE5dTIwMjV1MjAyNnUyMDFDdTIwMUR1MjIyNXUyMjYwXXwnICtcbiAgJ1t1MDM5MS11MDQ1MV18W3UwMEE3dTAwQTh1MDBCMXUwMEI0dTAwRDd1MDBGN10pKydcbmthbmppID0ga2FuamkucmVwbGFjZSgvdS9nLCAnXFxcXHUnKVxuXG52YXIgYnl0ZSA9ICcoPzooPyFbQS1aMC05ICQlKitcXFxcLS4vOl18JyArIGthbmppICsgJykoPzoufFtcXHJcXG5dKSkrJ1xuXG5leHBvcnRzLktBTkpJID0gbmV3IFJlZ0V4cChrYW5qaSwgJ2cnKVxuZXhwb3J0cy5CWVRFX0tBTkpJID0gbmV3IFJlZ0V4cCgnW15BLVowLTkgJCUqK1xcXFwtLi86XSsnLCAnZycpXG5leHBvcnRzLkJZVEUgPSBuZXcgUmVnRXhwKGJ5dGUsICdnJylcbmV4cG9ydHMuTlVNRVJJQyA9IG5ldyBSZWdFeHAobnVtZXJpYywgJ2cnKVxuZXhwb3J0cy5BTFBIQU5VTUVSSUMgPSBuZXcgUmVnRXhwKGFscGhhbnVtZXJpYywgJ2cnKVxuXG52YXIgVEVTVF9LQU5KSSA9IG5ldyBSZWdFeHAoJ14nICsga2FuamkgKyAnJCcpXG52YXIgVEVTVF9OVU1FUklDID0gbmV3IFJlZ0V4cCgnXicgKyBudW1lcmljICsgJyQnKVxudmFyIFRFU1RfQUxQSEFOVU1FUklDID0gbmV3IFJlZ0V4cCgnXltBLVowLTkgJCUqK1xcXFwtLi86XSskJylcblxuZXhwb3J0cy50ZXN0S2FuamkgPSBmdW5jdGlvbiB0ZXN0S2FuamkgKHN0cikge1xuICByZXR1cm4gVEVTVF9LQU5KSS50ZXN0KHN0cilcbn1cblxuZXhwb3J0cy50ZXN0TnVtZXJpYyA9IGZ1bmN0aW9uIHRlc3ROdW1lcmljIChzdHIpIHtcbiAgcmV0dXJuIFRFU1RfTlVNRVJJQy50ZXN0KHN0cilcbn1cblxuZXhwb3J0cy50ZXN0QWxwaGFudW1lcmljID0gZnVuY3Rpb24gdGVzdEFscGhhbnVtZXJpYyAoc3RyKSB7XG4gIHJldHVybiBURVNUX0FMUEhBTlVNRVJJQy50ZXN0KHN0cilcbn1cbiJdLCJuYW1lcyI6WyJudW1lcmljIiwiYWxwaGFudW1lcmljIiwia2FuamkiLCJyZXBsYWNlIiwiYnl0ZSIsImV4cG9ydHMiLCJLQU5KSSIsIlJlZ0V4cCIsIkJZVEVfS0FOSkkiLCJCWVRFIiwiTlVNRVJJQyIsIkFMUEhBTlVNRVJJQyIsIlRFU1RfS0FOSkkiLCJURVNUX05VTUVSSUMiLCJURVNUX0FMUEhBTlVNRVJJQyIsInRlc3RLYW5qaSIsInN0ciIsInRlc3QiLCJ0ZXN0TnVtZXJpYyIsInRlc3RBbHBoYW51bWVyaWMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/segments.js":
/*!**************************************************!*\
  !*** ./node_modules/qrcode/lib/core/segments.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qrcode/lib/core/mode.js\");\nvar NumericData = __webpack_require__(/*! ./numeric-data */ \"(ssr)/./node_modules/qrcode/lib/core/numeric-data.js\");\nvar AlphanumericData = __webpack_require__(/*! ./alphanumeric-data */ \"(ssr)/./node_modules/qrcode/lib/core/alphanumeric-data.js\");\nvar ByteData = __webpack_require__(/*! ./byte-data */ \"(ssr)/./node_modules/qrcode/lib/core/byte-data.js\");\nvar KanjiData = __webpack_require__(/*! ./kanji-data */ \"(ssr)/./node_modules/qrcode/lib/core/kanji-data.js\");\nvar Regex = __webpack_require__(/*! ./regex */ \"(ssr)/./node_modules/qrcode/lib/core/regex.js\");\nvar Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/core/utils.js\");\nvar dijkstra = __webpack_require__(/*! dijkstrajs */ \"(ssr)/./node_modules/dijkstrajs/dijkstra.js\");\n/**\n * Returns UTF8 byte length\n *\n * @param  {String} str Input string\n * @return {Number}     Number of byte\n */ function getStringByteLength(str) {\n    return unescape(encodeURIComponent(str)).length;\n}\n/**\n * Get a list of segments of the specified mode\n * from a string\n *\n * @param  {Mode}   mode Segment mode\n * @param  {String} str  String to process\n * @return {Array}       Array of object with segments data\n */ function getSegments(regex, mode, str) {\n    var segments = [];\n    var result;\n    while((result = regex.exec(str)) !== null){\n        segments.push({\n            data: result[0],\n            index: result.index,\n            mode: mode,\n            length: result[0].length\n        });\n    }\n    return segments;\n}\n/**\n * Extracts a series of segments with the appropriate\n * modes from a string\n *\n * @param  {String} dataStr Input string\n * @return {Array}          Array of object with segments data\n */ function getSegmentsFromString(dataStr) {\n    var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);\n    var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);\n    var byteSegs;\n    var kanjiSegs;\n    if (Utils.isKanjiModeEnabled()) {\n        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);\n        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);\n    } else {\n        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);\n        kanjiSegs = [];\n    }\n    var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);\n    return segs.sort(function(s1, s2) {\n        return s1.index - s2.index;\n    }).map(function(obj) {\n        return {\n            data: obj.data,\n            mode: obj.mode,\n            length: obj.length\n        };\n    });\n}\n/**\n * Returns how many bits are needed to encode a string of\n * specified length with the specified mode\n *\n * @param  {Number} length String length\n * @param  {Mode} mode     Segment mode\n * @return {Number}        Bit length\n */ function getSegmentBitsLength(length, mode) {\n    switch(mode){\n        case Mode.NUMERIC:\n            return NumericData.getBitsLength(length);\n        case Mode.ALPHANUMERIC:\n            return AlphanumericData.getBitsLength(length);\n        case Mode.KANJI:\n            return KanjiData.getBitsLength(length);\n        case Mode.BYTE:\n            return ByteData.getBitsLength(length);\n    }\n}\n/**\n * Merges adjacent segments which have the same mode\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */ function mergeSegments(segs) {\n    return segs.reduce(function(acc, curr) {\n        var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;\n        if (prevSeg && prevSeg.mode === curr.mode) {\n            acc[acc.length - 1].data += curr.data;\n            return acc;\n        }\n        acc.push(curr);\n        return acc;\n    }, []);\n}\n/**\n * Generates a list of all possible nodes combination which\n * will be used to build a segments graph.\n *\n * Nodes are divided by groups. Each group will contain a list of all the modes\n * in which is possible to encode the given text.\n *\n * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.\n * The group for '12345' will contain then 3 objects, one for each\n * possible encoding mode.\n *\n * Each node represents a possible segment.\n *\n * @param  {Array} segs Array of object with segments data\n * @return {Array}      Array of object with segments data\n */ function buildNodes(segs) {\n    var nodes = [];\n    for(var i = 0; i < segs.length; i++){\n        var seg = segs[i];\n        switch(seg.mode){\n            case Mode.NUMERIC:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.ALPHANUMERIC,\n                        length: seg.length\n                    },\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: seg.length\n                    }\n                ]);\n                break;\n            case Mode.ALPHANUMERIC:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: seg.length\n                    }\n                ]);\n                break;\n            case Mode.KANJI:\n                nodes.push([\n                    seg,\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: getStringByteLength(seg.data)\n                    }\n                ]);\n                break;\n            case Mode.BYTE:\n                nodes.push([\n                    {\n                        data: seg.data,\n                        mode: Mode.BYTE,\n                        length: getStringByteLength(seg.data)\n                    }\n                ]);\n        }\n    }\n    return nodes;\n}\n/**\n * Builds a graph from a list of nodes.\n * All segments in each node group will be connected with all the segments of\n * the next group and so on.\n *\n * At each connection will be assigned a weight depending on the\n * segment's byte length.\n *\n * @param  {Array} nodes    Array of object with segments data\n * @param  {Number} version QR Code version\n * @return {Object}         Graph of all possible segments\n */ function buildGraph(nodes, version) {\n    var table = {};\n    var graph = {\n        \"start\": {}\n    };\n    var prevNodeIds = [\n        \"start\"\n    ];\n    for(var i = 0; i < nodes.length; i++){\n        var nodeGroup = nodes[i];\n        var currentNodeIds = [];\n        for(var j = 0; j < nodeGroup.length; j++){\n            var node = nodeGroup[j];\n            var key = \"\" + i + j;\n            currentNodeIds.push(key);\n            table[key] = {\n                node: node,\n                lastCount: 0\n            };\n            graph[key] = {};\n            for(var n = 0; n < prevNodeIds.length; n++){\n                var prevNodeId = prevNodeIds[n];\n                if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {\n                    graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);\n                    table[prevNodeId].lastCount += node.length;\n                } else {\n                    if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;\n                    graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version) // switch cost\n                    ;\n                }\n            }\n        }\n        prevNodeIds = currentNodeIds;\n    }\n    for(n = 0; n < prevNodeIds.length; n++){\n        graph[prevNodeIds[n]][\"end\"] = 0;\n    }\n    return {\n        map: graph,\n        table: table\n    };\n}\n/**\n * Builds a segment from a specified data and mode.\n * If a mode is not specified, the more suitable will be used.\n *\n * @param  {String} data             Input data\n * @param  {Mode | String} modesHint Data mode\n * @return {Segment}                 Segment\n */ function buildSingleSegment(data, modesHint) {\n    var mode;\n    var bestMode = Mode.getBestModeForData(data);\n    mode = Mode.from(modesHint, bestMode);\n    // Make sure data can be encoded\n    if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {\n        throw new Error('\"' + data + '\"' + \" cannot be encoded with mode \" + Mode.toString(mode) + \".\\n Suggested mode is: \" + Mode.toString(bestMode));\n    }\n    // Use Mode.BYTE if Kanji support is disabled\n    if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {\n        mode = Mode.BYTE;\n    }\n    switch(mode){\n        case Mode.NUMERIC:\n            return new NumericData(data);\n        case Mode.ALPHANUMERIC:\n            return new AlphanumericData(data);\n        case Mode.KANJI:\n            return new KanjiData(data);\n        case Mode.BYTE:\n            return new ByteData(data);\n    }\n}\n/**\n * Builds a list of segments from an array.\n * Array can contain Strings or Objects with segment's info.\n *\n * For each item which is a string, will be generated a segment with the given\n * string and the more appropriate encoding mode.\n *\n * For each item which is an object, will be generated a segment with the given\n * data and mode.\n * Objects must contain at least the property \"data\".\n * If property \"mode\" is not present, the more suitable mode will be used.\n *\n * @param  {Array} array Array of objects with segments data\n * @return {Array}       Array of Segments\n */ exports.fromArray = function fromArray(array) {\n    return array.reduce(function(acc, seg) {\n        if (typeof seg === \"string\") {\n            acc.push(buildSingleSegment(seg, null));\n        } else if (seg.data) {\n            acc.push(buildSingleSegment(seg.data, seg.mode));\n        }\n        return acc;\n    }, []);\n};\n/**\n * Builds an optimized sequence of segments from a string,\n * which will produce the shortest possible bitstream.\n *\n * @param  {String} data    Input string\n * @param  {Number} version QR Code version\n * @return {Array}          Array of segments\n */ exports.fromString = function fromString(data, version) {\n    var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());\n    var nodes = buildNodes(segs);\n    var graph = buildGraph(nodes, version);\n    var path = dijkstra.find_path(graph.map, \"start\", \"end\");\n    var optimizedSegs = [];\n    for(var i = 1; i < path.length - 1; i++){\n        optimizedSegs.push(graph.table[path[i]].node);\n    }\n    return exports.fromArray(mergeSegments(optimizedSegs));\n};\n/**\n * Splits a string in various segments with the modes which\n * best represent their content.\n * The produced segments are far from being optimized.\n * The output of this function is only used to estimate a QR Code version\n * which may contain the data.\n *\n * @param  {string} data Input string\n * @return {Array}       Array of segments\n */ exports.rawSplit = function rawSplit(data) {\n    return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/segments.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/qrcode/lib/core/utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("var toSJISFunction;\nvar CODEWORDS_COUNT = [\n    0,\n    26,\n    44,\n    70,\n    100,\n    134,\n    172,\n    196,\n    242,\n    292,\n    346,\n    404,\n    466,\n    532,\n    581,\n    655,\n    733,\n    815,\n    901,\n    991,\n    1085,\n    1156,\n    1258,\n    1364,\n    1474,\n    1588,\n    1706,\n    1828,\n    1921,\n    2051,\n    2185,\n    2323,\n    2465,\n    2611,\n    2761,\n    2876,\n    3034,\n    3196,\n    3362,\n    3532,\n    3706\n];\n/**\n * Returns the QR Code size for the specified version\n *\n * @param  {Number} version QR Code version\n * @return {Number}         size of QR code\n */ exports.getSymbolSize = function getSymbolSize(version) {\n    if (!version) throw new Error('\"version\" cannot be null or undefined');\n    if (version < 1 || version > 40) throw new Error('\"version\" should be in range from 1 to 40');\n    return version * 4 + 17;\n};\n/**\n * Returns the total number of codewords used to store data and EC information.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Data length in bits\n */ exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {\n    return CODEWORDS_COUNT[version];\n};\n/**\n * Encode data with Bose-Chaudhuri-Hocquenghem\n *\n * @param  {Number} data Value to encode\n * @return {Number}      Encoded value\n */ exports.getBCHDigit = function(data) {\n    var digit = 0;\n    while(data !== 0){\n        digit++;\n        data >>>= 1;\n    }\n    return digit;\n};\nexports.setToSJISFunction = function setToSJISFunction(f) {\n    if (typeof f !== \"function\") {\n        throw new Error('\"toSJISFunc\" is not a valid function.');\n    }\n    toSJISFunction = f;\n};\nexports.isKanjiModeEnabled = function() {\n    return typeof toSJISFunction !== \"undefined\";\n};\nexports.toSJIS = function toSJIS(kanji) {\n    return toSJISFunction(kanji);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBO0FBQ0osSUFBSUMsa0JBQWtCO0lBQ3BCO0lBQ0E7SUFBSTtJQUFJO0lBQUk7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFDMUM7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFBSztJQUFLO0lBQUs7SUFDN0M7SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFDdEQ7SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07SUFBTTtJQUFNO0lBQU07Q0FDdkQ7QUFFRDs7Ozs7Q0FLQyxHQUNEQyxxQkFBcUIsR0FBRyxTQUFTQyxjQUFlQyxPQUFPO0lBQ3JELElBQUksQ0FBQ0EsU0FBUyxNQUFNLElBQUlDLE1BQU07SUFDOUIsSUFBSUQsVUFBVSxLQUFLQSxVQUFVLElBQUksTUFBTSxJQUFJQyxNQUFNO0lBQ2pELE9BQU9ELFVBQVUsSUFBSTtBQUN2QjtBQUVBOzs7OztDQUtDLEdBQ0RGLCtCQUErQixHQUFHLFNBQVNJLHdCQUF5QkYsT0FBTztJQUN6RSxPQUFPSCxlQUFlLENBQUNHLFFBQVE7QUFDakM7QUFFQTs7Ozs7Q0FLQyxHQUNERixtQkFBbUIsR0FBRyxTQUFVTSxJQUFJO0lBQ2xDLElBQUlDLFFBQVE7SUFFWixNQUFPRCxTQUFTLEVBQUc7UUFDakJDO1FBQ0FELFVBQVU7SUFDWjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQVAseUJBQXlCLEdBQUcsU0FBU1Esa0JBQW1CQyxDQUFDO0lBQ3ZELElBQUksT0FBT0EsTUFBTSxZQUFZO1FBQzNCLE1BQU0sSUFBSU4sTUFBTTtJQUNsQjtJQUVBTCxpQkFBaUJXO0FBQ25CO0FBRUFULDBCQUEwQixHQUFHO0lBQzNCLE9BQU8sT0FBT0YsbUJBQW1CO0FBQ25DO0FBRUFFLGNBQWMsR0FBRyxTQUFTVyxPQUFRQyxLQUFLO0lBQ3JDLE9BQU9kLGVBQWVjO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3V0aWxzLmpzPzQ1YzciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU0pJU0Z1bmN0aW9uXG52YXIgQ09ERVdPUkRTX0NPVU5UID0gW1xuICAwLCAvLyBOb3QgdXNlZFxuICAyNiwgNDQsIDcwLCAxMDAsIDEzNCwgMTcyLCAxOTYsIDI0MiwgMjkyLCAzNDYsXG4gIDQwNCwgNDY2LCA1MzIsIDU4MSwgNjU1LCA3MzMsIDgxNSwgOTAxLCA5OTEsIDEwODUsXG4gIDExNTYsIDEyNTgsIDEzNjQsIDE0NzQsIDE1ODgsIDE3MDYsIDE4MjgsIDE5MjEsIDIwNTEsIDIxODUsXG4gIDIzMjMsIDI0NjUsIDI2MTEsIDI3NjEsIDI4NzYsIDMwMzQsIDMxOTYsIDMzNjIsIDM1MzIsIDM3MDZcbl1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBRUiBDb2RlIHNpemUgZm9yIHRoZSBzcGVjaWZpZWQgdmVyc2lvblxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgICBzaXplIG9mIFFSIGNvZGVcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xTaXplID0gZnVuY3Rpb24gZ2V0U3ltYm9sU2l6ZSAodmVyc2lvbikge1xuICBpZiAoIXZlcnNpb24pIHRocm93IG5ldyBFcnJvcignXCJ2ZXJzaW9uXCIgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJylcbiAgaWYgKHZlcnNpb24gPCAxIHx8IHZlcnNpb24gPiA0MCkgdGhyb3cgbmV3IEVycm9yKCdcInZlcnNpb25cIiBzaG91bGQgYmUgaW4gcmFuZ2UgZnJvbSAxIHRvIDQwJylcbiAgcmV0dXJuIHZlcnNpb24gKiA0ICsgMTdcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0b3RhbCBudW1iZXIgb2YgY29kZXdvcmRzIHVzZWQgdG8gc3RvcmUgZGF0YSBhbmQgRUMgaW5mb3JtYXRpb24uXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB2ZXJzaW9uIFFSIENvZGUgdmVyc2lvblxuICogQHJldHVybiB7TnVtYmVyfSAgICAgICAgIERhdGEgbGVuZ3RoIGluIGJpdHNcbiAqL1xuZXhwb3J0cy5nZXRTeW1ib2xUb3RhbENvZGV3b3JkcyA9IGZ1bmN0aW9uIGdldFN5bWJvbFRvdGFsQ29kZXdvcmRzICh2ZXJzaW9uKSB7XG4gIHJldHVybiBDT0RFV09SRFNfQ09VTlRbdmVyc2lvbl1cbn1cblxuLyoqXG4gKiBFbmNvZGUgZGF0YSB3aXRoIEJvc2UtQ2hhdWRodXJpLUhvY3F1ZW5naGVtXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBkYXRhIFZhbHVlIHRvIGVuY29kZVxuICogQHJldHVybiB7TnVtYmVyfSAgICAgIEVuY29kZWQgdmFsdWVcbiAqL1xuZXhwb3J0cy5nZXRCQ0hEaWdpdCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBkaWdpdCA9IDBcblxuICB3aGlsZSAoZGF0YSAhPT0gMCkge1xuICAgIGRpZ2l0KytcbiAgICBkYXRhID4+Pj0gMVxuICB9XG5cbiAgcmV0dXJuIGRpZ2l0XG59XG5cbmV4cG9ydHMuc2V0VG9TSklTRnVuY3Rpb24gPSBmdW5jdGlvbiBzZXRUb1NKSVNGdW5jdGlvbiAoZikge1xuICBpZiAodHlwZW9mIGYgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1widG9TSklTRnVuY1wiIGlzIG5vdCBhIHZhbGlkIGZ1bmN0aW9uLicpXG4gIH1cblxuICB0b1NKSVNGdW5jdGlvbiA9IGZcbn1cblxuZXhwb3J0cy5pc0thbmppTW9kZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgdG9TSklTRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnXG59XG5cbmV4cG9ydHMudG9TSklTID0gZnVuY3Rpb24gdG9TSklTIChrYW5qaSkge1xuICByZXR1cm4gdG9TSklTRnVuY3Rpb24oa2FuamkpXG59XG4iXSwibmFtZXMiOlsidG9TSklTRnVuY3Rpb24iLCJDT0RFV09SRFNfQ09VTlQiLCJleHBvcnRzIiwiZ2V0U3ltYm9sU2l6ZSIsInZlcnNpb24iLCJFcnJvciIsImdldFN5bWJvbFRvdGFsQ29kZXdvcmRzIiwiZ2V0QkNIRGlnaXQiLCJkYXRhIiwiZGlnaXQiLCJzZXRUb1NKSVNGdW5jdGlvbiIsImYiLCJpc0thbmppTW9kZUVuYWJsZWQiLCJ0b1NKSVMiLCJrYW5qaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/version-check.js":
/*!*******************************************************!*\
  !*** ./node_modules/qrcode/lib/core/version-check.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Check if QR Code version is valid\n *\n * @param  {Number}  version QR Code version\n * @return {Boolean}         true if valid version, false otherwise\n */ exports.isValid = function isValid(version) {\n    return !isNaN(version) && version >= 1 && version <= 40;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9jb3JlL3ZlcnNpb24tY2hlY2suanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0MsR0FDREEsZUFBZSxHQUFHLFNBQVNDLFFBQVNDLE9BQU87SUFDekMsT0FBTyxDQUFDQyxNQUFNRCxZQUFZQSxXQUFXLEtBQUtBLFdBQVc7QUFDdkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL2NvcmUvdmVyc2lvbi1jaGVjay5qcz9hODJmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2hlY2sgaWYgUVIgQ29kZSB2ZXJzaW9uIGlzIHZhbGlkXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSAgdmVyc2lvbiBRUiBDb2RlIHZlcnNpb25cbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgICAgdHJ1ZSBpZiB2YWxpZCB2ZXJzaW9uLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0cy5pc1ZhbGlkID0gZnVuY3Rpb24gaXNWYWxpZCAodmVyc2lvbikge1xuICByZXR1cm4gIWlzTmFOKHZlcnNpb24pICYmIHZlcnNpb24gPj0gMSAmJiB2ZXJzaW9uIDw9IDQwXG59XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsImlzVmFsaWQiLCJ2ZXJzaW9uIiwiaXNOYU4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/version-check.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/core/version.js":
/*!*************************************************!*\
  !*** ./node_modules/qrcode/lib/core/version.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/core/utils.js\");\nvar ECCode = __webpack_require__(/*! ./error-correction-code */ \"(ssr)/./node_modules/qrcode/lib/core/error-correction-code.js\");\nvar ECLevel = __webpack_require__(/*! ./error-correction-level */ \"(ssr)/./node_modules/qrcode/lib/core/error-correction-level.js\");\nvar Mode = __webpack_require__(/*! ./mode */ \"(ssr)/./node_modules/qrcode/lib/core/mode.js\");\nvar VersionCheck = __webpack_require__(/*! ./version-check */ \"(ssr)/./node_modules/qrcode/lib/core/version-check.js\");\nvar isArray = __webpack_require__(/*! isarray */ \"(ssr)/./node_modules/isarray/index.js\");\n// Generator polynomial used to encode version information\nvar G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\nvar G18_BCH = Utils.getBCHDigit(G18);\nfunction getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n    for(var currentVersion = 1; currentVersion <= 40; currentVersion++){\n        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n            return currentVersion;\n        }\n    }\n    return undefined;\n}\nfunction getReservedBitsCount(mode, version) {\n    // Character count indicator + mode indicator bits\n    return Mode.getCharCountIndicator(mode, version) + 4;\n}\nfunction getTotalBitsFromDataArray(segments, version) {\n    var totalBits = 0;\n    segments.forEach(function(data) {\n        var reservedBits = getReservedBitsCount(data.mode, version);\n        totalBits += reservedBits + data.getBitsLength();\n    });\n    return totalBits;\n}\nfunction getBestVersionForMixedData(segments, errorCorrectionLevel) {\n    for(var currentVersion = 1; currentVersion <= 40; currentVersion++){\n        var length = getTotalBitsFromDataArray(segments, currentVersion);\n        if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n            return currentVersion;\n        }\n    }\n    return undefined;\n}\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */ exports.from = function from(value, defaultValue) {\n    if (VersionCheck.isValid(value)) {\n        return parseInt(value, 10);\n    }\n    return defaultValue;\n};\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */ exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n    if (!VersionCheck.isValid(version)) {\n        throw new Error(\"Invalid QR Code version\");\n    }\n    // Use Byte mode as default\n    if (typeof mode === \"undefined\") mode = Mode.BYTE;\n    // Total codewords for this QR code version (Data + Error correction)\n    var totalCodewords = Utils.getSymbolTotalCodewords(version);\n    // Total number of error correction codewords\n    var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n    // Total number of data codewords\n    var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n    if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n    var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);\n    // Return max number of storable codewords\n    switch(mode){\n        case Mode.NUMERIC:\n            return Math.floor(usableBits / 10 * 3);\n        case Mode.ALPHANUMERIC:\n            return Math.floor(usableBits / 11 * 2);\n        case Mode.KANJI:\n            return Math.floor(usableBits / 13);\n        case Mode.BYTE:\n        default:\n            return Math.floor(usableBits / 8);\n    }\n};\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */ exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n    var seg;\n    var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n    if (isArray(data)) {\n        if (data.length > 1) {\n            return getBestVersionForMixedData(data, ecl);\n        }\n        if (data.length === 0) {\n            return 1;\n        }\n        seg = data[0];\n    } else {\n        seg = data;\n    }\n    return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n};\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */ exports.getEncodedBits = function getEncodedBits(version) {\n    if (!VersionCheck.isValid(version) || version < 7) {\n        throw new Error(\"Invalid QR Code version\");\n    }\n    var d = version << 12;\n    while(Utils.getBCHDigit(d) - G18_BCH >= 0){\n        d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n    }\n    return version << 12 | d;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/core/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/index.js":
/*!******************************************!*\
  !*** ./node_modules/qrcode/lib/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n*copyright Ryan Day 2012\n*\n* Licensed under the MIT license:\n*   http://www.opensource.org/licenses/mit-license.php\n*\n* this is the main server side application file for node-qrcode.\n* these exports use serverside canvas api methods for file IO and buffers\n*\n*/ \nmodule.exports = __webpack_require__(/*! ./server */ \"(ssr)/./node_modules/qrcode/lib/server.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBU0E7QUFFQUEsaUdBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9pbmRleC5qcz84YzkxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4qY29weXJpZ2h0IFJ5YW4gRGF5IDIwMTJcbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuKiAgIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4qXG4qIHRoaXMgaXMgdGhlIG1haW4gc2VydmVyIHNpZGUgYXBwbGljYXRpb24gZmlsZSBmb3Igbm9kZS1xcmNvZGUuXG4qIHRoZXNlIGV4cG9ydHMgdXNlIHNlcnZlcnNpZGUgY2FudmFzIGFwaSBtZXRob2RzIGZvciBmaWxlIElPIGFuZCBidWZmZXJzXG4qXG4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc2VydmVyJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/renderer/canvas.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/canvas.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/renderer/utils.js\");\nfunction clearCanvas(ctx, canvas, size) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    if (!canvas.style) canvas.style = {};\n    canvas.height = size;\n    canvas.width = size;\n    canvas.style.height = size + \"px\";\n    canvas.style.width = size + \"px\";\n}\nfunction getCanvasElement() {\n    try {\n        return document.createElement(\"canvas\");\n    } catch (e) {\n        throw new Error(\"You need to specify a canvas element\");\n    }\n}\nexports.render = function render(qrData, canvas, options) {\n    var opts = options;\n    var canvasEl = canvas;\n    if (typeof opts === \"undefined\" && (!canvas || !canvas.getContext)) {\n        opts = canvas;\n        canvas = undefined;\n    }\n    if (!canvas) {\n        canvasEl = getCanvasElement();\n    }\n    opts = Utils.getOptions(opts);\n    var size = Utils.getImageWidth(qrData.modules.size, opts);\n    var ctx = canvasEl.getContext(\"2d\");\n    var image = ctx.createImageData(size, size);\n    Utils.qrToImageData(image.data, qrData, opts);\n    clearCanvas(ctx, canvasEl, size);\n    ctx.putImageData(image, 0, 0);\n    return canvasEl;\n};\nexports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {\n    var opts = options;\n    if (typeof opts === \"undefined\" && (!canvas || !canvas.getContext)) {\n        opts = canvas;\n        canvas = undefined;\n    }\n    if (!opts) opts = {};\n    var canvasEl = exports.render(qrData, canvas, opts);\n    var type = opts.type || \"image/png\";\n    var rendererOpts = opts.rendererOpts || {};\n    return canvasEl.toDataURL(type, rendererOpts.quality);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9jYW52YXMuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUM7QUFFcEIsU0FBU0MsWUFBYUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLElBQUk7SUFDckNGLElBQUlHLFNBQVMsQ0FBQyxHQUFHLEdBQUdGLE9BQU9HLEtBQUssRUFBRUgsT0FBT0ksTUFBTTtJQUUvQyxJQUFJLENBQUNKLE9BQU9LLEtBQUssRUFBRUwsT0FBT0ssS0FBSyxHQUFHLENBQUM7SUFDbkNMLE9BQU9JLE1BQU0sR0FBR0g7SUFDaEJELE9BQU9HLEtBQUssR0FBR0Y7SUFDZkQsT0FBT0ssS0FBSyxDQUFDRCxNQUFNLEdBQUdILE9BQU87SUFDN0JELE9BQU9LLEtBQUssQ0FBQ0YsS0FBSyxHQUFHRixPQUFPO0FBQzlCO0FBRUEsU0FBU0s7SUFDUCxJQUFJO1FBQ0YsT0FBT0MsU0FBU0MsYUFBYSxDQUFDO0lBQ2hDLEVBQUUsT0FBT0MsR0FBRztRQUNWLE1BQU0sSUFBSUMsTUFBTTtJQUNsQjtBQUNGO0FBRUFDLGNBQWMsR0FBRyxTQUFTQyxPQUFRQyxNQUFNLEVBQUViLE1BQU0sRUFBRWMsT0FBTztJQUN2RCxJQUFJQyxPQUFPRDtJQUNYLElBQUlFLFdBQVdoQjtJQUVmLElBQUksT0FBT2UsU0FBUyxlQUFnQixFQUFDZixVQUFVLENBQUNBLE9BQU9pQixVQUFVLEdBQUc7UUFDbEVGLE9BQU9mO1FBQ1BBLFNBQVNrQjtJQUNYO0lBRUEsSUFBSSxDQUFDbEIsUUFBUTtRQUNYZ0IsV0FBV1Y7SUFDYjtJQUVBUyxPQUFPbkIsTUFBTXVCLFVBQVUsQ0FBQ0o7SUFDeEIsSUFBSWQsT0FBT0wsTUFBTXdCLGFBQWEsQ0FBQ1AsT0FBT1EsT0FBTyxDQUFDcEIsSUFBSSxFQUFFYztJQUVwRCxJQUFJaEIsTUFBTWlCLFNBQVNDLFVBQVUsQ0FBQztJQUM5QixJQUFJSyxRQUFRdkIsSUFBSXdCLGVBQWUsQ0FBQ3RCLE1BQU1BO0lBQ3RDTCxNQUFNNEIsYUFBYSxDQUFDRixNQUFNRyxJQUFJLEVBQUVaLFFBQVFFO0lBRXhDakIsWUFBWUMsS0FBS2lCLFVBQVVmO0lBQzNCRixJQUFJMkIsWUFBWSxDQUFDSixPQUFPLEdBQUc7SUFFM0IsT0FBT047QUFDVDtBQUVBTCx1QkFBdUIsR0FBRyxTQUFTZ0IsZ0JBQWlCZCxNQUFNLEVBQUViLE1BQU0sRUFBRWMsT0FBTztJQUN6RSxJQUFJQyxPQUFPRDtJQUVYLElBQUksT0FBT0MsU0FBUyxlQUFnQixFQUFDZixVQUFVLENBQUNBLE9BQU9pQixVQUFVLEdBQUc7UUFDbEVGLE9BQU9mO1FBQ1BBLFNBQVNrQjtJQUNYO0lBRUEsSUFBSSxDQUFDSCxNQUFNQSxPQUFPLENBQUM7SUFFbkIsSUFBSUMsV0FBV0wsUUFBUUMsTUFBTSxDQUFDQyxRQUFRYixRQUFRZTtJQUU5QyxJQUFJYSxPQUFPYixLQUFLYSxJQUFJLElBQUk7SUFDeEIsSUFBSUMsZUFBZWQsS0FBS2MsWUFBWSxJQUFJLENBQUM7SUFFekMsT0FBT2IsU0FBU2MsU0FBUyxDQUFDRixNQUFNQyxhQUFhRSxPQUFPO0FBQ3REIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9jYW52YXMuanM/OTViMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxuZnVuY3Rpb24gY2xlYXJDYW52YXMgKGN0eCwgY2FudmFzLCBzaXplKSB7XG4gIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuXG4gIGlmICghY2FudmFzLnN0eWxlKSBjYW52YXMuc3R5bGUgPSB7fVxuICBjYW52YXMuaGVpZ2h0ID0gc2l6ZVxuICBjYW52YXMud2lkdGggPSBzaXplXG4gIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBzaXplICsgJ3B4J1xuICBjYW52YXMuc3R5bGUud2lkdGggPSBzaXplICsgJ3B4J1xufVxuXG5mdW5jdGlvbiBnZXRDYW52YXNFbGVtZW50ICgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJylcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IG5lZWQgdG8gc3BlY2lmeSBhIGNhbnZhcyBlbGVtZW50JylcbiAgfVxufVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocXJEYXRhLCBjYW52YXMsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zXG4gIHZhciBjYW52YXNFbCA9IGNhbnZhc1xuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3VuZGVmaW5lZCcgJiYgKCFjYW52YXMgfHwgIWNhbnZhcy5nZXRDb250ZXh0KSkge1xuICAgIG9wdHMgPSBjYW52YXNcbiAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICghY2FudmFzKSB7XG4gICAgY2FudmFzRWwgPSBnZXRDYW52YXNFbGVtZW50KClcbiAgfVxuXG4gIG9wdHMgPSBVdGlscy5nZXRPcHRpb25zKG9wdHMpXG4gIHZhciBzaXplID0gVXRpbHMuZ2V0SW1hZ2VXaWR0aChxckRhdGEubW9kdWxlcy5zaXplLCBvcHRzKVxuXG4gIHZhciBjdHggPSBjYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpXG4gIHZhciBpbWFnZSA9IGN0eC5jcmVhdGVJbWFnZURhdGEoc2l6ZSwgc2l6ZSlcbiAgVXRpbHMucXJUb0ltYWdlRGF0YShpbWFnZS5kYXRhLCBxckRhdGEsIG9wdHMpXG5cbiAgY2xlYXJDYW52YXMoY3R4LCBjYW52YXNFbCwgc2l6ZSlcbiAgY3R4LnB1dEltYWdlRGF0YShpbWFnZSwgMCwgMClcblxuICByZXR1cm4gY2FudmFzRWxcbn1cblxuZXhwb3J0cy5yZW5kZXJUb0RhdGFVUkwgPSBmdW5jdGlvbiByZW5kZXJUb0RhdGFVUkwgKHFyRGF0YSwgY2FudmFzLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9uc1xuXG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gJ3VuZGVmaW5lZCcgJiYgKCFjYW52YXMgfHwgIWNhbnZhcy5nZXRDb250ZXh0KSkge1xuICAgIG9wdHMgPSBjYW52YXNcbiAgICBjYW52YXMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICghb3B0cykgb3B0cyA9IHt9XG5cbiAgdmFyIGNhbnZhc0VsID0gZXhwb3J0cy5yZW5kZXIocXJEYXRhLCBjYW52YXMsIG9wdHMpXG5cbiAgdmFyIHR5cGUgPSBvcHRzLnR5cGUgfHwgJ2ltYWdlL3BuZydcbiAgdmFyIHJlbmRlcmVyT3B0cyA9IG9wdHMucmVuZGVyZXJPcHRzIHx8IHt9XG5cbiAgcmV0dXJuIGNhbnZhc0VsLnRvRGF0YVVSTCh0eXBlLCByZW5kZXJlck9wdHMucXVhbGl0eSlcbn1cbiJdLCJuYW1lcyI6WyJVdGlscyIsInJlcXVpcmUiLCJjbGVhckNhbnZhcyIsImN0eCIsImNhbnZhcyIsInNpemUiLCJjbGVhclJlY3QiLCJ3aWR0aCIsImhlaWdodCIsInN0eWxlIiwiZ2V0Q2FudmFzRWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImUiLCJFcnJvciIsImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwib3B0cyIsImNhbnZhc0VsIiwiZ2V0Q29udGV4dCIsInVuZGVmaW5lZCIsImdldE9wdGlvbnMiLCJnZXRJbWFnZVdpZHRoIiwibW9kdWxlcyIsImltYWdlIiwiY3JlYXRlSW1hZ2VEYXRhIiwicXJUb0ltYWdlRGF0YSIsImRhdGEiLCJwdXRJbWFnZURhdGEiLCJyZW5kZXJUb0RhdGFVUkwiLCJ0eXBlIiwicmVuZGVyZXJPcHRzIiwidG9EYXRhVVJMIiwicXVhbGl0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/renderer/canvas.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/renderer/png.js":
/*!*************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/png.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\");\nvar PNG = (__webpack_require__(/*! pngjs */ \"(ssr)/./node_modules/pngjs/lib/png.js\").PNG);\nvar Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/renderer/utils.js\");\nexports.render = function render(qrData, options) {\n    var opts = Utils.getOptions(options);\n    var pngOpts = opts.rendererOpts;\n    var size = Utils.getImageWidth(qrData.modules.size, opts);\n    pngOpts.width = size;\n    pngOpts.height = size;\n    var pngImage = new PNG(pngOpts);\n    Utils.qrToImageData(pngImage.data, qrData, opts);\n    return pngImage;\n};\nexports.renderToDataURL = function renderToDataURL(qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    exports.renderToBuffer(qrData, options, function(err, output) {\n        if (err) cb(err);\n        var url = \"data:image/png;base64,\";\n        url += output.toString(\"base64\");\n        cb(null, url);\n    });\n};\nexports.renderToBuffer = function renderToBuffer(qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    var png = exports.render(qrData, options);\n    var buffer = [];\n    png.on(\"error\", cb);\n    png.on(\"data\", function(data) {\n        buffer.push(data);\n    });\n    png.on(\"end\", function() {\n        cb(null, Buffer.concat(buffer));\n    });\n    png.pack();\n};\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    var stream = fs.createWriteStream(path);\n    stream.on(\"error\", cb);\n    stream.on(\"close\", cb);\n    exports.renderToFileStream(stream, qrData, options);\n};\nexports.renderToFileStream = function renderToFileStream(stream, qrData, options) {\n    var png = exports.render(qrData, options);\n    png.pack().pipe(stream);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9wbmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDakIsSUFBSUMsTUFBTUQsK0VBQW9CO0FBQzlCLElBQUlFLFFBQVFGLG1CQUFPQSxDQUFDO0FBRXBCRyxjQUFjLEdBQUcsU0FBU0MsT0FBUUMsTUFBTSxFQUFFQyxPQUFPO0lBQy9DLElBQUlDLE9BQU9MLE1BQU1NLFVBQVUsQ0FBQ0Y7SUFDNUIsSUFBSUcsVUFBVUYsS0FBS0csWUFBWTtJQUMvQixJQUFJQyxPQUFPVCxNQUFNVSxhQUFhLENBQUNQLE9BQU9RLE9BQU8sQ0FBQ0YsSUFBSSxFQUFFSjtJQUVwREUsUUFBUUssS0FBSyxHQUFHSDtJQUNoQkYsUUFBUU0sTUFBTSxHQUFHSjtJQUVqQixJQUFJSyxXQUFXLElBQUlmLElBQUlRO0lBQ3ZCUCxNQUFNZSxhQUFhLENBQUNELFNBQVNFLElBQUksRUFBRWIsUUFBUUU7SUFFM0MsT0FBT1M7QUFDVDtBQUVBYix1QkFBdUIsR0FBRyxTQUFTZ0IsZ0JBQWlCZCxNQUFNLEVBQUVDLE9BQU8sRUFBRWMsRUFBRTtJQUNyRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS2Q7UUFDTEEsVUFBVWU7SUFDWjtJQUVBbEIsUUFBUW1CLGNBQWMsQ0FBQ2pCLFFBQVFDLFNBQVMsU0FBVWlCLEdBQUcsRUFBRUMsTUFBTTtRQUMzRCxJQUFJRCxLQUFLSCxHQUFHRztRQUNaLElBQUlFLE1BQU07UUFDVkEsT0FBT0QsT0FBT0UsUUFBUSxDQUFDO1FBQ3ZCTixHQUFHLE1BQU1LO0lBQ1g7QUFDRjtBQUVBdEIsc0JBQXNCLEdBQUcsU0FBU21CLGVBQWdCakIsTUFBTSxFQUFFQyxPQUFPLEVBQUVjLEVBQUU7SUFDbkUsSUFBSSxPQUFPQSxPQUFPLGFBQWE7UUFDN0JBLEtBQUtkO1FBQ0xBLFVBQVVlO0lBQ1o7SUFFQSxJQUFJTSxNQUFNeEIsUUFBUUMsTUFBTSxDQUFDQyxRQUFRQztJQUNqQyxJQUFJc0IsU0FBUyxFQUFFO0lBRWZELElBQUlFLEVBQUUsQ0FBQyxTQUFTVDtJQUVoQk8sSUFBSUUsRUFBRSxDQUFDLFFBQVEsU0FBVVgsSUFBSTtRQUMzQlUsT0FBT0UsSUFBSSxDQUFDWjtJQUNkO0lBRUFTLElBQUlFLEVBQUUsQ0FBQyxPQUFPO1FBQ1pULEdBQUcsTUFBTVcsT0FBT0MsTUFBTSxDQUFDSjtJQUN6QjtJQUVBRCxJQUFJTSxJQUFJO0FBQ1Y7QUFFQTlCLG9CQUFvQixHQUFHLFNBQVMrQixhQUFjQyxJQUFJLEVBQUU5QixNQUFNLEVBQUVDLE9BQU8sRUFBRWMsRUFBRTtJQUNyRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS2Q7UUFDTEEsVUFBVWU7SUFDWjtJQUVBLElBQUllLFNBQVNyQyxHQUFHc0MsaUJBQWlCLENBQUNGO0lBQ2xDQyxPQUFPUCxFQUFFLENBQUMsU0FBU1Q7SUFDbkJnQixPQUFPUCxFQUFFLENBQUMsU0FBU1Q7SUFFbkJqQixRQUFRbUMsa0JBQWtCLENBQUNGLFFBQVEvQixRQUFRQztBQUM3QztBQUVBSCwwQkFBMEIsR0FBRyxTQUFTbUMsbUJBQW9CRixNQUFNLEVBQUUvQixNQUFNLEVBQUVDLE9BQU87SUFDL0UsSUFBSXFCLE1BQU14QixRQUFRQyxNQUFNLENBQUNDLFFBQVFDO0lBQ2pDcUIsSUFBSU0sSUFBSSxHQUFHTSxJQUFJLENBQUNIO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9wbmcuanM/YWFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnMgPSByZXF1aXJlKCdmcycpXG52YXIgUE5HID0gcmVxdWlyZSgncG5nanMnKS5QTkdcbnZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocXJEYXRhLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICB2YXIgcG5nT3B0cyA9IG9wdHMucmVuZGVyZXJPcHRzXG4gIHZhciBzaXplID0gVXRpbHMuZ2V0SW1hZ2VXaWR0aChxckRhdGEubW9kdWxlcy5zaXplLCBvcHRzKVxuXG4gIHBuZ09wdHMud2lkdGggPSBzaXplXG4gIHBuZ09wdHMuaGVpZ2h0ID0gc2l6ZVxuXG4gIHZhciBwbmdJbWFnZSA9IG5ldyBQTkcocG5nT3B0cylcbiAgVXRpbHMucXJUb0ltYWdlRGF0YShwbmdJbWFnZS5kYXRhLCBxckRhdGEsIG9wdHMpXG5cbiAgcmV0dXJuIHBuZ0ltYWdlXG59XG5cbmV4cG9ydHMucmVuZGVyVG9EYXRhVVJMID0gZnVuY3Rpb24gcmVuZGVyVG9EYXRhVVJMIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGlmICh0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgZXhwb3J0cy5yZW5kZXJUb0J1ZmZlcihxckRhdGEsIG9wdGlvbnMsIGZ1bmN0aW9uIChlcnIsIG91dHB1dCkge1xuICAgIGlmIChlcnIpIGNiKGVycilcbiAgICB2YXIgdXJsID0gJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwnXG4gICAgdXJsICs9IG91dHB1dC50b1N0cmluZygnYmFzZTY0JylcbiAgICBjYihudWxsLCB1cmwpXG4gIH0pXG59XG5cbmV4cG9ydHMucmVuZGVyVG9CdWZmZXIgPSBmdW5jdGlvbiByZW5kZXJUb0J1ZmZlciAocXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIHZhciBwbmcgPSBleHBvcnRzLnJlbmRlcihxckRhdGEsIG9wdGlvbnMpXG4gIHZhciBidWZmZXIgPSBbXVxuXG4gIHBuZy5vbignZXJyb3InLCBjYilcblxuICBwbmcub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGJ1ZmZlci5wdXNoKGRhdGEpXG4gIH0pXG5cbiAgcG5nLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgY2IobnVsbCwgQnVmZmVyLmNvbmNhdChidWZmZXIpKVxuICB9KVxuXG4gIHBuZy5wYWNrKClcbn1cblxuZXhwb3J0cy5yZW5kZXJUb0ZpbGUgPSBmdW5jdGlvbiByZW5kZXJUb0ZpbGUgKHBhdGgsIHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYiA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkXG4gIH1cblxuICB2YXIgc3RyZWFtID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ocGF0aClcbiAgc3RyZWFtLm9uKCdlcnJvcicsIGNiKVxuICBzdHJlYW0ub24oJ2Nsb3NlJywgY2IpXG5cbiAgZXhwb3J0cy5yZW5kZXJUb0ZpbGVTdHJlYW0oc3RyZWFtLCBxckRhdGEsIG9wdGlvbnMpXG59XG5cbmV4cG9ydHMucmVuZGVyVG9GaWxlU3RyZWFtID0gZnVuY3Rpb24gcmVuZGVyVG9GaWxlU3RyZWFtIChzdHJlYW0sIHFyRGF0YSwgb3B0aW9ucykge1xuICB2YXIgcG5nID0gZXhwb3J0cy5yZW5kZXIocXJEYXRhLCBvcHRpb25zKVxuICBwbmcucGFjaygpLnBpcGUoc3RyZWFtKVxufVxuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsIlBORyIsIlV0aWxzIiwiZXhwb3J0cyIsInJlbmRlciIsInFyRGF0YSIsIm9wdGlvbnMiLCJvcHRzIiwiZ2V0T3B0aW9ucyIsInBuZ09wdHMiLCJyZW5kZXJlck9wdHMiLCJzaXplIiwiZ2V0SW1hZ2VXaWR0aCIsIm1vZHVsZXMiLCJ3aWR0aCIsImhlaWdodCIsInBuZ0ltYWdlIiwicXJUb0ltYWdlRGF0YSIsImRhdGEiLCJyZW5kZXJUb0RhdGFVUkwiLCJjYiIsInVuZGVmaW5lZCIsInJlbmRlclRvQnVmZmVyIiwiZXJyIiwib3V0cHV0IiwidXJsIiwidG9TdHJpbmciLCJwbmciLCJidWZmZXIiLCJvbiIsInB1c2giLCJCdWZmZXIiLCJjb25jYXQiLCJwYWNrIiwicmVuZGVyVG9GaWxlIiwicGF0aCIsInN0cmVhbSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwicmVuZGVyVG9GaWxlU3RyZWFtIiwicGlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/renderer/png.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/renderer/svg-tag.js":
/*!*****************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/svg-tag.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/renderer/utils.js\");\nfunction getColorAttrib(color, attrib) {\n    var alpha = color.a / 255;\n    var str = attrib + '=\"' + color.hex + '\"';\n    return alpha < 1 ? str + \" \" + attrib + '-opacity=\"' + alpha.toFixed(2).slice(1) + '\"' : str;\n}\nfunction svgCmd(cmd, x, y) {\n    var str = cmd + x;\n    if (typeof y !== \"undefined\") str += \" \" + y;\n    return str;\n}\nfunction qrToPath(data, size, margin) {\n    var path = \"\";\n    var moveBy = 0;\n    var newRow = false;\n    var lineLength = 0;\n    for(var i = 0; i < data.length; i++){\n        var col = Math.floor(i % size);\n        var row = Math.floor(i / size);\n        if (!col && !newRow) newRow = true;\n        if (data[i]) {\n            lineLength++;\n            if (!(i > 0 && col > 0 && data[i - 1])) {\n                path += newRow ? svgCmd(\"M\", col + margin, 0.5 + row + margin) : svgCmd(\"m\", moveBy, 0);\n                moveBy = 0;\n                newRow = false;\n            }\n            if (!(col + 1 < size && data[i + 1])) {\n                path += svgCmd(\"h\", lineLength);\n                lineLength = 0;\n            }\n        } else {\n            moveBy++;\n        }\n    }\n    return path;\n}\nexports.render = function render(qrData, options, cb) {\n    var opts = Utils.getOptions(options);\n    var size = qrData.modules.size;\n    var data = qrData.modules.data;\n    var qrcodesize = size + opts.margin * 2;\n    var bg = !opts.color.light.a ? \"\" : \"<path \" + getColorAttrib(opts.color.light, \"fill\") + ' d=\"M0 0h' + qrcodesize + \"v\" + qrcodesize + 'H0z\"/>';\n    var path = \"<path \" + getColorAttrib(opts.color.dark, \"stroke\") + ' d=\"' + qrToPath(data, size, opts.margin) + '\"/>';\n    var viewBox = 'viewBox=\"' + \"0 0 \" + qrcodesize + \" \" + qrcodesize + '\"';\n    var width = !opts.width ? \"\" : 'width=\"' + opts.width + '\" height=\"' + opts.width + '\" ';\n    var svgTag = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' + width + viewBox + ' shape-rendering=\"crispEdges\">' + bg + path + \"</svg>\\n\";\n    if (typeof cb === \"function\") {\n        cb(null, svgTag);\n    }\n    return svgTag;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9zdmctdGFnLmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLFNBQVNDLGVBQWdCQyxLQUFLLEVBQUVDLE1BQU07SUFDcEMsSUFBSUMsUUFBUUYsTUFBTUcsQ0FBQyxHQUFHO0lBQ3RCLElBQUlDLE1BQU1ILFNBQVMsT0FBT0QsTUFBTUssR0FBRyxHQUFHO0lBRXRDLE9BQU9ILFFBQVEsSUFDWEUsTUFBTSxNQUFNSCxTQUFTLGVBQWVDLE1BQU1JLE9BQU8sQ0FBQyxHQUFHQyxLQUFLLENBQUMsS0FBSyxNQUNoRUg7QUFDTjtBQUVBLFNBQVNJLE9BQVFDLEdBQUcsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDO0lBQ3hCLElBQUlQLE1BQU1LLE1BQU1DO0lBQ2hCLElBQUksT0FBT0MsTUFBTSxhQUFhUCxPQUFPLE1BQU1PO0lBRTNDLE9BQU9QO0FBQ1Q7QUFFQSxTQUFTUSxTQUFVQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsTUFBTTtJQUNuQyxJQUFJQyxPQUFPO0lBQ1gsSUFBSUMsU0FBUztJQUNiLElBQUlDLFNBQVM7SUFDYixJQUFJQyxhQUFhO0lBRWpCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxLQUFLUSxNQUFNLEVBQUVELElBQUs7UUFDcEMsSUFBSUUsTUFBTUMsS0FBS0MsS0FBSyxDQUFDSixJQUFJTjtRQUN6QixJQUFJVyxNQUFNRixLQUFLQyxLQUFLLENBQUNKLElBQUlOO1FBRXpCLElBQUksQ0FBQ1EsT0FBTyxDQUFDSixRQUFRQSxTQUFTO1FBRTlCLElBQUlMLElBQUksQ0FBQ08sRUFBRSxFQUFFO1lBQ1hEO1lBRUEsSUFBSSxDQUFFQyxDQUFBQSxJQUFJLEtBQUtFLE1BQU0sS0FBS1QsSUFBSSxDQUFDTyxJQUFJLEVBQUUsR0FBRztnQkFDdENKLFFBQVFFLFNBQ0pWLE9BQU8sS0FBS2MsTUFBTVAsUUFBUSxNQUFNVSxNQUFNVixVQUN0Q1AsT0FBTyxLQUFLUyxRQUFRO2dCQUV4QkEsU0FBUztnQkFDVEMsU0FBUztZQUNYO1lBRUEsSUFBSSxDQUFFSSxDQUFBQSxNQUFNLElBQUlSLFFBQVFELElBQUksQ0FBQ08sSUFBSSxFQUFFLEdBQUc7Z0JBQ3BDSixRQUFRUixPQUFPLEtBQUtXO2dCQUNwQkEsYUFBYTtZQUNmO1FBQ0YsT0FBTztZQUNMRjtRQUNGO0lBQ0Y7SUFFQSxPQUFPRDtBQUNUO0FBRUFVLGNBQWMsR0FBRyxTQUFTQyxPQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsRUFBRTtJQUNuRCxJQUFJQyxPQUFPbEMsTUFBTW1DLFVBQVUsQ0FBQ0g7SUFDNUIsSUFBSWYsT0FBT2MsT0FBT0ssT0FBTyxDQUFDbkIsSUFBSTtJQUM5QixJQUFJRCxPQUFPZSxPQUFPSyxPQUFPLENBQUNwQixJQUFJO0lBQzlCLElBQUlxQixhQUFhcEIsT0FBT2lCLEtBQUtoQixNQUFNLEdBQUc7SUFFdEMsSUFBSW9CLEtBQUssQ0FBQ0osS0FBSy9CLEtBQUssQ0FBQ29DLEtBQUssQ0FBQ2pDLENBQUMsR0FDeEIsS0FDQSxXQUFXSixlQUFlZ0MsS0FBSy9CLEtBQUssQ0FBQ29DLEtBQUssRUFBRSxVQUM1QyxjQUFjRixhQUFhLE1BQU1BLGFBQWE7SUFFbEQsSUFBSWxCLE9BQ0YsV0FBV2pCLGVBQWVnQyxLQUFLL0IsS0FBSyxDQUFDcUMsSUFBSSxFQUFFLFlBQzNDLFNBQVN6QixTQUFTQyxNQUFNQyxNQUFNaUIsS0FBS2hCLE1BQU0sSUFBSTtJQUUvQyxJQUFJdUIsVUFBVSxjQUFjLFNBQVNKLGFBQWEsTUFBTUEsYUFBYTtJQUVyRSxJQUFJSyxRQUFRLENBQUNSLEtBQUtRLEtBQUssR0FBRyxLQUFLLFlBQVlSLEtBQUtRLEtBQUssR0FBRyxlQUFlUixLQUFLUSxLQUFLLEdBQUc7SUFFcEYsSUFBSUMsU0FBUyw2Q0FBNkNELFFBQVFELFVBQVUsbUNBQW1DSCxLQUFLbkIsT0FBTztJQUUzSCxJQUFJLE9BQU9jLE9BQU8sWUFBWTtRQUM1QkEsR0FBRyxNQUFNVTtJQUNYO0lBRUEsT0FBT0E7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvcmVuZGVyZXIvc3ZnLXRhZy5qcz84MTkyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5mdW5jdGlvbiBnZXRDb2xvckF0dHJpYiAoY29sb3IsIGF0dHJpYikge1xuICB2YXIgYWxwaGEgPSBjb2xvci5hIC8gMjU1XG4gIHZhciBzdHIgPSBhdHRyaWIgKyAnPVwiJyArIGNvbG9yLmhleCArICdcIidcblxuICByZXR1cm4gYWxwaGEgPCAxXG4gICAgPyBzdHIgKyAnICcgKyBhdHRyaWIgKyAnLW9wYWNpdHk9XCInICsgYWxwaGEudG9GaXhlZCgyKS5zbGljZSgxKSArICdcIidcbiAgICA6IHN0clxufVxuXG5mdW5jdGlvbiBzdmdDbWQgKGNtZCwgeCwgeSkge1xuICB2YXIgc3RyID0gY21kICsgeFxuICBpZiAodHlwZW9mIHkgIT09ICd1bmRlZmluZWQnKSBzdHIgKz0gJyAnICsgeVxuXG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gcXJUb1BhdGggKGRhdGEsIHNpemUsIG1hcmdpbikge1xuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBtb3ZlQnkgPSAwXG4gIHZhciBuZXdSb3cgPSBmYWxzZVxuICB2YXIgbGluZUxlbmd0aCA9IDBcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY29sID0gTWF0aC5mbG9vcihpICUgc2l6ZSlcbiAgICB2YXIgcm93ID0gTWF0aC5mbG9vcihpIC8gc2l6ZSlcblxuICAgIGlmICghY29sICYmICFuZXdSb3cpIG5ld1JvdyA9IHRydWVcblxuICAgIGlmIChkYXRhW2ldKSB7XG4gICAgICBsaW5lTGVuZ3RoKytcblxuICAgICAgaWYgKCEoaSA+IDAgJiYgY29sID4gMCAmJiBkYXRhW2kgLSAxXSkpIHtcbiAgICAgICAgcGF0aCArPSBuZXdSb3dcbiAgICAgICAgICA/IHN2Z0NtZCgnTScsIGNvbCArIG1hcmdpbiwgMC41ICsgcm93ICsgbWFyZ2luKVxuICAgICAgICAgIDogc3ZnQ21kKCdtJywgbW92ZUJ5LCAwKVxuXG4gICAgICAgIG1vdmVCeSA9IDBcbiAgICAgICAgbmV3Um93ID0gZmFsc2VcbiAgICAgIH1cblxuICAgICAgaWYgKCEoY29sICsgMSA8IHNpemUgJiYgZGF0YVtpICsgMV0pKSB7XG4gICAgICAgIHBhdGggKz0gc3ZnQ21kKCdoJywgbGluZUxlbmd0aClcbiAgICAgICAgbGluZUxlbmd0aCA9IDBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbW92ZUJ5KytcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGF0aFxufVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAocXJEYXRhLCBvcHRpb25zLCBjYikge1xuICB2YXIgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0aW9ucylcbiAgdmFyIHNpemUgPSBxckRhdGEubW9kdWxlcy5zaXplXG4gIHZhciBkYXRhID0gcXJEYXRhLm1vZHVsZXMuZGF0YVxuICB2YXIgcXJjb2Rlc2l6ZSA9IHNpemUgKyBvcHRzLm1hcmdpbiAqIDJcblxuICB2YXIgYmcgPSAhb3B0cy5jb2xvci5saWdodC5hXG4gICAgPyAnJ1xuICAgIDogJzxwYXRoICcgKyBnZXRDb2xvckF0dHJpYihvcHRzLmNvbG9yLmxpZ2h0LCAnZmlsbCcpICtcbiAgICAgICcgZD1cIk0wIDBoJyArIHFyY29kZXNpemUgKyAndicgKyBxcmNvZGVzaXplICsgJ0gwelwiLz4nXG5cbiAgdmFyIHBhdGggPVxuICAgICc8cGF0aCAnICsgZ2V0Q29sb3JBdHRyaWIob3B0cy5jb2xvci5kYXJrLCAnc3Ryb2tlJykgK1xuICAgICcgZD1cIicgKyBxclRvUGF0aChkYXRhLCBzaXplLCBvcHRzLm1hcmdpbikgKyAnXCIvPidcblxuICB2YXIgdmlld0JveCA9ICd2aWV3Qm94PVwiJyArICcwIDAgJyArIHFyY29kZXNpemUgKyAnICcgKyBxcmNvZGVzaXplICsgJ1wiJ1xuXG4gIHZhciB3aWR0aCA9ICFvcHRzLndpZHRoID8gJycgOiAnd2lkdGg9XCInICsgb3B0cy53aWR0aCArICdcIiBoZWlnaHQ9XCInICsgb3B0cy53aWR0aCArICdcIiAnXG5cbiAgdmFyIHN2Z1RhZyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiAnICsgd2lkdGggKyB2aWV3Qm94ICsgJyBzaGFwZS1yZW5kZXJpbmc9XCJjcmlzcEVkZ2VzXCI+JyArIGJnICsgcGF0aCArICc8L3N2Zz5cXG4nXG5cbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiKG51bGwsIHN2Z1RhZylcbiAgfVxuXG4gIHJldHVybiBzdmdUYWdcbn1cbiJdLCJuYW1lcyI6WyJVdGlscyIsInJlcXVpcmUiLCJnZXRDb2xvckF0dHJpYiIsImNvbG9yIiwiYXR0cmliIiwiYWxwaGEiLCJhIiwic3RyIiwiaGV4IiwidG9GaXhlZCIsInNsaWNlIiwic3ZnQ21kIiwiY21kIiwieCIsInkiLCJxclRvUGF0aCIsImRhdGEiLCJzaXplIiwibWFyZ2luIiwicGF0aCIsIm1vdmVCeSIsIm5ld1JvdyIsImxpbmVMZW5ndGgiLCJpIiwibGVuZ3RoIiwiY29sIiwiTWF0aCIsImZsb29yIiwicm93IiwiZXhwb3J0cyIsInJlbmRlciIsInFyRGF0YSIsIm9wdGlvbnMiLCJjYiIsIm9wdHMiLCJnZXRPcHRpb25zIiwibW9kdWxlcyIsInFyY29kZXNpemUiLCJiZyIsImxpZ2h0IiwiZGFyayIsInZpZXdCb3giLCJ3aWR0aCIsInN2Z1RhZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/renderer/svg-tag.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/renderer/svg.js":
/*!*************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/svg.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var svgTagRenderer = __webpack_require__(/*! ./svg-tag */ \"(ssr)/./node_modules/qrcode/lib/renderer/svg-tag.js\");\nexports.render = svgTagRenderer.render;\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    var fs = __webpack_require__(/*! fs */ \"fs\");\n    var svgTag = exports.render(qrData, options);\n    var xmlStr = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' + '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">' + svgTag;\n    fs.writeFile(path, xmlStr, cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9zdmcuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsaUJBQWlCQyxtQkFBT0EsQ0FBQztBQUU3QkMsY0FBYyxHQUFHRixlQUFlRyxNQUFNO0FBRXRDRCxvQkFBb0IsR0FBRyxTQUFTRSxhQUFjQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxFQUFFO0lBQ3JFLElBQUksT0FBT0EsT0FBTyxhQUFhO1FBQzdCQSxLQUFLRDtRQUNMQSxVQUFVRTtJQUNaO0lBRUEsSUFBSUMsS0FBS1QsbUJBQU9BLENBQUM7SUFDakIsSUFBSVUsU0FBU1QsUUFBUUMsTUFBTSxDQUFDRyxRQUFRQztJQUVwQyxJQUFJSyxTQUFTLDJDQUNYLHVHQUNBRDtJQUVGRCxHQUFHRyxTQUFTLENBQUNSLE1BQU1PLFFBQVFKO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci9zdmcuanM/YWY1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc3ZnVGFnUmVuZGVyZXIgPSByZXF1aXJlKCcuL3N2Zy10YWcnKVxuXG5leHBvcnRzLnJlbmRlciA9IHN2Z1RhZ1JlbmRlcmVyLnJlbmRlclxuXG5leHBvcnRzLnJlbmRlclRvRmlsZSA9IGZ1bmN0aW9uIHJlbmRlclRvRmlsZSAocGF0aCwgcXJEYXRhLCBvcHRpb25zLCBjYikge1xuICBpZiAodHlwZW9mIGNiID09PSAndW5kZWZpbmVkJykge1xuICAgIGNiID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJylcbiAgdmFyIHN2Z1RhZyA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgb3B0aW9ucylcblxuICB2YXIgeG1sU3RyID0gJzw/eG1sIHZlcnNpb249XCIxLjBcIiBlbmNvZGluZz1cInV0Zi04XCI/PicgK1xuICAgICc8IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgXCJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGRcIj4nICtcbiAgICBzdmdUYWdcblxuICBmcy53cml0ZUZpbGUocGF0aCwgeG1sU3RyLCBjYilcbn1cbiJdLCJuYW1lcyI6WyJzdmdUYWdSZW5kZXJlciIsInJlcXVpcmUiLCJleHBvcnRzIiwicmVuZGVyIiwicmVuZGVyVG9GaWxlIiwicGF0aCIsInFyRGF0YSIsIm9wdGlvbnMiLCJjYiIsInVuZGVmaW5lZCIsImZzIiwic3ZnVGFnIiwieG1sU3RyIiwid3JpdGVGaWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/renderer/svg.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/renderer/terminal.js":
/*!******************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/terminal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("// var Utils = require('./utils')\nexports.render = function(qrData, options, cb) {\n    var size = qrData.modules.size;\n    var data = qrData.modules.data;\n    // var opts = Utils.getOptions(options)\n    // use same scheme as https://github.com/gtanner/qrcode-terminal because it actually works! =)\n    var black = \"\\x1b[40m  \\x1b[0m\";\n    var white = \"\\x1b[47m  \\x1b[0m\";\n    var output = \"\";\n    var hMargin = Array(size + 3).join(white);\n    var vMargin = Array(2).join(white);\n    output += hMargin + \"\\n\";\n    for(var i = 0; i < size; ++i){\n        output += white;\n        for(var j = 0; j < size; j++){\n            // var topModule = data[i * size + j]\n            // var bottomModule = data[(i + 1) * size + j]\n            output += data[i * size + j] ? black : white // getBlockChar(topModule, bottomModule)\n            ;\n        }\n        // output += white+'\\n'\n        output += vMargin + \"\\n\";\n    }\n    output += hMargin + \"\\n\";\n    if (typeof cb === \"function\") {\n        cb(null, output);\n    }\n    return output;\n} /*\nexports.renderToFile = function renderToFile (path, qrData, options, cb) {\n  if (typeof cb === 'undefined') {\n    cb = options\n    options = undefined\n  }\n\n  var fs = require('fs')\n  var utf8 = exports.render(qrData, options)\n  fs.writeFile(path, utf8, cb)\n}\n*/ ;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci90ZXJtaW5hbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFFakNBLGNBQWMsR0FBRyxTQUFVRSxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsRUFBRTtJQUM1QyxJQUFJQyxPQUFPSCxPQUFPSSxPQUFPLENBQUNELElBQUk7SUFDOUIsSUFBSUUsT0FBT0wsT0FBT0ksT0FBTyxDQUFDQyxJQUFJO0lBRTlCLHVDQUF1QztJQUV2Qyw4RkFBOEY7SUFDOUYsSUFBSUMsUUFBUTtJQUNaLElBQUlDLFFBQVE7SUFFWixJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsVUFBVUMsTUFBTVAsT0FBTyxHQUFHUSxJQUFJLENBQUNKO0lBQ25DLElBQUlLLFVBQVVGLE1BQU0sR0FBR0MsSUFBSSxDQUFDSjtJQUU1QkMsVUFBVUMsVUFBVTtJQUNwQixJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSVYsTUFBTSxFQUFFVSxFQUFHO1FBQzdCTCxVQUFVRDtRQUNWLElBQUssSUFBSU8sSUFBSSxHQUFHQSxJQUFJWCxNQUFNVyxJQUFLO1lBQzdCLHFDQUFxQztZQUNyQyw4Q0FBOEM7WUFFOUNOLFVBQVVILElBQUksQ0FBQ1EsSUFBSVYsT0FBT1csRUFBRSxHQUFHUixRQUFRQyxNQUFLLHdDQUF3Qzs7UUFDdEY7UUFDQSx1QkFBdUI7UUFDdkJDLFVBQVVJLFVBQVU7SUFDdEI7SUFFQUosVUFBVUMsVUFBVTtJQUVwQixJQUFJLE9BQU9QLE9BQU8sWUFBWTtRQUM1QkEsR0FBRyxNQUFNTTtJQUNYO0lBRUEsT0FBT0E7QUFDVCxFQUNBOzs7Ozs7Ozs7OztBQVdBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci90ZXJtaW5hbC5qcz9mMTA3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHZhciBVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBzaXplID0gcXJEYXRhLm1vZHVsZXMuc2l6ZVxuICB2YXIgZGF0YSA9IHFyRGF0YS5tb2R1bGVzLmRhdGFcblxuICAvLyB2YXIgb3B0cyA9IFV0aWxzLmdldE9wdGlvbnMob3B0aW9ucylcblxuICAvLyB1c2Ugc2FtZSBzY2hlbWUgYXMgaHR0cHM6Ly9naXRodWIuY29tL2d0YW5uZXIvcXJjb2RlLXRlcm1pbmFsIGJlY2F1c2UgaXQgYWN0dWFsbHkgd29ya3MhID0pXG4gIHZhciBibGFjayA9ICdcXHgxYls0MG0gIFxceDFiWzBtJ1xuICB2YXIgd2hpdGUgPSAnXFx4MWJbNDdtICBcXHgxYlswbSdcblxuICB2YXIgb3V0cHV0ID0gJydcbiAgdmFyIGhNYXJnaW4gPSBBcnJheShzaXplICsgMykuam9pbih3aGl0ZSlcbiAgdmFyIHZNYXJnaW4gPSBBcnJheSgyKS5qb2luKHdoaXRlKVxuXG4gIG91dHB1dCArPSBoTWFyZ2luICsgJ1xcbidcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICBvdXRwdXQgKz0gd2hpdGVcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNpemU7IGorKykge1xuICAgICAgLy8gdmFyIHRvcE1vZHVsZSA9IGRhdGFbaSAqIHNpemUgKyBqXVxuICAgICAgLy8gdmFyIGJvdHRvbU1vZHVsZSA9IGRhdGFbKGkgKyAxKSAqIHNpemUgKyBqXVxuXG4gICAgICBvdXRwdXQgKz0gZGF0YVtpICogc2l6ZSArIGpdID8gYmxhY2sgOiB3aGl0ZS8vIGdldEJsb2NrQ2hhcih0b3BNb2R1bGUsIGJvdHRvbU1vZHVsZSlcbiAgICB9XG4gICAgLy8gb3V0cHV0ICs9IHdoaXRlKydcXG4nXG4gICAgb3V0cHV0ICs9IHZNYXJnaW4gKyAnXFxuJ1xuICB9XG5cbiAgb3V0cHV0ICs9IGhNYXJnaW4gKyAnXFxuJ1xuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYihudWxsLCBvdXRwdXQpXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG4vKlxuZXhwb3J0cy5yZW5kZXJUb0ZpbGUgPSBmdW5jdGlvbiByZW5kZXJUb0ZpbGUgKHBhdGgsIHFyRGF0YSwgb3B0aW9ucywgY2IpIHtcbiAgaWYgKHR5cGVvZiBjYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYiA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkXG4gIH1cblxuICB2YXIgZnMgPSByZXF1aXJlKCdmcycpXG4gIHZhciB1dGY4ID0gZXhwb3J0cy5yZW5kZXIocXJEYXRhLCBvcHRpb25zKVxuICBmcy53cml0ZUZpbGUocGF0aCwgdXRmOCwgY2IpXG59XG4qL1xuIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJyZW5kZXIiLCJxckRhdGEiLCJvcHRpb25zIiwiY2IiLCJzaXplIiwibW9kdWxlcyIsImRhdGEiLCJibGFjayIsIndoaXRlIiwib3V0cHV0IiwiaE1hcmdpbiIsIkFycmF5Iiwiam9pbiIsInZNYXJnaW4iLCJpIiwiaiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/renderer/terminal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/renderer/utf8.js":
/*!**************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/utf8.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var Utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/qrcode/lib/renderer/utils.js\");\nvar BLOCK_CHAR = {\n    WW: \" \",\n    WB: \"▄\",\n    BB: \"█\",\n    BW: \"▀\"\n};\nvar INVERTED_BLOCK_CHAR = {\n    BB: \" \",\n    BW: \"▄\",\n    WW: \"█\",\n    WB: \"▀\"\n};\nfunction getBlockChar(top, bottom, blocks) {\n    if (top && bottom) return blocks.BB;\n    if (top && !bottom) return blocks.BW;\n    if (!top && bottom) return blocks.WB;\n    return blocks.WW;\n}\nexports.render = function(qrData, options, cb) {\n    var opts = Utils.getOptions(options);\n    var blocks = BLOCK_CHAR;\n    if (opts.color.dark.hex === \"#ffffff\" || opts.color.light.hex === \"#000000\") {\n        blocks = INVERTED_BLOCK_CHAR;\n    }\n    var size = qrData.modules.size;\n    var data = qrData.modules.data;\n    var output = \"\";\n    var hMargin = Array(size + opts.margin * 2 + 1).join(blocks.WW);\n    hMargin = Array(opts.margin / 2 + 1).join(hMargin + \"\\n\");\n    var vMargin = Array(opts.margin + 1).join(blocks.WW);\n    output += hMargin;\n    for(var i = 0; i < size; i += 2){\n        output += vMargin;\n        for(var j = 0; j < size; j++){\n            var topModule = data[i * size + j];\n            var bottomModule = data[(i + 1) * size + j];\n            output += getBlockChar(topModule, bottomModule, blocks);\n        }\n        output += vMargin + \"\\n\";\n    }\n    output += hMargin.slice(0, -1);\n    if (typeof cb === \"function\") {\n        cb(null, output);\n    }\n    return output;\n};\nexports.renderToFile = function renderToFile(path, qrData, options, cb) {\n    if (typeof cb === \"undefined\") {\n        cb = options;\n        options = undefined;\n    }\n    var fs = __webpack_require__(/*! fs */ \"fs\");\n    var utf8 = exports.render(qrData, options);\n    fs.writeFile(path, utf8, cb);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi9yZW5kZXJlci91dGY4LmpzIiwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBRXBCLElBQUlDLGFBQWE7SUFDZkMsSUFBSTtJQUNKQyxJQUFJO0lBQ0pDLElBQUk7SUFDSkMsSUFBSTtBQUNOO0FBRUEsSUFBSUMsc0JBQXNCO0lBQ3hCRixJQUFJO0lBQ0pDLElBQUk7SUFDSkgsSUFBSTtJQUNKQyxJQUFJO0FBQ047QUFFQSxTQUFTSSxhQUFjQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsTUFBTTtJQUN4QyxJQUFJRixPQUFPQyxRQUFRLE9BQU9DLE9BQU9OLEVBQUU7SUFDbkMsSUFBSUksT0FBTyxDQUFDQyxRQUFRLE9BQU9DLE9BQU9MLEVBQUU7SUFDcEMsSUFBSSxDQUFDRyxPQUFPQyxRQUFRLE9BQU9DLE9BQU9QLEVBQUU7SUFDcEMsT0FBT08sT0FBT1IsRUFBRTtBQUNsQjtBQUVBUyxjQUFjLEdBQUcsU0FBVUUsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEVBQUU7SUFDNUMsSUFBSUMsT0FBT2pCLE1BQU1rQixVQUFVLENBQUNIO0lBQzVCLElBQUlKLFNBQVNUO0lBQ2IsSUFBSWUsS0FBS0UsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsS0FBSyxhQUFhSixLQUFLRSxLQUFLLENBQUNHLEtBQUssQ0FBQ0QsR0FBRyxLQUFLLFdBQVc7UUFDM0VWLFNBQVNKO0lBQ1g7SUFFQSxJQUFJZ0IsT0FBT1QsT0FBT1UsT0FBTyxDQUFDRCxJQUFJO0lBQzlCLElBQUlFLE9BQU9YLE9BQU9VLE9BQU8sQ0FBQ0MsSUFBSTtJQUU5QixJQUFJQyxTQUFTO0lBQ2IsSUFBSUMsVUFBVUMsTUFBTUwsT0FBUU4sS0FBS1ksTUFBTSxHQUFHLElBQUssR0FBR0MsSUFBSSxDQUFDbkIsT0FBT1IsRUFBRTtJQUNoRXdCLFVBQVVDLE1BQU0sS0FBTUMsTUFBTSxHQUFHLElBQUssR0FBR0MsSUFBSSxDQUFDSCxVQUFVO0lBRXRELElBQUlJLFVBQVVILE1BQU1YLEtBQUtZLE1BQU0sR0FBRyxHQUFHQyxJQUFJLENBQUNuQixPQUFPUixFQUFFO0lBRW5EdUIsVUFBVUM7SUFDVixJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSVQsTUFBTVMsS0FBSyxFQUFHO1FBQ2hDTixVQUFVSztRQUNWLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJVixNQUFNVSxJQUFLO1lBQzdCLElBQUlDLFlBQVlULElBQUksQ0FBQ08sSUFBSVQsT0FBT1UsRUFBRTtZQUNsQyxJQUFJRSxlQUFlVixJQUFJLENBQUMsQ0FBQ08sSUFBSSxLQUFLVCxPQUFPVSxFQUFFO1lBRTNDUCxVQUFVbEIsYUFBYTBCLFdBQVdDLGNBQWN4QjtRQUNsRDtRQUVBZSxVQUFVSyxVQUFVO0lBQ3RCO0lBRUFMLFVBQVVDLFFBQVFTLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFFNUIsSUFBSSxPQUFPcEIsT0FBTyxZQUFZO1FBQzVCQSxHQUFHLE1BQU1VO0lBQ1g7SUFFQSxPQUFPQTtBQUNUO0FBRUFkLG9CQUFvQixHQUFHLFNBQVN5QixhQUFjQyxJQUFJLEVBQUV4QixNQUFNLEVBQUVDLE9BQU8sRUFBRUMsRUFBRTtJQUNyRSxJQUFJLE9BQU9BLE9BQU8sYUFBYTtRQUM3QkEsS0FBS0Q7UUFDTEEsVUFBVXdCO0lBQ1o7SUFFQSxJQUFJQyxLQUFLdkMsbUJBQU9BLENBQUM7SUFDakIsSUFBSXdDLE9BQU83QixRQUFRQyxNQUFNLENBQUNDLFFBQVFDO0lBQ2xDeUIsR0FBR0UsU0FBUyxDQUFDSixNQUFNRyxNQUFNekI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9xcmNvZGUvbGliL3JlbmRlcmVyL3V0ZjguanM/ZGYwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcblxudmFyIEJMT0NLX0NIQVIgPSB7XG4gIFdXOiAnICcsXG4gIFdCOiAn4paEJyxcbiAgQkI6ICfilognLFxuICBCVzogJ+KWgCdcbn1cblxudmFyIElOVkVSVEVEX0JMT0NLX0NIQVIgPSB7XG4gIEJCOiAnICcsXG4gIEJXOiAn4paEJyxcbiAgV1c6ICfilognLFxuICBXQjogJ+KWgCdcbn1cblxuZnVuY3Rpb24gZ2V0QmxvY2tDaGFyICh0b3AsIGJvdHRvbSwgYmxvY2tzKSB7XG4gIGlmICh0b3AgJiYgYm90dG9tKSByZXR1cm4gYmxvY2tzLkJCXG4gIGlmICh0b3AgJiYgIWJvdHRvbSkgcmV0dXJuIGJsb2Nrcy5CV1xuICBpZiAoIXRvcCAmJiBib3R0b20pIHJldHVybiBibG9ja3MuV0JcbiAgcmV0dXJuIGJsb2Nrcy5XV1xufVxuXG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIChxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBvcHRzID0gVXRpbHMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICB2YXIgYmxvY2tzID0gQkxPQ0tfQ0hBUlxuICBpZiAob3B0cy5jb2xvci5kYXJrLmhleCA9PT0gJyNmZmZmZmYnIHx8IG9wdHMuY29sb3IubGlnaHQuaGV4ID09PSAnIzAwMDAwMCcpIHtcbiAgICBibG9ja3MgPSBJTlZFUlRFRF9CTE9DS19DSEFSXG4gIH1cblxuICB2YXIgc2l6ZSA9IHFyRGF0YS5tb2R1bGVzLnNpemVcbiAgdmFyIGRhdGEgPSBxckRhdGEubW9kdWxlcy5kYXRhXG5cbiAgdmFyIG91dHB1dCA9ICcnXG4gIHZhciBoTWFyZ2luID0gQXJyYXkoc2l6ZSArIChvcHRzLm1hcmdpbiAqIDIpICsgMSkuam9pbihibG9ja3MuV1cpXG4gIGhNYXJnaW4gPSBBcnJheSgob3B0cy5tYXJnaW4gLyAyKSArIDEpLmpvaW4oaE1hcmdpbiArICdcXG4nKVxuXG4gIHZhciB2TWFyZ2luID0gQXJyYXkob3B0cy5tYXJnaW4gKyAxKS5qb2luKGJsb2Nrcy5XVylcblxuICBvdXRwdXQgKz0gaE1hcmdpblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkgKz0gMikge1xuICAgIG91dHB1dCArPSB2TWFyZ2luXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzaXplOyBqKyspIHtcbiAgICAgIHZhciB0b3BNb2R1bGUgPSBkYXRhW2kgKiBzaXplICsgal1cbiAgICAgIHZhciBib3R0b21Nb2R1bGUgPSBkYXRhWyhpICsgMSkgKiBzaXplICsgal1cblxuICAgICAgb3V0cHV0ICs9IGdldEJsb2NrQ2hhcih0b3BNb2R1bGUsIGJvdHRvbU1vZHVsZSwgYmxvY2tzKVxuICAgIH1cblxuICAgIG91dHB1dCArPSB2TWFyZ2luICsgJ1xcbidcbiAgfVxuXG4gIG91dHB1dCArPSBoTWFyZ2luLnNsaWNlKDAsIC0xKVxuXG4gIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYihudWxsLCBvdXRwdXQpXG4gIH1cblxuICByZXR1cm4gb3V0cHV0XG59XG5cbmV4cG9ydHMucmVuZGVyVG9GaWxlID0gZnVuY3Rpb24gcmVuZGVyVG9GaWxlIChwYXRoLCBxckRhdGEsIG9wdGlvbnMsIGNiKSB7XG4gIGlmICh0eXBlb2YgY2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY2IgPSBvcHRpb25zXG4gICAgb3B0aW9ucyA9IHVuZGVmaW5lZFxuICB9XG5cbiAgdmFyIGZzID0gcmVxdWlyZSgnZnMnKVxuICB2YXIgdXRmOCA9IGV4cG9ydHMucmVuZGVyKHFyRGF0YSwgb3B0aW9ucylcbiAgZnMud3JpdGVGaWxlKHBhdGgsIHV0ZjgsIGNiKVxufVxuIl0sIm5hbWVzIjpbIlV0aWxzIiwicmVxdWlyZSIsIkJMT0NLX0NIQVIiLCJXVyIsIldCIiwiQkIiLCJCVyIsIklOVkVSVEVEX0JMT0NLX0NIQVIiLCJnZXRCbG9ja0NoYXIiLCJ0b3AiLCJib3R0b20iLCJibG9ja3MiLCJleHBvcnRzIiwicmVuZGVyIiwicXJEYXRhIiwib3B0aW9ucyIsImNiIiwib3B0cyIsImdldE9wdGlvbnMiLCJjb2xvciIsImRhcmsiLCJoZXgiLCJsaWdodCIsInNpemUiLCJtb2R1bGVzIiwiZGF0YSIsIm91dHB1dCIsImhNYXJnaW4iLCJBcnJheSIsIm1hcmdpbiIsImpvaW4iLCJ2TWFyZ2luIiwiaSIsImoiLCJ0b3BNb2R1bGUiLCJib3R0b21Nb2R1bGUiLCJzbGljZSIsInJlbmRlclRvRmlsZSIsInBhdGgiLCJ1bmRlZmluZWQiLCJmcyIsInV0ZjgiLCJ3cml0ZUZpbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/renderer/utf8.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/renderer/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/utils.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("function hex2rgba(hex) {\n    if (typeof hex === \"number\") {\n        hex = hex.toString();\n    }\n    if (typeof hex !== \"string\") {\n        throw new Error(\"Color should be defined as hex string\");\n    }\n    var hexCode = hex.slice().replace(\"#\", \"\").split(\"\");\n    if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {\n        throw new Error(\"Invalid hex color: \" + hex);\n    }\n    // Convert from short to long form (fff -> ffffff)\n    if (hexCode.length === 3 || hexCode.length === 4) {\n        hexCode = Array.prototype.concat.apply([], hexCode.map(function(c) {\n            return [\n                c,\n                c\n            ];\n        }));\n    }\n    // Add default alpha value\n    if (hexCode.length === 6) hexCode.push(\"F\", \"F\");\n    var hexValue = parseInt(hexCode.join(\"\"), 16);\n    return {\n        r: hexValue >> 24 & 255,\n        g: hexValue >> 16 & 255,\n        b: hexValue >> 8 & 255,\n        a: hexValue & 255,\n        hex: \"#\" + hexCode.slice(0, 6).join(\"\")\n    };\n}\nexports.getOptions = function getOptions(options) {\n    if (!options) options = {};\n    if (!options.color) options.color = {};\n    var margin = typeof options.margin === \"undefined\" || options.margin === null || options.margin < 0 ? 4 : options.margin;\n    var width = options.width && options.width >= 21 ? options.width : undefined;\n    var scale = options.scale || 4;\n    return {\n        width: width,\n        scale: width ? 4 : scale,\n        margin: margin,\n        color: {\n            dark: hex2rgba(options.color.dark || \"#000000ff\"),\n            light: hex2rgba(options.color.light || \"#ffffffff\")\n        },\n        type: options.type,\n        rendererOpts: options.rendererOpts || {}\n    };\n};\nexports.getScale = function getScale(qrSize, opts) {\n    return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;\n};\nexports.getImageWidth = function getImageWidth(qrSize, opts) {\n    var scale = exports.getScale(qrSize, opts);\n    return Math.floor((qrSize + opts.margin * 2) * scale);\n};\nexports.qrToImageData = function qrToImageData(imgData, qr, opts) {\n    var size = qr.modules.size;\n    var data = qr.modules.data;\n    var scale = exports.getScale(size, opts);\n    var symbolSize = Math.floor((size + opts.margin * 2) * scale);\n    var scaledMargin = opts.margin * scale;\n    var palette = [\n        opts.color.light,\n        opts.color.dark\n    ];\n    for(var i = 0; i < symbolSize; i++){\n        for(var j = 0; j < symbolSize; j++){\n            var posDst = (i * symbolSize + j) * 4;\n            var pxColor = opts.color.light;\n            if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {\n                var iSrc = Math.floor((i - scaledMargin) / scale);\n                var jSrc = Math.floor((j - scaledMargin) / scale);\n                pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];\n            }\n            imgData[posDst++] = pxColor.r;\n            imgData[posDst++] = pxColor.g;\n            imgData[posDst++] = pxColor.b;\n            imgData[posDst] = pxColor.a;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/renderer/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/server.js":
/*!*******************************************!*\
  !*** ./node_modules/qrcode/lib/server.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var canPromise = __webpack_require__(/*! ./can-promise */ \"(ssr)/./node_modules/qrcode/lib/can-promise.js\");\nvar QRCode = __webpack_require__(/*! ./core/qrcode */ \"(ssr)/./node_modules/qrcode/lib/core/qrcode.js\");\nvar PngRenderer = __webpack_require__(/*! ./renderer/png */ \"(ssr)/./node_modules/qrcode/lib/renderer/png.js\");\nvar Utf8Renderer = __webpack_require__(/*! ./renderer/utf8 */ \"(ssr)/./node_modules/qrcode/lib/renderer/utf8.js\");\nvar TerminalRenderer = __webpack_require__(/*! ./renderer/terminal */ \"(ssr)/./node_modules/qrcode/lib/renderer/terminal.js\");\nvar SvgRenderer = __webpack_require__(/*! ./renderer/svg */ \"(ssr)/./node_modules/qrcode/lib/renderer/svg.js\");\nfunction checkParams(text, opts, cb) {\n    if (typeof text === \"undefined\") {\n        throw new Error(\"String required as first argument\");\n    }\n    if (typeof cb === \"undefined\") {\n        cb = opts;\n        opts = {};\n    }\n    if (typeof cb !== \"function\") {\n        if (!canPromise()) {\n            throw new Error(\"Callback required as last argument\");\n        } else {\n            opts = cb || {};\n            cb = null;\n        }\n    }\n    return {\n        opts: opts,\n        cb: cb\n    };\n}\nfunction getTypeFromFilename(path) {\n    return path.slice((path.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n}\nfunction getRendererFromType(type) {\n    switch(type){\n        case \"svg\":\n            return SvgRenderer;\n        case \"txt\":\n        case \"utf8\":\n            return Utf8Renderer;\n        case \"png\":\n        case \"image/png\":\n        default:\n            return PngRenderer;\n    }\n}\nfunction getStringRendererFromType(type) {\n    switch(type){\n        case \"svg\":\n            return SvgRenderer;\n        case \"terminal\":\n            return TerminalRenderer;\n        case \"utf8\":\n        default:\n            return Utf8Renderer;\n    }\n}\nfunction render(renderFunc, text, params) {\n    if (!params.cb) {\n        return new Promise(function(resolve, reject) {\n            try {\n                var data = QRCode.create(text, params.opts);\n                return renderFunc(data, params.opts, function(err, data) {\n                    return err ? reject(err) : resolve(data);\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n    try {\n        var data = QRCode.create(text, params.opts);\n        return renderFunc(data, params.opts, params.cb);\n    } catch (e) {\n        params.cb(e);\n    }\n}\nexports.create = QRCode.create;\nexports.toCanvas = __webpack_require__(/*! ./browser */ \"(ssr)/./node_modules/qrcode/lib/browser.js\").toCanvas;\nexports.toString = function toString(text, opts, cb) {\n    var params = checkParams(text, opts, cb);\n    var renderer = getStringRendererFromType(params.opts.type);\n    return render(renderer.render, text, params);\n};\nexports.toDataURL = function toDataURL(text, opts, cb) {\n    var params = checkParams(text, opts, cb);\n    var renderer = getRendererFromType(params.opts.type);\n    return render(renderer.renderToDataURL, text, params);\n};\nexports.toBuffer = function toBuffer(text, opts, cb) {\n    var params = checkParams(text, opts, cb);\n    var renderer = getRendererFromType(params.opts.type);\n    return render(renderer.renderToBuffer, text, params);\n};\nexports.toFile = function toFile(path, text, opts, cb) {\n    if (typeof path !== \"string\" || !(typeof text === \"string\" || typeof text === \"object\")) {\n        throw new Error(\"Invalid argument\");\n    }\n    if (arguments.length < 3 && !canPromise()) {\n        throw new Error(\"Too few arguments provided\");\n    }\n    var params = checkParams(text, opts, cb);\n    var type = params.opts.type || getTypeFromFilename(path);\n    var renderer = getRendererFromType(type);\n    var renderToFile = renderer.renderToFile.bind(null, path);\n    return render(renderToFile, text, params);\n};\nexports.toFileStream = function toFileStream(stream, text, opts) {\n    if (arguments.length < 2) {\n        throw new Error(\"Too few arguments provided\");\n    }\n    var params = checkParams(text, opts, stream.emit.bind(stream, \"error\"));\n    var renderer = getRendererFromType(\"png\") // Only png support for now\n    ;\n    var renderToFileStream = renderer.renderToFileStream.bind(null, stream);\n    render(renderToFileStream, text, params);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/qrcode/lib/utils/buffer.js":
/*!*************************************************!*\
  !*** ./node_modules/qrcode/lib/utils/buffer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports.alloc = __webpack_require__(/*! buffer-alloc */ \"(ssr)/./node_modules/buffer-alloc/index.js\");\nmodule.exports.from = __webpack_require__(/*! buffer-from */ \"(ssr)/./node_modules/buffer-from/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcXJjb2RlL2xpYi91dGlscy9idWZmZXIuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSw0R0FBK0I7QUFDL0JBLHlHQUE4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL3FyY29kZS9saWIvdXRpbHMvYnVmZmVyLmpzP2NiM2UiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMuYWxsb2MgPSByZXF1aXJlKCdidWZmZXItYWxsb2MnKVxubW9kdWxlLmV4cG9ydHMuZnJvbSA9IHJlcXVpcmUoJ2J1ZmZlci1mcm9tJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYWxsb2MiLCJyZXF1aXJlIiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qrcode/lib/utils/buffer.js\n");

/***/ })

};
;