"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ethereumjs-abi";
exports.ids = ["vendor-chunks/ethereumjs-abi"];
exports.modules = {

/***/ "(ssr)/./node_modules/ethereumjs-abi/index.js":
/*!**********************************************!*\
  !*** ./node_modules/ethereumjs-abi/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib/index.js */ \"(ssr)/./node_modules/ethereumjs-abi/lib/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBQSw4R0FBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9pbmRleC5qcz9jNWNhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvaW5kZXguanMnKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/ethereumjs-abi/lib/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* eslint-disable no-useless-escape */ \nconst utils = __webpack_require__(/*! ethereumjs-util */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js\");\nconst BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar ABI = function() {};\n// Convert from short to canonical names\n// FIXME: optimise or make this nicer?\nfunction elementaryName(name) {\n    if (name.startsWith(\"int[\")) {\n        return \"int256\" + name.slice(3);\n    } else if (name === \"int\") {\n        return \"int256\";\n    } else if (name.startsWith(\"uint[\")) {\n        return \"uint256\" + name.slice(4);\n    } else if (name === \"uint\") {\n        return \"uint256\";\n    } else if (name.startsWith(\"fixed[\")) {\n        return \"fixed128x128\" + name.slice(5);\n    } else if (name === \"fixed\") {\n        return \"fixed128x128\";\n    } else if (name.startsWith(\"ufixed[\")) {\n        return \"ufixed128x128\" + name.slice(6);\n    } else if (name === \"ufixed\") {\n        return \"ufixed128x128\";\n    }\n    return name;\n}\nABI.eventID = function(name, types) {\n    // FIXME: use node.js util.format?\n    var sig = name + \"(\" + types.map(elementaryName).join(\",\") + \")\";\n    return utils.keccak256(Buffer.from(sig));\n};\nABI.methodID = function(name, types) {\n    return ABI.eventID(name, types).slice(0, 4);\n};\n// Parse N from type<N>\nfunction parseTypeN(type) {\n    return parseInt(/^\\D+(\\d+)$/.exec(type)[1], 10);\n}\n// Parse N,M from type<N>x<M>\nfunction parseTypeNxM(type) {\n    var tmp = /^\\D+(\\d+)x(\\d+)$/.exec(type);\n    return [\n        parseInt(tmp[1], 10),\n        parseInt(tmp[2], 10)\n    ];\n}\n// Parse N in type[<N>] where \"type\" can itself be an array type.\nfunction parseTypeArray(type) {\n    var tmp = type.match(/(.*)\\[(.*?)\\]$/);\n    if (tmp) {\n        return tmp[2] === \"\" ? \"dynamic\" : parseInt(tmp[2], 10);\n    }\n    return null;\n}\nfunction parseNumber(arg) {\n    var type = typeof arg;\n    if (type === \"string\") {\n        if (utils.isHexPrefixed(arg)) {\n            return new BN(utils.stripHexPrefix(arg), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === \"number\") {\n        return new BN(arg);\n    } else if (arg.toArray) {\n        // assume this is a BN for the moment, replace with BN.isBN soon\n        return arg;\n    } else {\n        throw new Error(\"Argument is not a number\");\n    }\n}\n// someMethod(bytes,uint)\n// someMethod(bytes,uint):(boolean)\nfunction parseSignature(sig) {\n    var tmp = /^(\\w+)\\((.*)\\)$/.exec(sig);\n    if (tmp.length !== 3) {\n        throw new Error(\"Invalid method signature\");\n    }\n    var args = /^(.+)\\):\\((.+)$/.exec(tmp[2]);\n    if (args !== null && args.length === 3) {\n        return {\n            method: tmp[1],\n            args: args[1].split(\",\"),\n            retargs: args[2].split(\",\")\n        };\n    } else {\n        var params = tmp[2].split(\",\");\n        if (params.length === 1 && params[0] === \"\") {\n            // Special-case (possibly naive) fixup for functions that take no arguments.\n            // TODO: special cases are always bad, but this makes the function return\n            // match what the calling functions expect\n            params = [];\n        }\n        return {\n            method: tmp[1],\n            args: params\n        };\n    }\n}\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\nfunction encodeSingle(type, arg) {\n    var size, num, ret, i;\n    if (type === \"address\") {\n        return encodeSingle(\"uint160\", parseNumber(arg));\n    } else if (type === \"bool\") {\n        return encodeSingle(\"uint8\", arg ? 1 : 0);\n    } else if (type === \"string\") {\n        return encodeSingle(\"bytes\", Buffer.from(arg, \"utf8\"));\n    } else if (isArray(type)) {\n        // this part handles fixed-length ([2]) and variable length ([]) arrays\n        // NOTE: we catch here all calls to arrays, that simplifies the rest\n        if (typeof arg.length === \"undefined\") {\n            throw new Error(\"Not an array?\");\n        }\n        size = parseTypeArray(type);\n        if (size !== \"dynamic\" && size !== 0 && arg.length > size) {\n            throw new Error(\"Elements exceed array size: \" + size);\n        }\n        ret = [];\n        type = type.slice(0, type.lastIndexOf(\"[\"));\n        if (typeof arg === \"string\") {\n            arg = JSON.parse(arg);\n        }\n        for(i in arg){\n            ret.push(encodeSingle(type, arg[i]));\n        }\n        if (size === \"dynamic\") {\n            var length = encodeSingle(\"uint256\", arg.length);\n            ret.unshift(length);\n        }\n        return Buffer.concat(ret);\n    } else if (type === \"bytes\") {\n        arg = Buffer.from(arg);\n        ret = Buffer.concat([\n            encodeSingle(\"uint256\", arg.length),\n            arg\n        ]);\n        if (arg.length % 32 !== 0) {\n            ret = Buffer.concat([\n                ret,\n                utils.zeros(32 - arg.length % 32)\n            ]);\n        }\n        return ret;\n    } else if (type.startsWith(\"bytes\")) {\n        size = parseTypeN(type);\n        if (size < 1 || size > 32) {\n            throw new Error(\"Invalid bytes<N> width: \" + size);\n        }\n        return utils.setLengthRight(arg, 32);\n    } else if (type.startsWith(\"uint\")) {\n        size = parseTypeN(type);\n        if (size % 8 || size < 8 || size > 256) {\n            throw new Error(\"Invalid uint<N> width: \" + size);\n        }\n        num = parseNumber(arg);\n        if (num.bitLength() > size) {\n            throw new Error(\"Supplied uint exceeds width: \" + size + \" vs \" + num.bitLength());\n        }\n        if (num < 0) {\n            throw new Error(\"Supplied uint is negative\");\n        }\n        return num.toArrayLike(Buffer, \"be\", 32);\n    } else if (type.startsWith(\"int\")) {\n        size = parseTypeN(type);\n        if (size % 8 || size < 8 || size > 256) {\n            throw new Error(\"Invalid int<N> width: \" + size);\n        }\n        num = parseNumber(arg);\n        if (num.bitLength() > size) {\n            throw new Error(\"Supplied int exceeds width: \" + size + \" vs \" + num.bitLength());\n        }\n        return num.toTwos(256).toArrayLike(Buffer, \"be\", 32);\n    } else if (type.startsWith(\"ufixed\")) {\n        size = parseTypeNxM(type);\n        num = parseNumber(arg);\n        if (num < 0) {\n            throw new Error(\"Supplied ufixed is negative\");\n        }\n        return encodeSingle(\"uint256\", num.mul(new BN(2).pow(new BN(size[1]))));\n    } else if (type.startsWith(\"fixed\")) {\n        size = parseTypeNxM(type);\n        return encodeSingle(\"int256\", parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))));\n    }\n    throw new Error(\"Unsupported or invalid type: \" + type);\n}\n// Decodes a single item (can be dynamic array)\n// @returns: array\n// FIXME: this method will need a lot of attention at checking limits and validation\nfunction decodeSingle(parsedType, data, offset) {\n    if (typeof parsedType === \"string\") {\n        parsedType = parseType(parsedType);\n    }\n    var size, num, ret, i;\n    if (parsedType.name === \"address\") {\n        return decodeSingle(parsedType.rawType, data, offset).toArrayLike(Buffer, \"be\", 20).toString(\"hex\");\n    } else if (parsedType.name === \"bool\") {\n        return decodeSingle(parsedType.rawType, data, offset).toString() === new BN(1).toString();\n    } else if (parsedType.name === \"string\") {\n        var bytes = decodeSingle(parsedType.rawType, data, offset);\n        return Buffer.from(bytes, \"utf8\").toString();\n    } else if (parsedType.isArray) {\n        // this part handles fixed-length arrays ([2]) and variable length ([]) arrays\n        // NOTE: we catch here all calls to arrays, that simplifies the rest\n        ret = [];\n        size = parsedType.size;\n        if (parsedType.size === \"dynamic\") {\n            offset = decodeSingle(\"uint256\", data, offset).toNumber();\n            size = decodeSingle(\"uint256\", data, offset).toNumber();\n            offset = offset + 32;\n        }\n        for(i = 0; i < size; i++){\n            var decoded = decodeSingle(parsedType.subArray, data, offset);\n            ret.push(decoded);\n            offset += parsedType.subArray.memoryUsage;\n        }\n        return ret;\n    } else if (parsedType.name === \"bytes\") {\n        offset = decodeSingle(\"uint256\", data, offset).toNumber();\n        size = decodeSingle(\"uint256\", data, offset).toNumber();\n        return data.slice(offset + 32, offset + 32 + size);\n    } else if (parsedType.name.startsWith(\"bytes\")) {\n        return data.slice(offset, offset + parsedType.size);\n    } else if (parsedType.name.startsWith(\"uint\")) {\n        num = new BN(data.slice(offset, offset + 32), 16, \"be\");\n        if (num.bitLength() > parsedType.size) {\n            throw new Error(\"Decoded int exceeds width: \" + parsedType.size + \" vs \" + num.bitLength());\n        }\n        return num;\n    } else if (parsedType.name.startsWith(\"int\")) {\n        num = new BN(data.slice(offset, offset + 32), 16, \"be\").fromTwos(256);\n        if (num.bitLength() > parsedType.size) {\n            throw new Error(\"Decoded uint exceeds width: \" + parsedType.size + \" vs \" + num.bitLength());\n        }\n        return num;\n    } else if (parsedType.name.startsWith(\"ufixed\")) {\n        size = new BN(2).pow(new BN(parsedType.size[1]));\n        num = decodeSingle(\"uint256\", data, offset);\n        if (!num.mod(size).isZero()) {\n            throw new Error(\"Decimals not supported yet\");\n        }\n        return num.div(size);\n    } else if (parsedType.name.startsWith(\"fixed\")) {\n        size = new BN(2).pow(new BN(parsedType.size[1]));\n        num = decodeSingle(\"int256\", data, offset);\n        if (!num.mod(size).isZero()) {\n            throw new Error(\"Decimals not supported yet\");\n        }\n        return num.div(size);\n    }\n    throw new Error(\"Unsupported or invalid type: \" + parsedType.name);\n}\n// Parse the given type\n// @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)\nfunction parseType(type) {\n    var size;\n    var ret;\n    if (isArray(type)) {\n        size = parseTypeArray(type);\n        var subArray = type.slice(0, type.lastIndexOf(\"[\"));\n        subArray = parseType(subArray);\n        ret = {\n            isArray: true,\n            name: type,\n            size: size,\n            memoryUsage: size === \"dynamic\" ? 32 : subArray.memoryUsage * size,\n            subArray: subArray\n        };\n        return ret;\n    } else {\n        var rawType;\n        switch(type){\n            case \"address\":\n                rawType = \"uint160\";\n                break;\n            case \"bool\":\n                rawType = \"uint8\";\n                break;\n            case \"string\":\n                rawType = \"bytes\";\n                break;\n        }\n        ret = {\n            rawType: rawType,\n            name: type,\n            memoryUsage: 32\n        };\n        if (type.startsWith(\"bytes\") && type !== \"bytes\" || type.startsWith(\"uint\") || type.startsWith(\"int\")) {\n            ret.size = parseTypeN(type);\n        } else if (type.startsWith(\"ufixed\") || type.startsWith(\"fixed\")) {\n            ret.size = parseTypeNxM(type);\n        }\n        if (type.startsWith(\"bytes\") && type !== \"bytes\" && (ret.size < 1 || ret.size > 32)) {\n            throw new Error(\"Invalid bytes<N> width: \" + ret.size);\n        }\n        if ((type.startsWith(\"uint\") || type.startsWith(\"int\")) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) {\n            throw new Error(\"Invalid int/uint<N> width: \" + ret.size);\n        }\n        return ret;\n    }\n}\n// Is a type dynamic?\nfunction isDynamic(type) {\n    // FIXME: handle all types? I don't think anything is missing now\n    return type === \"string\" || type === \"bytes\" || parseTypeArray(type) === \"dynamic\";\n}\n// Is a type an array?\nfunction isArray(type) {\n    return type.lastIndexOf(\"]\") === type.length - 1;\n}\n// Encode a method/event with arguments\n// @types an array of string type names\n// @args  an array of the appropriate values\nABI.rawEncode = function(types, values) {\n    var output = [];\n    var data = [];\n    var headLength = 0;\n    types.forEach(function(type) {\n        if (isArray(type)) {\n            var size = parseTypeArray(type);\n            if (size !== \"dynamic\") {\n                headLength += 32 * size;\n            } else {\n                headLength += 32;\n            }\n        } else {\n            headLength += 32;\n        }\n    });\n    for(var i = 0; i < types.length; i++){\n        var type = elementaryName(types[i]);\n        var value = values[i];\n        var cur = encodeSingle(type, value);\n        // Use the head/tail method for storing dynamic data\n        if (isDynamic(type)) {\n            output.push(encodeSingle(\"uint256\", headLength));\n            data.push(cur);\n            headLength += cur.length;\n        } else {\n            output.push(cur);\n        }\n    }\n    return Buffer.concat(output.concat(data));\n};\nABI.rawDecode = function(types, data) {\n    var ret = [];\n    data = Buffer.from(data);\n    var offset = 0;\n    for(var i = 0; i < types.length; i++){\n        var type = elementaryName(types[i]);\n        var parsed = parseType(type, data, offset);\n        var decoded = decodeSingle(parsed, data, offset);\n        offset += parsed.memoryUsage;\n        ret.push(decoded);\n    }\n    return ret;\n};\nABI.simpleEncode = function(method) {\n    var args = Array.prototype.slice.call(arguments).slice(1);\n    var sig = parseSignature(method);\n    // FIXME: validate/convert arguments\n    if (args.length !== sig.args.length) {\n        throw new Error(\"Argument count mismatch\");\n    }\n    return Buffer.concat([\n        ABI.methodID(sig.method, sig.args),\n        ABI.rawEncode(sig.args, args)\n    ]);\n};\nABI.simpleDecode = function(method, data) {\n    var sig = parseSignature(method);\n    // FIXME: validate/convert arguments\n    if (!sig.retargs) {\n        throw new Error(\"No return values in method\");\n    }\n    return ABI.rawDecode(sig.retargs, data);\n};\nfunction stringify(type, value) {\n    if (type.startsWith(\"address\") || type.startsWith(\"bytes\")) {\n        return \"0x\" + value.toString(\"hex\");\n    } else {\n        return value.toString();\n    }\n}\nABI.stringify = function(types, values) {\n    var ret = [];\n    for(var i in types){\n        var type = types[i];\n        var value = values[i];\n        // if it is an array type, concat the items\n        if (/^[^\\[]+\\[.*\\]$/.test(type)) {\n            value = value.map(function(item) {\n                return stringify(type, item);\n            }).join(\", \");\n        } else {\n            value = stringify(type, value);\n        }\n        ret.push(value);\n    }\n    return ret;\n};\nABI.solidityHexValue = function(type, value, bitsize) {\n    // pass in bitsize = null if use default bitsize\n    var size, num;\n    if (isArray(type)) {\n        var subType = type.replace(/\\[.*?\\]/, \"\");\n        if (!isArray(subType)) {\n            var arraySize = parseTypeArray(type);\n            if (arraySize !== \"dynamic\" && arraySize !== 0 && value.length > arraySize) {\n                throw new Error(\"Elements exceed array size: \" + arraySize);\n            }\n        }\n        var arrayValues = value.map(function(v) {\n            return ABI.solidityHexValue(subType, v, 256);\n        });\n        return Buffer.concat(arrayValues);\n    } else if (type === \"bytes\") {\n        return value;\n    } else if (type === \"string\") {\n        return Buffer.from(value, \"utf8\");\n    } else if (type === \"bool\") {\n        bitsize = bitsize || 8;\n        var padding = Array(bitsize / 4).join(\"0\");\n        return Buffer.from(value ? padding + \"1\" : padding + \"0\", \"hex\");\n    } else if (type === \"address\") {\n        var bytesize = 20;\n        if (bitsize) {\n            bytesize = bitsize / 8;\n        }\n        return utils.setLengthLeft(value, bytesize);\n    } else if (type.startsWith(\"bytes\")) {\n        size = parseTypeN(type);\n        if (size < 1 || size > 32) {\n            throw new Error(\"Invalid bytes<N> width: \" + size);\n        }\n        return utils.setLengthRight(value, size);\n    } else if (type.startsWith(\"uint\")) {\n        size = parseTypeN(type);\n        if (size % 8 || size < 8 || size > 256) {\n            throw new Error(\"Invalid uint<N> width: \" + size);\n        }\n        num = parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error(\"Supplied uint exceeds width: \" + size + \" vs \" + num.bitLength());\n        }\n        bitsize = bitsize || size;\n        return num.toArrayLike(Buffer, \"be\", bitsize / 8);\n    } else if (type.startsWith(\"int\")) {\n        size = parseTypeN(type);\n        if (size % 8 || size < 8 || size > 256) {\n            throw new Error(\"Invalid int<N> width: \" + size);\n        }\n        num = parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error(\"Supplied int exceeds width: \" + size + \" vs \" + num.bitLength());\n        }\n        bitsize = bitsize || size;\n        return num.toTwos(size).toArrayLike(Buffer, \"be\", bitsize / 8);\n    } else {\n        // FIXME: support all other types\n        throw new Error(\"Unsupported or invalid type: \" + type);\n    }\n};\nABI.solidityPack = function(types, values) {\n    if (types.length !== values.length) {\n        throw new Error(\"Number of types are not matching the values\");\n    }\n    var ret = [];\n    for(var i = 0; i < types.length; i++){\n        var type = elementaryName(types[i]);\n        var value = values[i];\n        ret.push(ABI.solidityHexValue(type, value, null));\n    }\n    return Buffer.concat(ret);\n};\nABI.soliditySHA3 = function(types, values) {\n    return utils.keccak256(ABI.solidityPack(types, values));\n};\nABI.soliditySHA256 = function(types, values) {\n    return utils.sha256(ABI.solidityPack(types, values));\n};\nABI.solidityRIPEMD160 = function(types, values) {\n    return utils.ripemd160(ABI.solidityPack(types, values), true);\n};\n// Serpent's users are familiar with this encoding\n// - s: string\n// - b: bytes\n// - b<N>: bytes<N>\n// - i: int256\n// - a: int256[]\nfunction isNumeric(c) {\n    // FIXME: is this correct? Seems to work\n    return c >= \"0\" && c <= \"9\";\n}\n// For a \"documentation\" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp\nABI.fromSerpent = function(sig) {\n    var ret = [];\n    for(var i = 0; i < sig.length; i++){\n        var type = sig[i];\n        if (type === \"s\") {\n            ret.push(\"bytes\");\n        } else if (type === \"b\") {\n            var tmp = \"bytes\";\n            var j = i + 1;\n            while(j < sig.length && isNumeric(sig[j])){\n                tmp += sig[j] - \"0\";\n                j++;\n            }\n            i = j - 1;\n            ret.push(tmp);\n        } else if (type === \"i\") {\n            ret.push(\"int256\");\n        } else if (type === \"a\") {\n            ret.push(\"int256[]\");\n        } else {\n            throw new Error(\"Unsupported or invalid type: \" + type);\n        }\n    }\n    return ret;\n};\nABI.toSerpent = function(types) {\n    var ret = [];\n    for(var i = 0; i < types.length; i++){\n        var type = types[i];\n        if (type === \"bytes\") {\n            ret.push(\"s\");\n        } else if (type.startsWith(\"bytes\")) {\n            ret.push(\"b\" + parseTypeN(type));\n        } else if (type === \"int256\") {\n            ret.push(\"i\");\n        } else if (type === \"int256[]\") {\n            ret.push(\"a\");\n        } else {\n            throw new Error(\"Unsupported or invalid type: \" + type);\n        }\n    }\n    return ret.join(\"\");\n};\nmodule.exports = ABI;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/account.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/account.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar ethjsUtil = __webpack_require__(/*! ethjs-util */ \"(ssr)/./node_modules/ethjs-util/lib/index.js\");\nvar secp256k1 = __webpack_require__(/*! ./secp256k1v3-adapter */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js\");\nvar hash_1 = __webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js\");\n/**\n * Returns a zero address.\n */ exports.zeroAddress = function() {\n    var addressLength = 20;\n    var addr = bytes_1.zeros(addressLength);\n    return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */ exports.isValidAddress = function(address) {\n    return /^0x[0-9a-fA-F]{40}$/.test(address);\n};\n/**\n * Checks if a given address is a zero address.\n */ exports.isZeroAddress = function(address) {\n    var zeroAddr = exports.zeroAddress();\n    return zeroAddr === bytes_1.addHexPrefix(address);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details, consult EIP-1191.\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */ exports.toChecksumAddress = function(address, eip1191ChainId) {\n    address = ethjsUtil.stripHexPrefix(address).toLowerCase();\n    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + \"0x\" : \"\";\n    var hash = hash_1.keccak(prefix + address).toString(\"hex\");\n    var ret = \"0x\";\n    for(var i = 0; i < address.length; i++){\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        } else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */ exports.isValidChecksumAddress = function(address, eip1191ChainId) {\n    return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */ exports.generateAddress = function(from, nonce) {\n    from = bytes_1.toBuffer(from);\n    var nonceBN = new BN(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return hash_1.rlphash([\n            from,\n            null\n        ]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return hash_1.rlphash([\n        from,\n        Buffer.from(nonceBN.toArray())\n    ]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */ exports.generateAddress2 = function(from, salt, initCode) {\n    var fromBuf = bytes_1.toBuffer(from);\n    var saltBuf = bytes_1.toBuffer(salt);\n    var initCodeBuf = bytes_1.toBuffer(initCode);\n    assert(fromBuf.length === 20);\n    assert(saltBuf.length === 32);\n    var address = hash_1.keccak256(Buffer.concat([\n        Buffer.from(\"ff\", \"hex\"),\n        fromBuf,\n        saltBuf,\n        hash_1.keccak256(initCodeBuf)\n    ]));\n    return address.slice(-20);\n};\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium).\n */ exports.isPrecompiled = function(address) {\n    var a = bytes_1.unpad(address);\n    return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */ exports.isValidPrivate = function(privateKey) {\n    return secp256k1.privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ exports.isValidPublic = function(publicKey, sanitize) {\n    if (sanitize === void 0) {\n        sanitize = false;\n    }\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return secp256k1.publicKeyVerify(Buffer.concat([\n            Buffer.from([\n                4\n            ]),\n            publicKey\n        ]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return secp256k1.publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ exports.pubToAddress = function(pubKey, sanitize) {\n    if (sanitize === void 0) {\n        sanitize = false;\n    }\n    pubKey = bytes_1.toBuffer(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n    }\n    assert(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return hash_1.keccak(pubKey).slice(-20);\n};\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ exports.privateToAddress = function(privateKey) {\n    return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ exports.privateToPublic = function(privateKey) {\n    privateKey = bytes_1.toBuffer(privateKey);\n    // skip the type flag and use the X, Y points\n    return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n/**\n * Converts a public key to the Ethereum format.\n */ exports.importPublic = function(publicKey) {\n    publicKey = bytes_1.toBuffer(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n    }\n    return publicKey;\n}; //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js":
/*!********************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;\nvar ethjsUtil = __webpack_require__(/*! ethjs-util */ \"(ssr)/./node_modules/ethjs-util/lib/index.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */ exports.zeros = function(bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer|Array)\n */ exports.setLengthLeft = function(msg, length, right) {\n    if (right === void 0) {\n        right = false;\n    }\n    var buf = exports.zeros(length);\n    msg = exports.toBuffer(msg);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    } else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\nexports.setLength = exports.setLengthLeft;\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @return (Buffer|Array)\n */ exports.setLengthRight = function(msg, length) {\n    return exports.setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */ exports.unpad = function(a) {\n    a = ethjsUtil.stripHexPrefix(a);\n    var first = a[0];\n    while(a.length > 0 && first.toString() === \"0\"){\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\nexports.stripZeros = exports.unpad;\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */ exports.toBuffer = function(v) {\n    if (!Buffer.isBuffer(v)) {\n        if (Array.isArray(v)) {\n            v = Buffer.from(v);\n        } else if (typeof v === \"string\") {\n            if (ethjsUtil.isHexString(v)) {\n                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), \"hex\");\n            } else {\n                throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n            }\n        } else if (typeof v === \"number\") {\n            v = ethjsUtil.intToBuffer(v);\n        } else if (v === null || v === undefined) {\n            v = Buffer.allocUnsafe(0);\n        } else if (BN.isBN(v)) {\n            v = v.toArrayLike(Buffer);\n        } else if (v.toArray) {\n            // converts a BN to a Buffer\n            v = Buffer.from(v.toArray());\n        } else {\n            throw new Error(\"invalid type\");\n        }\n    }\n    return v;\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */ exports.bufferToInt = function(buf) {\n    return new BN(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */ exports.bufferToHex = function(buf) {\n    buf = exports.toBuffer(buf);\n    return \"0x\" + buf.toString(\"hex\");\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */ exports.fromSigned = function(num) {\n    return new BN(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */ exports.toUnsigned = function(num) {\n    return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */ exports.addHexPrefix = function(str) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return ethjsUtil.isHexPrefixed(str) ? str : \"0x\" + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */ exports.baToJSON = function(ba) {\n    if (Buffer.isBuffer(ba)) {\n        return \"0x\" + ba.toString(\"hex\");\n    } else if (ba instanceof Array) {\n        var array = [];\n        for(var i = 0; i < ba.length; i++){\n            array.push(exports.baToJSON(ba[i]));\n        }\n        return array;\n    }\n}; //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/constants.js":
/*!************************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/constants.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\n/**\n * The max integer that this VM can handle\n */ exports.MAX_INTEGER = new BN(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16);\n/**\n * 2^256\n */ exports.TWO_POW256 = new BN(\"10000000000000000000000000000000000000000000000000000000000000000\", 16);\n/**\n * Keccak-256 hash of null\n */ exports.KECCAK256_NULL_S = \"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\";\n/**\n * Keccak-256 hash of null\n */ exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, \"hex\");\n/**\n * Keccak-256 of an RLP of an empty array\n */ exports.KECCAK256_RLP_ARRAY_S = \"1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\";\n/**\n * Keccak-256 of an RLP of an empty array\n */ exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, \"hex\");\n/**\n * Keccak-256 hash of the RLP of null\n */ exports.KECCAK256_RLP_S = \"56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\";\n/**\n * Keccak-256 hash of the RLP of null\n */ exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, \"hex\"); //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdBLHVCQUF1QixHQUFHQSwyQkFBMkIsR0FBR0EsNkJBQTZCLEdBQUdBLHNCQUFzQixHQUFHQSx3QkFBd0IsR0FBR0Esa0JBQWtCLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDcE4sSUFBSVUsS0FBS0MsbUJBQU9BLENBQUMsbURBQU87QUFDeEI7O0NBRUMsR0FDRFgsbUJBQW1CLEdBQUcsSUFBSVUsR0FBRyxvRUFBb0U7QUFDakc7O0NBRUMsR0FDRFYsa0JBQWtCLEdBQUcsSUFBSVUsR0FBRyxxRUFBcUU7QUFDakc7O0NBRUMsR0FDRFYsd0JBQXdCLEdBQUc7QUFDM0I7O0NBRUMsR0FDREEsc0JBQXNCLEdBQUdZLE9BQU9DLElBQUksQ0FBQ2IsUUFBUU8sZ0JBQWdCLEVBQUU7QUFDL0Q7O0NBRUMsR0FDRFAsNkJBQTZCLEdBQUc7QUFDaEM7O0NBRUMsR0FDREEsMkJBQTJCLEdBQUdZLE9BQU9DLElBQUksQ0FBQ2IsUUFBUUsscUJBQXFCLEVBQUU7QUFDekU7O0NBRUMsR0FDREwsdUJBQXVCLEdBQUc7QUFDMUI7O0NBRUMsR0FDREEscUJBQXFCLEdBQUdZLE9BQU9DLElBQUksQ0FBQ2IsUUFBUUcsZUFBZSxFQUFFLFFBQzdELHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZWZyb250Ly4vbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtYWJpL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLXV0aWwvZGlzdC9jb25zdGFudHMuanM/YzE3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUCA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZID0gZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MgPSBleHBvcnRzLktFQ0NBSzI1Nl9OVUxMID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TID0gZXhwb3J0cy5UV09fUE9XMjU2ID0gZXhwb3J0cy5NQVhfSU5URUdFUiA9IHZvaWQgMDtcbnZhciBCTiA9IHJlcXVpcmUoXCJibi5qc1wiKTtcbi8qKlxuICogVGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhpcyBWTSBjYW4gaGFuZGxlXG4gKi9cbmV4cG9ydHMuTUFYX0lOVEVHRVIgPSBuZXcgQk4oJ2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnLCAxNik7XG4vKipcbiAqIDJeMjU2XG4gKi9cbmV4cG9ydHMuVFdPX1BPVzI1NiA9IG5ldyBCTignMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLCAxNik7XG4vKipcbiAqIEtlY2Nhay0yNTYgaGFzaCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUyA9ICdjNWQyNDYwMTg2ZjcyMzNjOTI3ZTdkYjJkY2M3MDNjMGU1MDBiNjUzY2E4MjI3M2I3YmZhZDgwNDVkODVhNDcwJztcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfTlVMTCA9IEJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUywgJ2hleCcpO1xuLyoqXG4gKiBLZWNjYWstMjU2IG9mIGFuIFJMUCBvZiBhbiBlbXB0eSBhcnJheVxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9STFBfQVJSQVlfUyA9ICcxZGNjNGRlOGRlYzc1ZDdhYWI4NWI1NjdiNmNjZDQxYWQzMTI0NTFiOTQ4YTc0MTNmMGExNDJmZDQwZDQ5MzQ3Jztcbi8qKlxuICogS2VjY2FrLTI1NiBvZiBhbiBSTFAgb2YgYW4gZW1wdHkgYXJyYXlcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZID0gQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfUkxQX0FSUkFZX1MsICdoZXgnKTtcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9STFBfUyA9ICc1NmU4MWYxNzFiY2M1NWE2ZmY4MzQ1ZTY5MmMwZjg2ZTViNDhlMDFiOTk2Y2FkYzAwMTYyMmZiNWUzNjNiNDIxJztcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBSTFAgb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9STFAgPSBCdWZmZXIuZnJvbShleHBvcnRzLktFQ0NBSzI1Nl9STFBfUywgJ2hleCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIktFQ0NBSzI1Nl9STFAiLCJLRUNDQUsyNTZfUkxQX1MiLCJLRUNDQUsyNTZfUkxQX0FSUkFZIiwiS0VDQ0FLMjU2X1JMUF9BUlJBWV9TIiwiS0VDQ0FLMjU2X05VTEwiLCJLRUNDQUsyNTZfTlVMTF9TIiwiVFdPX1BPVzI1NiIsIk1BWF9JTlRFR0VSIiwiQk4iLCJyZXF1aXJlIiwiQnVmZmVyIiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\nvar _a = __webpack_require__(/*! ethereum-cryptography/keccak */ \"(ssr)/./node_modules/ethereum-cryptography/keccak.js\"), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;\nvar createHash = __webpack_require__(/*! create-hash */ \"(ssr)/./node_modules/create-hash/index.js\");\nvar ethjsUtil = __webpack_require__(/*! ethjs-util */ \"(ssr)/./node_modules/ethjs-util/lib/index.js\");\nvar rlp = __webpack_require__(/*! rlp */ \"(ssr)/./node_modules/rlp/dist/index.js\");\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */ exports.keccak = function(a, bits) {\n    if (bits === void 0) {\n        bits = 256;\n    }\n    if (typeof a === \"string\" && !ethjsUtil.isHexString(a)) {\n        a = Buffer.from(a, \"utf8\");\n    } else {\n        a = bytes_1.toBuffer(a);\n    }\n    if (!bits) bits = 256;\n    switch(bits){\n        case 224:\n            {\n                return keccak224(a);\n            }\n        case 256:\n            {\n                return k256(a);\n            }\n        case 384:\n            {\n                return keccak384(a);\n            }\n        case 512:\n            {\n                return keccak512(a);\n            }\n        default:\n            {\n                throw new Error(\"Invald algorithm: keccak\" + bits);\n            }\n    }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */ exports.keccak256 = function(a) {\n    return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */ exports.sha256 = function(a) {\n    a = bytes_1.toBuffer(a);\n    return createHash(\"sha256\").update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */ exports.ripemd160 = function(a, padded) {\n    a = bytes_1.toBuffer(a);\n    var hash = createHash(\"rmd160\").update(a).digest();\n    if (padded === true) {\n        return bytes_1.setLength(hash, 32);\n    } else {\n        return hash;\n    }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */ exports.rlphash = function(a) {\n    return exports.keccak(rlp.encode(a));\n}; //# sourceMappingURL=hash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L2hhc2guanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0EsaUJBQWlCLEdBQUdBLGNBQWMsR0FBR0EsaUJBQWlCLEdBQUdBLGNBQWMsR0FBRyxLQUFLO0FBQ2pHLElBQUlPLEtBQUtDLG1CQUFPQSxDQUFDLDZGQUFpQ0MsWUFBWUYsR0FBR0UsU0FBUyxFQUFFQyxZQUFZSCxHQUFHRyxTQUFTLEVBQUVDLE9BQU9KLEdBQUdGLFNBQVMsRUFBRU8sWUFBWUwsR0FBR0ssU0FBUztBQUNuSixJQUFJQyxhQUFhTCxtQkFBT0EsQ0FBQztBQUN6QixJQUFJTSxZQUFZTixtQkFBT0EsQ0FBQztBQUN4QixJQUFJTyxNQUFNUCxtQkFBT0EsQ0FBQyxtREFBSztBQUN2QixJQUFJUSxVQUFVUixtQkFBT0EsQ0FBQywrRkFBUztBQUMvQjs7Ozs7Q0FLQyxHQUNEUixjQUFjLEdBQUcsU0FBVWlCLENBQUMsRUFBRUMsSUFBSTtJQUM5QixJQUFJQSxTQUFTLEtBQUssR0FBRztRQUFFQSxPQUFPO0lBQUs7SUFDbkMsSUFBSSxPQUFPRCxNQUFNLFlBQVksQ0FBQ0gsVUFBVUssV0FBVyxDQUFDRixJQUFJO1FBQ3BEQSxJQUFJRyxPQUFPQyxJQUFJLENBQUNKLEdBQUc7SUFDdkIsT0FDSztRQUNEQSxJQUFJRCxRQUFRTSxRQUFRLENBQUNMO0lBQ3pCO0lBQ0EsSUFBSSxDQUFDQyxNQUNEQSxPQUFPO0lBQ1gsT0FBUUE7UUFDSixLQUFLO1lBQUs7Z0JBQ04sT0FBT1QsVUFBVVE7WUFDckI7UUFDQSxLQUFLO1lBQUs7Z0JBQ04sT0FBT04sS0FBS007WUFDaEI7UUFDQSxLQUFLO1lBQUs7Z0JBQ04sT0FBT1AsVUFBVU87WUFDckI7UUFDQSxLQUFLO1lBQUs7Z0JBQ04sT0FBT0wsVUFBVUs7WUFDckI7UUFDQTtZQUFTO2dCQUNMLE1BQU0sSUFBSU0sTUFBTSw2QkFBNkJMO1lBQ2pEO0lBQ0o7QUFDSjtBQUNBOzs7Q0FHQyxHQUNEbEIsaUJBQWlCLEdBQUcsU0FBVWlCLENBQUM7SUFDM0IsT0FBT2pCLFFBQVFNLE1BQU0sQ0FBQ1c7QUFDMUI7QUFDQTs7O0NBR0MsR0FDRGpCLGNBQWMsR0FBRyxTQUFVaUIsQ0FBQztJQUN4QkEsSUFBSUQsUUFBUU0sUUFBUSxDQUFDTDtJQUNyQixPQUFPSixXQUFXLFVBQ2JXLE1BQU0sQ0FBQ1AsR0FDUFEsTUFBTTtBQUNmO0FBQ0E7Ozs7Q0FJQyxHQUNEekIsaUJBQWlCLEdBQUcsU0FBVWlCLENBQUMsRUFBRVMsTUFBTTtJQUNuQ1QsSUFBSUQsUUFBUU0sUUFBUSxDQUFDTDtJQUNyQixJQUFJVSxPQUFPZCxXQUFXLFVBQ2pCVyxNQUFNLENBQUNQLEdBQ1BRLE1BQU07SUFDWCxJQUFJQyxXQUFXLE1BQU07UUFDakIsT0FBT1YsUUFBUVksU0FBUyxDQUFDRCxNQUFNO0lBQ25DLE9BQ0s7UUFDRCxPQUFPQTtJQUNYO0FBQ0o7QUFDQTs7O0NBR0MsR0FDRDNCLGVBQWUsR0FBRyxTQUFVaUIsQ0FBQztJQUN6QixPQUFPakIsUUFBUU0sTUFBTSxDQUFDUyxJQUFJYyxNQUFNLENBQUNaO0FBQ3JDLEdBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlZnJvbnQvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L2hhc2guanM/NmYzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmxwaGFzaCA9IGV4cG9ydHMucmlwZW1kMTYwID0gZXhwb3J0cy5zaGEyNTYgPSBleHBvcnRzLmtlY2NhazI1NiA9IGV4cG9ydHMua2VjY2FrID0gdm9pZCAwO1xudmFyIF9hID0gcmVxdWlyZSgnZXRoZXJldW0tY3J5cHRvZ3JhcGh5L2tlY2NhaycpLCBrZWNjYWsyMjQgPSBfYS5rZWNjYWsyMjQsIGtlY2NhazM4NCA9IF9hLmtlY2NhazM4NCwgazI1NiA9IF9hLmtlY2NhazI1Niwga2VjY2FrNTEyID0gX2Eua2VjY2FrNTEyO1xudmFyIGNyZWF0ZUhhc2ggPSByZXF1aXJlKCdjcmVhdGUtaGFzaCcpO1xudmFyIGV0aGpzVXRpbCA9IHJlcXVpcmUoJ2V0aGpzLXV0aWwnKTtcbnZhciBybHAgPSByZXF1aXJlKFwicmxwXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbi8qKlxuICogQ3JlYXRlcyBLZWNjYWsgaGFzaCBvZiB0aGUgaW5wdXRcbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcikgSWYgdGhlIHN0cmluZyBpcyBhIDB4LXByZWZpeGVkIGhleCB2YWx1ZVxuICogaXQncyBpbnRlcnByZXRlZCBhcyBoZXhhZGVjaW1hbCwgb3RoZXJ3aXNlIGFzIHV0ZjguXG4gKiBAcGFyYW0gYml0cyBUaGUgS2VjY2FrIHdpZHRoXG4gKi9cbmV4cG9ydHMua2VjY2FrID0gZnVuY3Rpb24gKGEsIGJpdHMpIHtcbiAgICBpZiAoYml0cyA9PT0gdm9pZCAwKSB7IGJpdHMgPSAyNTY7IH1cbiAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnICYmICFldGhqc1V0aWwuaXNIZXhTdHJpbmcoYSkpIHtcbiAgICAgICAgYSA9IEJ1ZmZlci5mcm9tKGEsICd1dGY4Jyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhID0gYnl0ZXNfMS50b0J1ZmZlcihhKTtcbiAgICB9XG4gICAgaWYgKCFiaXRzKVxuICAgICAgICBiaXRzID0gMjU2O1xuICAgIHN3aXRjaCAoYml0cykge1xuICAgICAgICBjYXNlIDIyNDoge1xuICAgICAgICAgICAgcmV0dXJuIGtlY2NhazIyNChhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI1Njoge1xuICAgICAgICAgICAgcmV0dXJuIGsyNTYoYSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzODQ6IHtcbiAgICAgICAgICAgIHJldHVybiBrZWNjYWszODQoYSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSA1MTI6IHtcbiAgICAgICAgICAgIHJldHVybiBrZWNjYWs1MTIoYSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxkIGFsZ29yaXRobToga2VjY2FrXCIgKyBiaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vKipcbiAqIENyZWF0ZXMgS2VjY2FrLTI1NiBoYXNoIG9mIHRoZSBpbnB1dCwgYWxpYXMgZm9yIGtlY2NhayhhLCAyNTYpLlxuICogQHBhcmFtIGEgVGhlIGlucHV0IGRhdGEgKEJ1ZmZlcnxBcnJheXxTdHJpbmd8TnVtYmVyKVxuICovXG5leHBvcnRzLmtlY2NhazI1NiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMua2VjY2FrKGEpO1xufTtcbi8qKlxuICogQ3JlYXRlcyBTSEEyNTYgaGFzaCBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YSAoQnVmZmVyfEFycmF5fFN0cmluZ3xOdW1iZXIpXG4gKi9cbmV4cG9ydHMuc2hhMjU2ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBhID0gYnl0ZXNfMS50b0J1ZmZlcihhKTtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JylcbiAgICAgICAgLnVwZGF0ZShhKVxuICAgICAgICAuZGlnZXN0KCk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIFJJUEVNRDE2MCBoYXNoIG9mIHRoZSBpbnB1dC5cbiAqIEBwYXJhbSBhIFRoZSBpbnB1dCBkYXRhIChCdWZmZXJ8QXJyYXl8U3RyaW5nfE51bWJlcilcbiAqIEBwYXJhbSBwYWRkZWQgV2hldGhlciBpdCBzaG91bGQgYmUgcGFkZGVkIHRvIDI1NiBiaXRzIG9yIG5vdFxuICovXG5leHBvcnRzLnJpcGVtZDE2MCA9IGZ1bmN0aW9uIChhLCBwYWRkZWQpIHtcbiAgICBhID0gYnl0ZXNfMS50b0J1ZmZlcihhKTtcbiAgICB2YXIgaGFzaCA9IGNyZWF0ZUhhc2goJ3JtZDE2MCcpXG4gICAgICAgIC51cGRhdGUoYSlcbiAgICAgICAgLmRpZ2VzdCgpO1xuICAgIGlmIChwYWRkZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVzXzEuc2V0TGVuZ3RoKGhhc2gsIDMyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbn07XG4vKipcbiAqIENyZWF0ZXMgU0hBLTMgaGFzaCBvZiB0aGUgUkxQIGVuY29kZWQgdmVyc2lvbiBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0gYSBUaGUgaW5wdXQgZGF0YVxuICovXG5leHBvcnRzLnJscGhhc2ggPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBleHBvcnRzLmtlY2NhayhybHAuZW5jb2RlKGEpKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJscGhhc2giLCJyaXBlbWQxNjAiLCJzaGEyNTYiLCJrZWNjYWsyNTYiLCJrZWNjYWsiLCJfYSIsInJlcXVpcmUiLCJrZWNjYWsyMjQiLCJrZWNjYWszODQiLCJrMjU2Iiwia2VjY2FrNTEyIiwiY3JlYXRlSGFzaCIsImV0aGpzVXRpbCIsInJscCIsImJ5dGVzXzEiLCJhIiwiYml0cyIsImlzSGV4U3RyaW5nIiwiQnVmZmVyIiwiZnJvbSIsInRvQnVmZmVyIiwiRXJyb3IiLCJ1cGRhdGUiLCJkaWdlc3QiLCJwYWRkZWQiLCJoYXNoIiwic2V0TGVuZ3RoIiwiZW5jb2RlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !exports1.hasOwnProperty(p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.secp256k1 = exports.rlp = exports.BN = void 0;\nvar secp256k1 = __webpack_require__(/*! ./secp256k1v3-adapter */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js\");\nexports.secp256k1 = secp256k1;\nvar ethjsUtil = __webpack_require__(/*! ethjs-util */ \"(ssr)/./node_modules/ethjs-util/lib/index.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nexports.BN = BN;\nvar rlp = __webpack_require__(/*! rlp */ \"(ssr)/./node_modules/rlp/dist/index.js\");\nexports.rlp = rlp;\nObject.assign(exports, ethjsUtil);\n/**\n * Constants\n */ __exportStar(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/constants.js\"), exports);\n/**\n * Public-key cryptography (secp256k1) and addresses\n */ __exportStar(__webpack_require__(/*! ./account */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/account.js\"), exports);\n/**\n * Hash functions\n */ __exportStar(__webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js\"), exports);\n/**\n * ECDSA signature\n */ __exportStar(__webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/signature.js\"), exports);\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */ __exportStar(__webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js\"), exports);\n/**\n * Function for definining properties on an object\n */ __exportStar(__webpack_require__(/*! ./object */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/object.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkosT0FBT08sY0FBYyxDQUFDTCxHQUFHRyxJQUFJO1FBQUVHLFlBQVk7UUFBTUMsS0FBSztZQUFhLE9BQU9OLENBQUMsQ0FBQ0MsRUFBRTtRQUFFO0lBQUU7QUFDdEYsSUFBTSxTQUFTRixDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJTSxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNQLENBQUMsRUFBRVEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtULEVBQUcsSUFBSVMsTUFBTSxhQUFhLENBQUNELFNBQVFFLGNBQWMsQ0FBQ0QsSUFBSWIsZ0JBQWdCWSxVQUFTUixHQUFHUztBQUNwRztBQUNBWiw4Q0FBNkM7SUFBRWMsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REgsaUJBQWlCLEdBQUdBLFdBQVcsR0FBR0EsVUFBVSxHQUFHLEtBQUs7QUFDcEQsSUFBSUksWUFBWUcsbUJBQU9BLENBQUM7QUFDeEJQLGlCQUFpQixHQUFHSTtBQUNwQixJQUFJSSxZQUFZRCxtQkFBT0EsQ0FBQztBQUN4QixJQUFJRCxLQUFLQyxtQkFBT0EsQ0FBQyxtREFBTztBQUN4QlAsVUFBVSxHQUFHTTtBQUNiLElBQUlELE1BQU1FLG1CQUFPQSxDQUFDLG1EQUFLO0FBQ3ZCUCxXQUFXLEdBQUdLO0FBQ2RoQixPQUFPb0IsTUFBTSxDQUFDVCxTQUFTUTtBQUN2Qjs7Q0FFQyxHQUNEVCxhQUFhUSxtQkFBT0EsQ0FBQyx1R0FBYSxHQUFHUDtBQUNyQzs7Q0FFQyxHQUNERCxhQUFhUSxtQkFBT0EsQ0FBQyxtR0FBVyxHQUFHUDtBQUNuQzs7Q0FFQyxHQUNERCxhQUFhUSxtQkFBT0EsQ0FBQyw2RkFBUSxHQUFHUDtBQUNoQzs7Q0FFQyxHQUNERCxhQUFhUSxtQkFBT0EsQ0FBQyx1R0FBYSxHQUFHUDtBQUNyQzs7Q0FFQyxHQUNERCxhQUFhUSxtQkFBT0EsQ0FBQywrRkFBUyxHQUFHUDtBQUNqQzs7Q0FFQyxHQUNERCxhQUFhUSxtQkFBT0EsQ0FBQyxpR0FBVSxHQUFHUCxVQUNsQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3QvaW5kZXguanM/YjUyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VjcDI1NmsxID0gZXhwb3J0cy5ybHAgPSBleHBvcnRzLkJOID0gdm9pZCAwO1xudmFyIHNlY3AyNTZrMSA9IHJlcXVpcmUoJy4vc2VjcDI1NmsxdjMtYWRhcHRlcicpO1xuZXhwb3J0cy5zZWNwMjU2azEgPSBzZWNwMjU2azE7XG52YXIgZXRoanNVdGlsID0gcmVxdWlyZSgnZXRoanMtdXRpbCcpO1xudmFyIEJOID0gcmVxdWlyZShcImJuLmpzXCIpO1xuZXhwb3J0cy5CTiA9IEJOO1xudmFyIHJscCA9IHJlcXVpcmUoXCJybHBcIik7XG5leHBvcnRzLnJscCA9IHJscDtcbk9iamVjdC5hc3NpZ24oZXhwb3J0cywgZXRoanNVdGlsKTtcbi8qKlxuICogQ29uc3RhbnRzXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudHNcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBQdWJsaWMta2V5IGNyeXB0b2dyYXBoeSAoc2VjcDI1NmsxKSBhbmQgYWRkcmVzc2VzXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9hY2NvdW50XCIpLCBleHBvcnRzKTtcbi8qKlxuICogSGFzaCBmdW5jdGlvbnNcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2hhc2hcIiksIGV4cG9ydHMpO1xuLyoqXG4gKiBFQ0RTQSBzaWduYXR1cmVcbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3NpZ25hdHVyZVwiKSwgZXhwb3J0cyk7XG4vKipcbiAqIFV0aWxpdGllcyBmb3IgbWFuaXB1bGF0aW5nIEJ1ZmZlcnMsIGJ5dGUgYXJyYXlzLCBldGMuXG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ieXRlc1wiKSwgZXhwb3J0cyk7XG4vKipcbiAqIEZ1bmN0aW9uIGZvciBkZWZpbmluaW5nIHByb3BlcnRpZXMgb24gYW4gb2JqZWN0XG4gKi9cbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9vYmplY3RcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsInZhbHVlIiwic2VjcDI1NmsxIiwicmxwIiwiQk4iLCJyZXF1aXJlIiwiZXRoanNVdGlsIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/object.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/object.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defineProperties = void 0;\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar ethjsUtil = __webpack_require__(/*! ethjs-util */ \"(ssr)/./node_modules/ethjs-util/lib/index.js\");\nvar rlp = __webpack_require__(/*! rlp */ \"(ssr)/./node_modules/rlp/dist/index.js\");\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */ exports.defineProperties = function(self, fields, data) {\n    self.raw = [];\n    self._fields = [];\n    // attach the `toJSON`\n    self.toJSON = function(label) {\n        if (label === void 0) {\n            label = false;\n        }\n        if (label) {\n            var obj_1 = {};\n            self._fields.forEach(function(field) {\n                obj_1[field] = \"0x\" + self[field].toString(\"hex\");\n            });\n            return obj_1;\n        }\n        return bytes_1.baToJSON(self.raw);\n    };\n    self.serialize = function serialize() {\n        return rlp.encode(self.raw);\n    };\n    fields.forEach(function(field, i) {\n        self._fields.push(field.name);\n        function getter() {\n            return self.raw[i];\n        }\n        function setter(v) {\n            v = bytes_1.toBuffer(v);\n            if (v.toString(\"hex\") === \"00\" && !field.allowZero) {\n                v = Buffer.allocUnsafe(0);\n            }\n            if (field.allowLess && field.length) {\n                v = bytes_1.stripZeros(v);\n                assert(field.length >= v.length, \"The field \" + field.name + \" must not have more \" + field.length + \" bytes\");\n            } else if (!(field.allowZero && v.length === 0) && field.length) {\n                assert(field.length === v.length, \"The field \" + field.name + \" must have byte length of \" + field.length);\n            }\n            self.raw[i] = v;\n        }\n        Object.defineProperty(self, field.name, {\n            enumerable: true,\n            configurable: true,\n            get: getter,\n            set: setter\n        });\n        if (field.default) {\n            self[field.name] = field.default;\n        }\n        // attach alias\n        if (field.alias) {\n            Object.defineProperty(self, field.alias, {\n                enumerable: false,\n                configurable: true,\n                set: setter,\n                get: getter\n            });\n        }\n    });\n    // if the constuctor is passed data\n    if (data) {\n        if (typeof data === \"string\") {\n            data = Buffer.from(ethjsUtil.stripHexPrefix(data), \"hex\");\n        }\n        if (Buffer.isBuffer(data)) {\n            data = rlp.decode(data);\n        }\n        if (Array.isArray(data)) {\n            if (data.length > self._fields.length) {\n                throw new Error(\"wrong number of fields in data\");\n            }\n            // make sure all the items are buffers\n            data.forEach(function(d, i) {\n                self[self._fields[i]] = bytes_1.toBuffer(d);\n            });\n        } else if (typeof data === \"object\") {\n            var keys_1 = Object.keys(data);\n            fields.forEach(function(field) {\n                if (keys_1.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n                if (keys_1.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n            });\n        } else {\n            throw new Error(\"invalid data\");\n        }\n    }\n}; //# sourceMappingURL=object.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;\nvar secp256k1 = __webpack_require__(/*! ethereum-cryptography/secp256k1 */ \"(ssr)/./node_modules/ethereum-cryptography/secp256k1.js\");\nvar secp256k1v3 = __webpack_require__(/*! ./secp256k1v3-lib/index */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js\");\nvar der = __webpack_require__(/*! ./secp256k1v3-lib/der */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js\");\n/**\n * Verify an ECDSA privateKey\n * @method privateKeyVerify\n * @param {Buffer} privateKey\n * @return {boolean}\n */ exports.privateKeyVerify = function(privateKey) {\n    // secp256k1 v4 version throws when privateKey length is not 32\n    if (privateKey.length !== 32) {\n        return false;\n    }\n    return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));\n};\n/**\n * Export a privateKey in DER format\n * @method privateKeyExport\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {boolean}\n */ exports.privateKeyExport = function(privateKey, compressed) {\n    // secp256k1 v4 version throws when privateKey length is not 32\n    if (privateKey.length !== 32) {\n        throw new RangeError(\"private key length is invalid\");\n    }\n    var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);\n    return der.privateKeyExport(privateKey, publicKey, compressed);\n};\n/**\n * Import a privateKey in DER format\n * @method privateKeyImport\n * @param {Buffer} privateKey\n * @return {Buffer}\n */ exports.privateKeyImport = function(privateKey) {\n    // privateKeyImport method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    privateKey = der.privateKeyImport(privateKey);\n    if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {\n        return privateKey;\n    }\n    throw new Error(\"couldn't import from DER format\");\n};\n/**\n * Negate a privateKey by subtracting it from the order of the curve's base point\n * @method privateKeyNegate\n * @param {Buffer} privateKey\n * @return {Buffer}\n */ exports.privateKeyNegate = function(privateKey) {\n    return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));\n};\n/**\n * Compute the inverse of a privateKey (modulo the order of the curve's base point).\n * @method privateKeyModInverse\n * @param {Buffer} privateKey\n * @return {Buffer}\n */ exports.privateKeyModInverse = function(privateKey) {\n    if (privateKey.length !== 32) {\n        throw new Error(\"private key length is invalid\");\n    }\n    return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));\n};\n/**\n * Tweak a privateKey by adding tweak to it.\n * @method privateKeyTweakAdd\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */ exports.privateKeyTweakAdd = function(privateKey, tweak) {\n    return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));\n};\n/**\n * Tweak a privateKey by multiplying it by a tweak.\n * @method privateKeyTweakMul\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */ exports.privateKeyTweakMul = function(privateKey, tweak) {\n    return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));\n};\n/**\n * Compute the public key for a privateKey.\n * @method publicKeyCreate\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {Buffer}\n */ exports.publicKeyCreate = function(privateKey, compressed) {\n    return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));\n};\n/**\n * Convert a publicKey to compressed or uncompressed form.\n * @method publicKeyConvert\n * @param {Buffer} publicKey\n * @param {boolean} compressed\n * @return {Buffer}\n */ exports.publicKeyConvert = function(publicKey, compressed) {\n    return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));\n};\n/**\n * Verify an ECDSA publicKey.\n * @method publicKeyVerify\n * @param {Buffer} publicKey\n * @return {boolean}\n */ exports.publicKeyVerify = function(publicKey) {\n    // secp256k1 v4 version throws when publicKey length is not 33 or 65\n    if (publicKey.length !== 33 && publicKey.length !== 65) {\n        return false;\n    }\n    return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));\n};\n/**\n * Tweak a publicKey by adding tweak times the generator to it.\n * @method publicKeyTweakAdd\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */ exports.publicKeyTweakAdd = function(publicKey, tweak, compressed) {\n    return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n/**\n * Tweak a publicKey by multiplying it by a tweak value\n * @method publicKeyTweakMul\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */ exports.publicKeyTweakMul = function(publicKey, tweak, compressed) {\n    return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n/**\n * Add a given publicKeys together.\n * @method publicKeyCombine\n * @param {Array<Buffer>} publicKeys\n * @param {boolean} compressed\n * @return {Buffer}\n */ exports.publicKeyCombine = function(publicKeys, compressed) {\n    var keys = [];\n    publicKeys.forEach(function(publicKey) {\n        keys.push(Uint8Array.from(publicKey));\n    });\n    return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));\n};\n/**\n * Convert a signature to a normalized lower-S form.\n * @method signatureNormalize\n * @param {Buffer} signature\n * @return {Buffer}\n */ exports.signatureNormalize = function(signature) {\n    return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));\n};\n/**\n * Serialize an ECDSA signature in DER format.\n * @method signatureExport\n * @param {Buffer} signature\n * @return {Buffer}\n */ exports.signatureExport = function(signature) {\n    return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));\n};\n/**\n * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImport\n * @param {Buffer} signature\n * @return {Buffer}\n */ exports.signatureImport = function(signature) {\n    return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));\n};\n/**\n * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImportLax\n * @param {Buffer} signature\n * @return {Buffer}\n */ exports.signatureImportLax = function(signature) {\n    // signatureImportLax method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    // ensure that signature is greater than 0\n    if (signature.length === 0) {\n        throw new RangeError(\"signature length is invalid\");\n    }\n    var sigObj = der.signatureImportLax(signature);\n    if (sigObj === null) {\n        throw new Error(\"couldn't parse DER signature\");\n    }\n    return secp256k1v3.signatureImport(sigObj);\n};\n/**\n * Create an ECDSA signature. Always return low-S signature.\n * @method sign\n * @param {Buffer} message\n * @param {Buffer} privateKey\n * @param {Object} options\n * @return {Buffer}\n */ exports.sign = function(message, privateKey, options) {\n    if (options === null) {\n        throw new TypeError(\"options should be an Object\");\n    }\n    var signOptions = undefined;\n    if (options) {\n        signOptions = {};\n        if (options.data === null) {\n            // validate option.data length\n            throw new TypeError(\"options.data should be a Buffer\");\n        }\n        if (options.data) {\n            if (options.data.length != 32) {\n                throw new RangeError(\"options.data length is invalid\");\n            }\n            signOptions.data = new Uint8Array(options.data);\n        }\n        if (options.noncefn === null) {\n            throw new TypeError(\"options.noncefn should be a Function\");\n        }\n        if (options.noncefn) {\n            // convert option.noncefn function signature\n            signOptions.noncefn = function(message, privateKey, algo, data, attempt) {\n                var bufferAlgo = algo != null ? Buffer.from(algo) : null;\n                var bufferData = data != null ? Buffer.from(data) : null;\n                var buffer = Buffer.from(\"\");\n                if (options.noncefn) {\n                    buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);\n                }\n                return new Uint8Array(buffer);\n            };\n        }\n    }\n    var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);\n    return {\n        signature: Buffer.from(sig.signature),\n        recovery: sig.recid\n    };\n};\n/**\n * Verify an ECDSA signature.\n * @method verify\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Buffer} publicKey\n * @return {boolean}\n */ exports.verify = function(message, signature, publicKey) {\n    return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);\n};\n/**\n * Recover an ECDSA public key from a signature.\n * @method recover\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Number} recid\n * @param {boolean} compressed\n * @return {Buffer}\n */ exports.recover = function(message, signature, recid, compressed) {\n    return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));\n};\n/**\n * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.\n * @method ecdh\n * @param {Buffer} publicKey\n * @param {Buffer} privateKey\n * @return {Buffer}\n */ exports.ecdh = function(publicKey, privateKey) {\n    // note: secp256k1 v3 doesn't allow optional parameter\n    return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));\n};\nexports.ecdhUnsafe = function(publicKey, privateKey, compressed) {\n    // ecdhUnsafe method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    // ensure valid publicKey length\n    if (publicKey.length !== 33 && publicKey.length !== 65) {\n        throw new RangeError(\"public key length is invalid\");\n    }\n    // ensure valid privateKey length\n    if (privateKey.length !== 32) {\n        throw new RangeError(\"private key length is invalid\");\n    }\n    return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));\n}; //# sourceMappingURL=secp256k1v3-adapter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// This file is imported from secp256k1 v3\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\n    // begin\n    0x30,\n    0x81,\n    0xd3,\n    0x02,\n    0x01,\n    0x01,\n    0x04,\n    0x20,\n    // private key\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    // middle\n    0xa0,\n    0x81,\n    0x85,\n    0x30,\n    0x81,\n    0x82,\n    0x02,\n    0x01,\n    0x01,\n    0x30,\n    0x2c,\n    0x06,\n    0x07,\n    0x2a,\n    0x86,\n    0x48,\n    0xce,\n    0x3d,\n    0x01,\n    0x01,\n    0x02,\n    0x21,\n    0x00,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xfe,\n    0xff,\n    0xff,\n    0xfc,\n    0x2f,\n    0x30,\n    0x06,\n    0x04,\n    0x01,\n    0x00,\n    0x04,\n    0x01,\n    0x07,\n    0x04,\n    0x21,\n    0x02,\n    0x79,\n    0xbe,\n    0x66,\n    0x7e,\n    0xf9,\n    0xdc,\n    0xbb,\n    0xac,\n    0x55,\n    0xa0,\n    0x62,\n    0x95,\n    0xce,\n    0x87,\n    0x0b,\n    0x07,\n    0x02,\n    0x9b,\n    0xfc,\n    0xdb,\n    0x2d,\n    0xce,\n    0x28,\n    0xd9,\n    0x59,\n    0xf2,\n    0x81,\n    0x5b,\n    0x16,\n    0xf8,\n    0x17,\n    0x98,\n    0x02,\n    0x21,\n    0x00,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xfe,\n    0xba,\n    0xae,\n    0xdc,\n    0xe6,\n    0xaf,\n    0x48,\n    0xa0,\n    0x3b,\n    0xbf,\n    0xd2,\n    0x5e,\n    0x8c,\n    0xd0,\n    0x36,\n    0x41,\n    0x41,\n    0x02,\n    0x01,\n    0x01,\n    0xa1,\n    0x24,\n    0x03,\n    0x22,\n    0x00,\n    // public key\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00\n]);\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\n    // begin\n    0x30,\n    0x82,\n    0x01,\n    0x13,\n    0x02,\n    0x01,\n    0x01,\n    0x04,\n    0x20,\n    // private key\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    // middle\n    0xa0,\n    0x81,\n    0xa5,\n    0x30,\n    0x81,\n    0xa2,\n    0x02,\n    0x01,\n    0x01,\n    0x30,\n    0x2c,\n    0x06,\n    0x07,\n    0x2a,\n    0x86,\n    0x48,\n    0xce,\n    0x3d,\n    0x01,\n    0x01,\n    0x02,\n    0x21,\n    0x00,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xfe,\n    0xff,\n    0xff,\n    0xfc,\n    0x2f,\n    0x30,\n    0x06,\n    0x04,\n    0x01,\n    0x00,\n    0x04,\n    0x01,\n    0x07,\n    0x04,\n    0x41,\n    0x04,\n    0x79,\n    0xbe,\n    0x66,\n    0x7e,\n    0xf9,\n    0xdc,\n    0xbb,\n    0xac,\n    0x55,\n    0xa0,\n    0x62,\n    0x95,\n    0xce,\n    0x87,\n    0x0b,\n    0x07,\n    0x02,\n    0x9b,\n    0xfc,\n    0xdb,\n    0x2d,\n    0xce,\n    0x28,\n    0xd9,\n    0x59,\n    0xf2,\n    0x81,\n    0x5b,\n    0x16,\n    0xf8,\n    0x17,\n    0x98,\n    0x48,\n    0x3a,\n    0xda,\n    0x77,\n    0x26,\n    0xa3,\n    0xc4,\n    0x65,\n    0x5d,\n    0xa4,\n    0xfb,\n    0xfc,\n    0x0e,\n    0x11,\n    0x08,\n    0xa8,\n    0xfd,\n    0x17,\n    0xb4,\n    0x48,\n    0xa6,\n    0x85,\n    0x54,\n    0x19,\n    0x9c,\n    0x47,\n    0xd0,\n    0x8f,\n    0xfb,\n    0x10,\n    0xd4,\n    0xb8,\n    0x02,\n    0x21,\n    0x00,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xfe,\n    0xba,\n    0xae,\n    0xdc,\n    0xe6,\n    0xaf,\n    0x48,\n    0xa0,\n    0x3b,\n    0xbf,\n    0xd2,\n    0x5e,\n    0x8c,\n    0xd0,\n    0x36,\n    0x41,\n    0x41,\n    0x02,\n    0x01,\n    0x01,\n    0xa1,\n    0x44,\n    0x03,\n    0x42,\n    0x00,\n    // public key\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00\n]);\nexports.privateKeyExport = function(privateKey, publicKey, compressed) {\n    if (compressed === void 0) {\n        compressed = true;\n    }\n    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);\n    privateKey.copy(result, compressed ? 8 : 9);\n    publicKey.copy(result, compressed ? 181 : 214);\n    return result;\n};\nexports.privateKeyImport = function(privateKey) {\n    var length = privateKey.length;\n    // sequence header\n    var index = 0;\n    if (length < index + 1 || privateKey[index] !== 0x30) return null;\n    index += 1;\n    // sequence length constructor\n    if (length < index + 1 || !(privateKey[index] & 0x80)) return null;\n    var lenb = privateKey[index] & 0x7f;\n    index += 1;\n    if (lenb < 1 || lenb > 2) return null;\n    if (length < index + lenb) return null;\n    // sequence length\n    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);\n    index += lenb;\n    if (length < index + len) return null;\n    // sequence element 0: version number (=1)\n    if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) {\n        return null;\n    }\n    index += 3;\n    // sequence element 1: octet string, up to 32 bytes\n    if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) {\n        return null;\n    }\n    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);\n};\nexports.signatureImportLax = function(signature) {\n    var r = Buffer.alloc(32, 0);\n    var s = Buffer.alloc(32, 0);\n    var length = signature.length;\n    var index = 0;\n    // sequence tag byte\n    if (signature[index++] !== 0x30) {\n        return null;\n    }\n    // sequence length byte\n    var lenbyte = signature[index++];\n    if (lenbyte & 0x80) {\n        index += lenbyte - 0x80;\n        if (index > length) {\n            return null;\n        }\n    }\n    // sequence tag byte for r\n    if (signature[index++] !== 0x02) {\n        return null;\n    }\n    // length for r\n    var rlen = signature[index++];\n    if (rlen & 0x80) {\n        lenbyte = rlen - 0x80;\n        if (index + lenbyte > length) {\n            return null;\n        }\n        for(; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1);\n        for(rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)rlen = (rlen << 8) + signature[index];\n    }\n    if (rlen > length - index) {\n        return null;\n    }\n    var rindex = index;\n    index += rlen;\n    // sequence tag byte for s\n    if (signature[index++] !== 0x02) {\n        return null;\n    }\n    // length for s\n    var slen = signature[index++];\n    if (slen & 0x80) {\n        lenbyte = slen - 0x80;\n        if (index + lenbyte > length) {\n            return null;\n        }\n        for(; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1);\n        for(slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)slen = (slen << 8) + signature[index];\n    }\n    if (slen > length - index) {\n        return null;\n    }\n    var sindex = index;\n    index += slen;\n    // ignore leading zeros in r\n    for(; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1);\n    // copy r value\n    if (rlen > 32) {\n        return null;\n    }\n    var rvalue = signature.slice(rindex, rindex + rlen);\n    rvalue.copy(r, 32 - rvalue.length);\n    // ignore leading zeros in s\n    for(; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1);\n    // copy s value\n    if (slen > 32) {\n        return null;\n    }\n    var svalue = signature.slice(sindex, sindex + slen);\n    svalue.copy(s, 32 - svalue.length);\n    return {\n        r: r,\n        s: s\n    };\n}; //# sourceMappingURL=der.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// This file is imported from secp256k1 v3\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar EC = (__webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\").ec);\nvar ec = new EC(\"secp256k1\");\nvar ecparams = ec.curve;\nexports.privateKeyExport = function(privateKey, compressed) {\n    if (compressed === void 0) {\n        compressed = true;\n    }\n    var d = new BN(privateKey);\n    if (d.ucmp(ecparams.n) >= 0) {\n        throw new Error(\"couldn't export to DER format\");\n    }\n    var point = ec.g.mul(d);\n    return toPublicKey(point.getX(), point.getY(), compressed);\n};\nexports.privateKeyModInverse = function(privateKey) {\n    var bn = new BN(privateKey);\n    if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {\n        throw new Error(\"private key range is invalid\");\n    }\n    return bn.invm(ecparams.n).toArrayLike(Buffer, \"be\", 32);\n};\nexports.signatureImport = function(sigObj) {\n    var r = new BN(sigObj.r);\n    if (r.ucmp(ecparams.n) >= 0) {\n        r = new BN(0);\n    }\n    var s = new BN(sigObj.s);\n    if (s.ucmp(ecparams.n) >= 0) {\n        s = new BN(0);\n    }\n    return Buffer.concat([\n        r.toArrayLike(Buffer, \"be\", 32),\n        s.toArrayLike(Buffer, \"be\", 32)\n    ]);\n};\nexports.ecdhUnsafe = function(publicKey, privateKey, compressed) {\n    if (compressed === void 0) {\n        compressed = true;\n    }\n    var point = ec.keyFromPublic(publicKey);\n    var scalar = new BN(privateKey);\n    if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {\n        throw new Error(\"scalar was invalid (zero or overflow)\");\n    }\n    var shared = point.pub.mul(scalar);\n    return toPublicKey(shared.getX(), shared.getY(), compressed);\n};\nvar toPublicKey = function(x, y, compressed) {\n    var publicKey;\n    if (compressed) {\n        publicKey = Buffer.alloc(33);\n        publicKey[0] = y.isOdd() ? 0x03 : 0x02;\n        x.toArrayLike(Buffer, \"be\", 32).copy(publicKey, 1);\n    } else {\n        publicKey = Buffer.alloc(65);\n        publicKey[0] = 0x04;\n        x.toArrayLike(Buffer, \"be\", 32).copy(publicKey, 1);\n        y.toArrayLike(Buffer, \"be\", 32).copy(publicKey, 33);\n    }\n    return publicKey;\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy1hYmkvbm9kZV9tb2R1bGVzL2V0aGVyZXVtanMtdXRpbC9kaXN0L3NlY3AyNTZrMXYzLWxpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDBDQUEwQztBQUMxQyxxRUFBcUU7QUFDckVBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLEtBQUtDLG1CQUFPQSxDQUFDLG1EQUFPO0FBQ3hCLElBQUlDLEtBQUtELHlGQUFzQjtBQUMvQixJQUFJRSxLQUFLLElBQUlELEdBQUc7QUFDaEIsSUFBSUUsV0FBV0QsR0FBR0UsS0FBSztBQUN2QlAsd0JBQXdCLEdBQUcsU0FBVVMsVUFBVSxFQUFFQyxVQUFVO0lBQ3ZELElBQUlBLGVBQWUsS0FBSyxHQUFHO1FBQUVBLGFBQWE7SUFBTTtJQUNoRCxJQUFJQyxJQUFJLElBQUlULEdBQUdPO0lBQ2YsSUFBSUUsRUFBRUMsSUFBSSxDQUFDTixTQUFTTyxDQUFDLEtBQUssR0FBRztRQUN6QixNQUFNLElBQUlDLE1BQU07SUFDcEI7SUFDQSxJQUFJQyxRQUFRVixHQUFHVyxDQUFDLENBQUNDLEdBQUcsQ0FBQ047SUFDckIsT0FBT08sWUFBWUgsTUFBTUksSUFBSSxJQUFJSixNQUFNSyxJQUFJLElBQUlWO0FBQ25EO0FBQ0FWLDRCQUE0QixHQUFHLFNBQVVTLFVBQVU7SUFDL0MsSUFBSWEsS0FBSyxJQUFJcEIsR0FBR087SUFDaEIsSUFBSWEsR0FBR1YsSUFBSSxDQUFDTixTQUFTTyxDQUFDLEtBQUssS0FBS1MsR0FBR0MsTUFBTSxJQUFJO1FBQ3pDLE1BQU0sSUFBSVQsTUFBTTtJQUNwQjtJQUNBLE9BQU9RLEdBQUdFLElBQUksQ0FBQ2xCLFNBQVNPLENBQUMsRUFBRVksV0FBVyxDQUFDQyxRQUFRLE1BQU07QUFDekQ7QUFDQTFCLHVCQUF1QixHQUFHLFNBQVU0QixNQUFNO0lBQ3RDLElBQUlDLElBQUksSUFBSTNCLEdBQUcwQixPQUFPQyxDQUFDO0lBQ3ZCLElBQUlBLEVBQUVqQixJQUFJLENBQUNOLFNBQVNPLENBQUMsS0FBSyxHQUFHO1FBQ3pCZ0IsSUFBSSxJQUFJM0IsR0FBRztJQUNmO0lBQ0EsSUFBSTRCLElBQUksSUFBSTVCLEdBQUcwQixPQUFPRSxDQUFDO0lBQ3ZCLElBQUlBLEVBQUVsQixJQUFJLENBQUNOLFNBQVNPLENBQUMsS0FBSyxHQUFHO1FBQ3pCaUIsSUFBSSxJQUFJNUIsR0FBRztJQUNmO0lBQ0EsT0FBT3dCLE9BQU9LLE1BQU0sQ0FBQztRQUFDRixFQUFFSixXQUFXLENBQUNDLFFBQVEsTUFBTTtRQUFLSSxFQUFFTCxXQUFXLENBQUNDLFFBQVEsTUFBTTtLQUFJO0FBQzNGO0FBQ0ExQixrQkFBa0IsR0FBRyxTQUFVaUMsU0FBUyxFQUFFeEIsVUFBVSxFQUFFQyxVQUFVO0lBQzVELElBQUlBLGVBQWUsS0FBSyxHQUFHO1FBQUVBLGFBQWE7SUFBTTtJQUNoRCxJQUFJSyxRQUFRVixHQUFHNkIsYUFBYSxDQUFDRDtJQUM3QixJQUFJRSxTQUFTLElBQUlqQyxHQUFHTztJQUNwQixJQUFJMEIsT0FBT3ZCLElBQUksQ0FBQ04sU0FBU08sQ0FBQyxLQUFLLEtBQUtzQixPQUFPWixNQUFNLElBQUk7UUFDakQsTUFBTSxJQUFJVCxNQUFNO0lBQ3BCO0lBQ0EsSUFBSXNCLFNBQVNyQixNQUFNc0IsR0FBRyxDQUFDcEIsR0FBRyxDQUFDa0I7SUFDM0IsT0FBT2pCLFlBQVlrQixPQUFPakIsSUFBSSxJQUFJaUIsT0FBT2hCLElBQUksSUFBSVY7QUFDckQ7QUFDQSxJQUFJUSxjQUFjLFNBQVVvQixDQUFDLEVBQUVDLENBQUMsRUFBRTdCLFVBQVU7SUFDeEMsSUFBSXVCO0lBQ0osSUFBSXZCLFlBQVk7UUFDWnVCLFlBQVlQLE9BQU9jLEtBQUssQ0FBQztRQUN6QlAsU0FBUyxDQUFDLEVBQUUsR0FBR00sRUFBRUUsS0FBSyxLQUFLLE9BQU87UUFDbENILEVBQUViLFdBQVcsQ0FBQ0MsUUFBUSxNQUFNLElBQUlnQixJQUFJLENBQUNULFdBQVc7SUFDcEQsT0FDSztRQUNEQSxZQUFZUCxPQUFPYyxLQUFLLENBQUM7UUFDekJQLFNBQVMsQ0FBQyxFQUFFLEdBQUc7UUFDZkssRUFBRWIsV0FBVyxDQUFDQyxRQUFRLE1BQU0sSUFBSWdCLElBQUksQ0FBQ1QsV0FBVztRQUNoRE0sRUFBRWQsV0FBVyxDQUFDQyxRQUFRLE1BQU0sSUFBSWdCLElBQUksQ0FBQ1QsV0FBVztJQUNwRDtJQUNBLE9BQU9BO0FBQ1gsR0FDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGVmcm9udC8uL25vZGVfbW9kdWxlcy9ldGhlcmV1bWpzLWFiaS9ub2RlX21vZHVsZXMvZXRoZXJldW1qcy11dGlsL2Rpc3Qvc2VjcDI1NmsxdjMtbGliL2luZGV4LmpzPzAyOTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBUaGlzIGZpbGUgaXMgaW1wb3J0ZWQgZnJvbSBzZWNwMjU2azEgdjNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jcnlwdG9jb2luanMvc2VjcDI1NmsxLW5vZGUvYmxvYi9tYXN0ZXIvTElDRU5TRVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJOID0gcmVxdWlyZShcImJuLmpzXCIpO1xudmFyIEVDID0gcmVxdWlyZSgnZWxsaXB0aWMnKS5lYztcbnZhciBlYyA9IG5ldyBFQygnc2VjcDI1NmsxJyk7XG52YXIgZWNwYXJhbXMgPSBlYy5jdXJ2ZTtcbmV4cG9ydHMucHJpdmF0ZUtleUV4cG9ydCA9IGZ1bmN0aW9uIChwcml2YXRlS2V5LCBjb21wcmVzc2VkKSB7XG4gICAgaWYgKGNvbXByZXNzZWQgPT09IHZvaWQgMCkgeyBjb21wcmVzc2VkID0gdHJ1ZTsgfVxuICAgIHZhciBkID0gbmV3IEJOKHByaXZhdGVLZXkpO1xuICAgIGlmIChkLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb3VsZG4ndCBleHBvcnQgdG8gREVSIGZvcm1hdFwiKTtcbiAgICB9XG4gICAgdmFyIHBvaW50ID0gZWMuZy5tdWwoZCk7XG4gICAgcmV0dXJuIHRvUHVibGljS2V5KHBvaW50LmdldFgoKSwgcG9pbnQuZ2V0WSgpLCBjb21wcmVzc2VkKTtcbn07XG5leHBvcnRzLnByaXZhdGVLZXlNb2RJbnZlcnNlID0gZnVuY3Rpb24gKHByaXZhdGVLZXkpIHtcbiAgICB2YXIgYm4gPSBuZXcgQk4ocHJpdmF0ZUtleSk7XG4gICAgaWYgKGJuLnVjbXAoZWNwYXJhbXMubikgPj0gMCB8fCBibi5pc1plcm8oKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByaXZhdGUga2V5IHJhbmdlIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGJuLmludm0oZWNwYXJhbXMubikudG9BcnJheUxpa2UoQnVmZmVyLCAnYmUnLCAzMik7XG59O1xuZXhwb3J0cy5zaWduYXR1cmVJbXBvcnQgPSBmdW5jdGlvbiAoc2lnT2JqKSB7XG4gICAgdmFyIHIgPSBuZXcgQk4oc2lnT2JqLnIpO1xuICAgIGlmIChyLnVjbXAoZWNwYXJhbXMubikgPj0gMCkge1xuICAgICAgICByID0gbmV3IEJOKDApO1xuICAgIH1cbiAgICB2YXIgcyA9IG5ldyBCTihzaWdPYmoucyk7XG4gICAgaWYgKHMudWNtcChlY3BhcmFtcy5uKSA+PSAwKSB7XG4gICAgICAgIHMgPSBuZXcgQk4oMCk7XG4gICAgfVxuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtyLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLCBzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpXSk7XG59O1xuZXhwb3J0cy5lY2RoVW5zYWZlID0gZnVuY3Rpb24gKHB1YmxpY0tleSwgcHJpdmF0ZUtleSwgY29tcHJlc3NlZCkge1xuICAgIGlmIChjb21wcmVzc2VkID09PSB2b2lkIDApIHsgY29tcHJlc3NlZCA9IHRydWU7IH1cbiAgICB2YXIgcG9pbnQgPSBlYy5rZXlGcm9tUHVibGljKHB1YmxpY0tleSk7XG4gICAgdmFyIHNjYWxhciA9IG5ldyBCTihwcml2YXRlS2V5KTtcbiAgICBpZiAoc2NhbGFyLnVjbXAoZWNwYXJhbXMubikgPj0gMCB8fCBzY2FsYXIuaXNaZXJvKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzY2FsYXIgd2FzIGludmFsaWQgKHplcm8gb3Igb3ZlcmZsb3cpJyk7XG4gICAgfVxuICAgIHZhciBzaGFyZWQgPSBwb2ludC5wdWIubXVsKHNjYWxhcik7XG4gICAgcmV0dXJuIHRvUHVibGljS2V5KHNoYXJlZC5nZXRYKCksIHNoYXJlZC5nZXRZKCksIGNvbXByZXNzZWQpO1xufTtcbnZhciB0b1B1YmxpY0tleSA9IGZ1bmN0aW9uICh4LCB5LCBjb21wcmVzc2VkKSB7XG4gICAgdmFyIHB1YmxpY0tleTtcbiAgICBpZiAoY29tcHJlc3NlZCkge1xuICAgICAgICBwdWJsaWNLZXkgPSBCdWZmZXIuYWxsb2MoMzMpO1xuICAgICAgICBwdWJsaWNLZXlbMF0gPSB5LmlzT2RkKCkgPyAweDAzIDogMHgwMjtcbiAgICAgICAgeC50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKS5jb3B5KHB1YmxpY0tleSwgMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwdWJsaWNLZXkgPSBCdWZmZXIuYWxsb2MoNjUpO1xuICAgICAgICBwdWJsaWNLZXlbMF0gPSAweDA0O1xuICAgICAgICB4LnRvQXJyYXlMaWtlKEJ1ZmZlciwgJ2JlJywgMzIpLmNvcHkocHVibGljS2V5LCAxKTtcbiAgICAgICAgeS50b0FycmF5TGlrZShCdWZmZXIsICdiZScsIDMyKS5jb3B5KHB1YmxpY0tleSwgMzMpO1xuICAgIH1cbiAgICByZXR1cm4gcHVibGljS2V5O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJOIiwicmVxdWlyZSIsIkVDIiwiZWMiLCJlY3BhcmFtcyIsImN1cnZlIiwicHJpdmF0ZUtleUV4cG9ydCIsInByaXZhdGVLZXkiLCJjb21wcmVzc2VkIiwiZCIsInVjbXAiLCJuIiwiRXJyb3IiLCJwb2ludCIsImciLCJtdWwiLCJ0b1B1YmxpY0tleSIsImdldFgiLCJnZXRZIiwicHJpdmF0ZUtleU1vZEludmVyc2UiLCJibiIsImlzWmVybyIsImludm0iLCJ0b0FycmF5TGlrZSIsIkJ1ZmZlciIsInNpZ25hdHVyZUltcG9ydCIsInNpZ09iaiIsInIiLCJzIiwiY29uY2F0IiwiZWNkaFVuc2FmZSIsInB1YmxpY0tleSIsImtleUZyb21QdWJsaWMiLCJzY2FsYXIiLCJzaGFyZWQiLCJwdWIiLCJ4IiwieSIsImFsbG9jIiwiaXNPZGQiLCJjb3B5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/signature.js":
/*!************************************************************************************!*\
  !*** ./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/signature.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1 = __webpack_require__(/*! ./secp256k1v3-adapter */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js\");\nvar BN = __webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/bn.js/lib/bn.js\");\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/bytes.js\");\nvar hash_1 = __webpack_require__(/*! ./hash */ \"(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/hash.js\");\n/**\n * Returns the ECDSA signature of a message hash.\n */ exports.ecsign = function(msgHash, privateKey, chainId) {\n    var sig = secp256k1.sign(msgHash, privateKey);\n    var recovery = sig.recovery;\n    var ret = {\n        r: sig.signature.slice(0, 32),\n        s: sig.signature.slice(32, 64),\n        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27\n    };\n    return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */ exports.ecrecover = function(msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([\n        bytes_1.setLength(r, 32),\n        bytes_1.setLength(s, 32)\n    ], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */ exports.toRpcSig = function(v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([\n        bytes_1.setLengthLeft(r, 32),\n        bytes_1.setLengthLeft(s, 32),\n        bytes_1.toBuffer(v)\n    ]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */ exports.fromRpcSig = function(sig) {\n    var buf = bytes_1.toBuffer(sig);\n    // NOTE: with potential introduction of chainId this might need to be updated\n    if (buf.length !== 65) {\n        throw new Error(\"Invalid signature length\");\n    }\n    var v = buf[64];\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64)\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */ exports.isValidSignature = function(v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) {\n        homesteadOrLater = true;\n    }\n    var SECP256K1_N_DIV_2 = new BN(\"7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\", 16);\n    var SECP256K1_N = new BN(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new BN(r);\n    var sBN = new BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */ exports.hashPersonalMessage = function(message) {\n    var prefix = Buffer.from(\"\\x19Ethereum Signed Message:\\n\" + message.length.toString(), \"utf-8\");\n    return hash_1.keccak(Buffer.concat([\n        prefix,\n        message\n    ]));\n};\nfunction calculateSigRecovery(v, chainId) {\n    return chainId ? v - (2 * chainId + 35) : v - 27;\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === 0 || recovery === 1;\n} //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/signature.js\n");

/***/ })

};
;